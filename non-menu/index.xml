<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Non-menus on Fanstasy Player / 幻想系玩家</title>
    <link>https://fantasyplayer.link/non-menu/</link>
    <description>Recent content in Non-menus on Fanstasy Player / 幻想系玩家</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 22 May 2021 15:10:02 +0800</lastBuildDate><atom:link href="https://fantasyplayer.link/non-menu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>自制脚本语言[5.2] if-else_if-else语句</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.2-if-else_if-else%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Sat, 22 May 2021 15:10:02 +0800</pubDate>
      
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.2-if-else_if-else%E8%AF%AD%E5%8F%A5/</guid>
      <description>本篇来尝试描述一下if-else_if-else 语句如何进行实现。
基本内容 语法树部分 先上图。
这里给的只是一个示例的语法树图示， 读者可以根据自己的需求进行修改。
笔者的想法是， 使用一个if_else节点作为根节点， 它的所有子节点是N个if节点和一个else节点。
由图可知，根节点下面有2个if节点， 和一个else 节点。 每个节点的内容和上篇类似，这里就不再赘述了。
对比上篇文章的内容， 笔者省略了condition等中间块。
直接在 AST上进行运算 笔者今天突然发现，上篇提到的跳转问题其实是可以解决的，目前大概有下面两个想法。
 给每个节点设置一个出口节点， 即当前节点成功执行/失败之后， 跳到出口节点执行。  此方法似乎会有点浪费内存   在线程状态上 添加一个或多个出口节点， 用于跳转。 似乎上述方法都没有使用字节码简单。  言归正传， 如果要在上面的语法树上直接运算的话， 笔者建议的方式是这样的。
if_else节点按顺序依次执行每个子节点， 如果碰到执行成功的或者全部子节点执行结束， 就直接从if_else节点中返回出去。
因为else 节点是放在最后面的， 所以不需要额外处理它。
使用字节码进行运算 这部分其实很简单， 笔者只大致说一下思路。
下面说的指令都是笔者自定义的字节码指令。
 定义一个出口标签end_of_if_else 在a == 0的逻辑判断语句之后生成一条 条件跳转语句cjmp， 跳转到else if语句的开始部分。 在print(&amp;quot;a == 0&amp;quot;); 函数语句的调用之后附加一条无条件跳转语句jmp， 跳转到end_of_if_else 在a &amp;gt; 0 的逻辑判断语句之后生成一条 条件跳转语句cjmp，跳转到else语句开始的地方。 我们在生成字节码的时候应该是从AST的最里面的节点开始的， 所以这个其实还是挺简单就可以实现的。  上述描述中，笔者省略了部分类似的地方。</description>
    </item>
    
    <item>
      <title>自制脚本语言[5.1] if-else分支语句</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.1-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Sun, 02 May 2021 16:41:53 +0800</pubDate>
      
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.1-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/</guid>
      <description>本篇来尝试描述下if-else语句如何进行实现。
基本内容 语法树部分 先掏出之前给读者看过的这张图， 然后笔者来解释一下其中的内容。
显而易见， 左侧部分是源代码， 右侧部分是一个大致的AST图示。
前两个部分就是一个赋值语句， 一个声明语句。 没什么好描述的。
由图示可知下面的内容。
 把if-else 语句 拆分成了一个单独的if语句和一个单独的else语句 把if语句继续拆分成一个condition部分，一个执行代码块部分。 所以我们现在就有了三个小部分。  if.condition if的 条件部分 if.block if的代码块部分 else else 语句的代码块部分   这三个小块的逻辑也比较简单。 if.condition == true的时候执行if.block 否则执行else  直接在AST上进行运算 如果像现在的langX一样直接在语法树上进行运算的话， 按照下面的方式处理应该就可以了。
笔者现在不建议这样做，因为字节码在进行跳转的时候应该比这种方式简单太多了。
 先运算if.condition 部分的代码， 然后把结果保存 在if块的地方判断结果， 并把if.condition的结果设置成自己的结果  如果if.condition部分是true 则执行if.block。 否则什么都不做   在if_else部分 判断if节点的值， 如果为false，则执行else部分  使用字节码进行运算 使用字节码尝试实现的话，核心部分应该在于跳转，所以加上适当的跳转字节码即可。
就像我们前面说过的， 字节码是一条一条指令进行执行的， 所以我们再适当的地方插入适当的跳转指令即可。
我们先来看几个自定义指令。 基于栈的指令。
 cjmp 有条件的跳转指令 全写应该是：condition jump  此指令存在一个参数， 表示要跳到的指令序号。 由于序号在本文中难以确定， 且可能会变化， 所以使用标签来代指。 这个指令首先获取栈顶元素， 并将该元素出栈 之后判断栈顶元素的值， 如果值是false的话， 就跳转， 否则此指令无任何效果   jmp 无条件的跳转指令  此指令存在一个参数， 表示要跳到的指令序号。 由于序号在本文中难以确定， 且可能会变化， 所以使用标签来代指。 直接跳转到指定的行数   seti 设置一个变量的值为一个整形数字  seti [varName] [intValue]   dec 声明一个变量 abci i 结尾的表示有一个参数是直接的int值。 很可能是第二个参数。 label: 使用冒号结尾的当做一个标签， 去掉冒号的部分即为标签的名字。 在真正的字节码里面应该是不直接使用变量名的， 而是会把变量名转换成数组的索引。 笔者目前只用于示意说明，所以这样写了。  下面看一段模拟指令。 （伪代码）</description>
    </item>
    
    <item>
      <title>自制脚本语言[4.2] 复合数值运算</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.2-%E5%A4%8D%E5%90%88%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/</link>
      <pubDate>Sun, 21 Mar 2021 11:24:13 +0800</pubDate>
      
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.2-%E5%A4%8D%E5%90%88%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/</guid>
      <description>本篇来描述一下类似 a + b + c 得运算内容。
同样，本篇只是说明一个可用于实现得概念模型， 并没有提供什么优化技巧。
详细内容 上一节我们讨论了两元运算， 现在我们讨论一下存在更多元素得运算表达式。
下面来看一段代码。
a = 1; b = 2; c = 3; d = a + b + c; e = a - b - c; f = a * b + c; g = a + b * c; h = a + b + c + a + c; i = a + b * c + a ; 基本逻辑 上面得例子在运算得时候至少存在3个元素，这在实现上并不需要修改上节所实现得逻辑，而是需要在生成抽象语法树(AST)得地方下功夫。</description>
    </item>
    
    <item>
      <title>自制脚本语言[4.1] 数值运算</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/</link>
      <pubDate>Sun, 07 Mar 2021 10:07:09 +0800</pubDate>
      
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/</guid>
      <description>本篇来描述一下数值运算相关的内容。
本篇描述的只是最简单的实现方式， 并没有提供什么优化技巧。
详细内容 数值运算应该编程里必不可少的一部分， 所以一个脚本语言引擎应该需要实现数值运算的功能。
下面来看一段代码。
a = 1; b = 2; c = a + b; d = a - b; e = a / d; f = a * b; g = a % d; h = a ^ b; i = a | b; j = a &amp;amp; b; k = ~ a ; 大概需要实现的运算类型就是 加减乘除，取模以及位运算。 读者可以根据自己的需求只实现部分的运算符号， 或者实现更多的符号。 （自定义新的符号）
基本逻辑 这里只讨论单个运算符， 不讨论多个运算符的情况。 比如 d = a + b + c 这种暂时不讨论。</description>
    </item>
    
    <item>
      <title>自制脚本语言[3.2]抽象语法树的简单介绍</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.2-%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 07 Feb 2021 16:00:56 +0800</pubDate>
      
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.2-%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</guid>
      <description>基本内容 在进行了正确的语法分析之后，会生成抽象语法树。
一般情况下是一段代码生成一个抽象语法树。 （常见的情况是一个文件或者一块代码。）
本篇来简单的描述一下抽象语法树的内容， 由于笔者的知识储备并不是特别的深，所以可能还需要读者阅读更多的资料。
抽象语法树就是一个树，树是一种基本的数据结构， 主要是由节点构成。
下面定义来自维基百科。
 每个节点都只有有限个子节点或无子节点； 没有父节点的节点称为根节点； 每一个非根节点有且只有一个父节点； 除了根节点外，每个子节点可以分为多个不相交的子树； 树里面没有环路(cycle)  词法分析会从字符流中生成出词法单元， 然后由语法分析进行组装，产生一个AST（抽象语法树）。 基本上来说，树上的每一个节点都是一个词法单元。
下面来看一些示例图。(点击图片可以查看大图)
数值运算
if语句
实际上的树要比笔者给的图更加复杂， 因为在设计的时候， 会考虑如何复用， 所以会进行抽象。 再进行了一定的抽象之后， 会多出一些层次， 但是那些多出来的内容在理解AST的时候是不太重要的。
只要能够组织基本的AST， 那么复杂的其实也不难。 基本上来说， 复杂的AST只是一个量变和正常量变带来的些许复杂度。
代码示例 下面给出一些langX的代码示例， 辅助读者理解这部分内容。
struct Node { NodeType type; // 在执行结束之后是否进行 free 操作  bool freeOnExecuted; // 当前节点的值 . 如果当前结点是一个常量数字， 则free 的时候会施放这个值得内存  Object *value; // 万能指针 ， 主要用于放置参数什么的  void *ptr_u; // 节点状态  NodeState state; // 当前节点所在的文件信息  NodeFileInfo fileinfo; // 后置值 ， 如果当前节点为一个 变量节点， 当前属性则为有用  Object *postposition; Variable *var_obj; Constant *con_obj; Operator *opr_obj; ArrayInfo *arr_obj; }; // 节点的文件信息 struct NodeFileInfo { // 文件名  // const char * filename;  // 修改成 std::string 试试，上面的那个类型要处理一下  std::string filename; // 行号  int lineno; }; struct Constant { int iValue; double dValue; char* sValue; char cValue; // 当前常量是否是一个 bool 类型得元素  bool flagBool = false; }; // 数组声明时使用 struct XArrayNode { // 数组名字  char * name; // 数组长度  int length; // 变量长度索引 .</description>
    </item>
    
    <item>
      <title>自制脚本语言[3.1] 环境与节点运算的值</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.1-%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%8A%82%E7%82%B9%E8%BF%90%E7%AE%97%E7%9A%84%E5%80%BC/</link>
      <pubDate>Sun, 07 Feb 2021 15:00:56 +0800</pubDate>
      
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.1-%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%8A%82%E7%82%B9%E8%BF%90%E7%AE%97%E7%9A%84%E5%80%BC/</guid>
      <description>本篇来描述一下 ”环境“相关的内容。
这部分内容是笔者从《两周自制脚本语言》这本书上学来的。
简单来说 环境就是一个K-V形式的Map。
 Key 是变量名 Value 是 变量值 一个环境表示一个作用域。 比如函数内部，类内部，脚本内部等。  这里需要提一下， 如果读者使用Java语言来实现脚本语言引擎，或者读者只是想学习一下，或者读者只是追求一个简单的脚本语言引擎，那么建议使用这种方式， 否则，不建议使用这种方式。
如果读者想实现一个复杂的， 稳定的脚本语言引擎， 那么建议使用变量表的形式来实现环境。
一个例子是使用数组或者链表来存放变量的值，对变量的引用在编译期间转换成具体的索引，而非变量名。
由于笔者还没有实现过相关的方式，所以本篇不讨论相关内容。也许后面笔者实现过了之后 会写一篇博文进行相关介绍 😂😂😂
详细说明 我们先来讨论一下 最简单的赋值行为。
先看一下下面的代码。
// 本段代码的内容都是在一个脚本文件内部的。 a = 1; b = &amp;#34;hello&amp;#34;; c = new Test(); d = a + 1; 为了使变量这个功能得以实现， 我们需要保存变量的当前值， 以使未来在使用这个变量的时候可以获取到正确的值。
所以我们可以使用下面的方式进行实现。
 新建一个新的 Map ，用于表示脚本的环境。 碰到 a = 1; 这条语句的时候， 把a的值 设置成 1 碰到 b = &amp;quot;hello&amp;quot;; 这条语句的时候， 把b的值设置成hello 碰到 c = new Test(); 的时候， 实例化 Test类，生成一个对象，并将对象的引用赋值给c 碰到 d = a + 1;  这条语句的时候， 首先取出a的值， 然后进行加法运算， 之后将结果赋值给 d  附注：</description>
    </item>
    
    <item>
      <title>自制脚本语言[2] 类型相关内容的介绍</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%802-%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E7%9A%84%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 07 Feb 2021 14:59:56 +0800</pubDate>
      
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%802-%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E7%9A%84%E4%BB%8B%E7%BB%8D/</guid>
      <description>本篇来描述一下 类型相关的内容。
脚本语言引擎需要提供一些基本类型和至少一个复杂类型的抽象(类，表等)。
基本类型 就拿JAVA语言的基本类型来举例： boolean,byte,char,short,int,long,float,double
其中的每一个类型都是基本元素，基本上在使用的时候不会拆分成更小的类型。
除了上述的关于数值的类型之外， 常用的还有一个字符串类型。 （在Java中 字符串不算基本类型。算引用类型。但在读者自己开发的脚本语言中，则可以自己定义。）
笔者在langX中定义的基本类型有下面几个：
 数值类型 （整数， 浮点数， 布尔） null 类型 字符串类型 数组 函数  别的复杂类型基本上都需要使用上述的类型进行组成。
复杂类型的抽象 基本上可以理解为JAVA里的类， lua里的表。
下面请看一个JAVA的代码片段。
@Data public class Student { // 唯一编号  private int id; // 姓名  private String name; // 年龄  private int age; // 是否毕业了  private boolean graduation; public boolean isGraduation(){ return graduation; } } 上面描述一个叫 Student的类， 即一个复杂类型。这个类由字段，方法，注解组成，其中大部分字段使用的基本类型， 还有部分字段使用的是复杂类型（字符串）。
这个类是一个具体的复杂类型， 为了使脚本语言引擎可以支持这个复杂类型， 我们需要实现一套机制。 这套机制可以表述一个复杂类型。</description>
    </item>
    
    <item>
      <title>自制脚本语言[1] 词法分析与语法分析</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%801-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 18 Jan 2021 20:18:27 +0800</pubDate>
      
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%801-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</guid>
      <description>本篇来描述如何做语法分析和词法分析。
有两种方式可以做词法分析和语法分析， 一是自己纯手写， 二是使用第三方工具。
 手写的优势  灵活性比较高 可以提供较好的错误提示给脚本语言的用户   手写的劣势  在没有基础的情况下，可能会需要更多的时间来完成这件事 可能会出现一些BUG   使用第三方工具的优势  较为出名的第三方工具往往都比较稳定 只需要关心语法结构， 而不用特别关心如何实现。   使用第三方工具的劣势  不够灵活，如果某些特性第三方工具没有的话，很可能就实现不了了。 提供给脚本语言用户的错误提示可能不够精确。    一般来说，使用哪种方式看读者的喜好。 笔者下面介绍一下部分已知的工具是使用哪种方式实现的。
 《两周自制脚本语言》 提供的是手写方式。 lua 是使用的手写方式。 早期的mysql 应该是使用的第三方工具。 （因为它给的提示特别烂。。）  第三方工具 因为使用第三方工具比较简单， 所以笔者采用第三方工具的方式来实现langX的词法解析与语法解析。
下面介绍一下笔者知道的几种工具。
 词法分析器： flex(lex) doc 。 语法分析器： yacc(bison) doc 。 语法分析+词法分析： tree-sitter doc 。  笔者这里统一使用 lex 称呼 flex/lex , 使用yacc 称呼 yacc/bison， lex+yacc是一起配合使用的。
Tree-sitter 则是一个单独使用的工具， 下面笔者就来更详细的介绍一下这几个工具。</description>
    </item>
    
    <item>
      <title>自制脚本语言 - 开篇</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/</link>
      <pubDate>Mon, 11 Jan 2021 21:13:45 +0800</pubDate>
      
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/</guid>
      <description>这个小系列将会介绍如何自制一门脚本语言。
主要内容 优劣 自制脚本语言将会有下面的好处：
 自己可以对脚本语言的语法，特性进行定制化 可以大概了解别的编程语言是如何运作的。 增强逻辑思维能力。  自制脚本语言将会有下面的坏处：
 需要大量的时间进行学习，调试。 做出来的东西往往只是一个玩具。 想要实现一个成熟的脚本语言 很难。 编写脚本的库也需要很多时间。  langX 笔者曾经使用cpp尝试写了一门脚本语言， 目前已经开源。
地址是： https://github.com/Aincvy/langX
本系列将会引用该工程里面的代码和设计思想。不过，有一点需要注意的是，该项目目前还十分的不成熟。
推荐阅读书籍以及其他 两周自制脚本语言
笔者就是看这本书入门的， 但是这本书存在一个很大的方向性问题， 即： 本书并没有使用字节码和VM的方式来实现执行。
不过，还是值得一看的入门书籍。
本书是使用Java作为实现语言的。
深入理解Java虚拟机（第3版）
如果读者是一名JAVA程序员， 那么可以看看这本书， 了解一下jvm的内容。 无论是对于JAVA，还是对于自制脚本语言都有很大的帮助。
https://github.com/lua/lua
这是lua源代码， 也有阅读的价值。
脚本语言的结构介绍 一般情况下， 脚本语言可以划分为几个部分。
 词法分析与语法分析 类型对象 （数值，字符串，对象，等） ⭐ 栈 或者 环境 ⭐ 虚拟机 或者 直接执行节点 ⭐ GC部分  其中， 词法分析与语法分析存在一些第三方工具可以使用， 笔者将会在下一篇博文中介绍。
虚拟机 与直接执行节点 语法分析之后会生成一个抽象语法树（Abstract Syntax Tree，AST） ， 树里面存在很多个节点。
直接执行节点在初期的时候比较方便， 但是当逻辑越来越复杂，语言特性越来越多的时候，似乎就不是很好用了。 在跳转语句上， 直接执行节点没有虚拟机方便，简单。</description>
    </item>
    
    <item>
      <title>宫殿、一</title>
      <link>https://fantasyplayer.link/non-menu/story-palace/%E5%AE%AB%E6%AE%BF1/</link>
      <pubDate>Tue, 08 Dec 2020 11:13:24 +0800</pubDate>
      
      <guid>https://fantasyplayer.link/non-menu/story-palace/%E5%AE%AB%E6%AE%BF1/</guid>
      <description>[噩梦人的梦呓]
我来到了一座宫殿里面，只是一个念头而已，我就来到了这座宫殿，我并不知道我是如何进来的，我只知道我现在在这里。
宫殿里有四个柱子做支撑，每个柱子上都雕刻着龙飞凤舞的图案，很是震撼。
每个柱子旁边都有一个火盆🔥，火盆放在支架上面。由于没有什么风进来，火盆里面的火苗没有什么太多变化。
柱子向外也有不少空间的样子， 但是因为没有足够的光线，所以无法看清那里到底有什么。
我的正前方有一个王座。 是的， 是一个王座。
它。。 该怎么描述呢。。。 该死，我记得不是很清楚。 它似乎镶金刻银十分富丽堂皇，又似乎没有任何装饰只是一个铁王座，有时候似乎又是一个非常简陋的木凳子。它时而真实而凝聚，时而虚幻而飘渺。
王座下没有阶梯， 是这座宫殿里面的唯一一个椅子。
老实说，虽然我不能确定这个王座的样子，但是我内心的声音却告诉我： ”你得坐上去，坐上去你就可以拥有整座天下了。“
我知道这十分可笑，明明只是一张不能确定存不存在的椅子而已，坐上去怎么会让人得到天下呢？
不过，这句话仿佛具有魔力一样，深深的控制住了我的思维。我几乎瞬间就深深的相信了这句话， 是的， 我打算去坐上去看看。从我的目光上来看，这个椅子离我不是很远，走几步就可以到达那儿，之后我就可以仔细的观察它到底是金子做的， 还是一个平凡的铁王座，异或别的什么。到那时，想必坐在上面也是一件轻而易举的事情。
我抬起了一只脚。
一股巨大的寒冷瞬间充斥在了我的全身上，冷的简直让我无法思考。
我的大脑里面充斥着寒冷的感觉，我不由得全身直打哆嗦。我本来就驼着的背更加的弯曲了，我的双手紧紧的抱在胸前，我慢慢的蹲下了，双手抱在双腿上，全身蜷缩成一个球状，乞求这样能让我感觉到温暖。
也不知道过了多久，我似乎终于适应了这样的寒冷，我缓慢的睁开双眼，映入眼帘的是无边的寒冰。此时此刻，我正站在一片巨大的冰床上。
周边不少高低起伏的冰壁，也有很多冰柱充斥在周围，我的身边没有太多阻挡物，冷风可以轻而易举的吹到我的身上来。
我感觉我赤身裸体的蜷缩这片巨大的冰床上面。冷风一阵阵的刮过，我就随着一次次的全身发抖。我已经完全忘记宫殿的事情了，我的思维似乎开始慢慢的被冻住了。🧊🧊🧊
我的眼睛因为发冷而感觉到疼痛，我只好闭上双眼，希望眼皮可以阻挡冷风的侵袭。
我的身体开始慢慢的变得僵硬，血液似乎要结冰了一样， 我连随着冷风发抖都已经做不到了了。
啊。 我似乎快要就这么死去了。 我突然的这么想到。
对死亡的恐惧使我的思维活跃了一些，我的大脑开始可以转动了。
我不能就这么倒下，我不能就这么死去。 
我不甘心的想要睁开双眼，想要确认下环境，想要寻求生机。
可是我的眼皮十分沉重，难以睁开，好像已经冻在了一起。 我想抬起双手揉一揉眼睛， 好让眼睛能够睁开。
我的大脑下达了指令，但是什么都没有发生，我发现我渐渐的感觉不到我的双手了。
现在，我感觉到了更深刻的恐惧，无助。
我似乎无法改变死亡的结局了。
我的大脑开始混乱了，思绪开始发散，我想到了我的小时候，想到了以前暗恋的女生，想到了过去做过的蠢事，想到了许下但没有完成的承诺。
我渐渐的无法控制大脑的思维了，思维就像脱缰的野马在大脑里面乱窜。
我开始感觉到不安，恐惧，愤怒，生存的渴望，嫉妒，强大等一堆情绪，这些情绪纠结在一起，似乎想要冲破我的身体跑出来，让我感觉十分的难受。 好像我要被内部的情绪冲的破破烂烂了的一样。
突然，我的大脑一片清明，似乎所有的思绪，所有因为思绪而产生的声音都消失不见了，我感觉到非常宁静。我并不知道因为什么我恢复了理智，我只知道这理智是暂时的。
这时的我已经无法感觉到身体的各个部分，但是我仍然想，仍然尝试睁开双眼， 就算此时此刻会死亡，我也不想死在这么漆黑的意识牢笼里面。
大脑的世界时而暴躁，混乱，思维无法统一，时而理智，在我能理智的这些时间里，我会尽力的尝试睁开双眼。
似乎过了很久，又似乎只是几个瞬间。
我的身体早已冻住，没有知觉， 只剩意识在大脑里面活跃，甚至这活跃也不是特别清晰。我清醒的时间越来越少，混沌的感觉越来越多，我都怀疑我是不是早已死亡，意识早就开始准备转生或者消散了。
此时，一缕白色的光芒照进了意识的世界。
我的双眼终于睁开了一点，我能勉强的看清前面的画面了。
原来我还没有死去，活着的感觉真好啊。 虽然我已经感受不到其他部分的躯体了。
我产生了一丝乐观的念头。
视觉的恢复让我暂时的将大脑思绪稳住了，我能进行更长久的逻辑思考了。
我慢慢的睁开双眼，尽力的向远方望去，但是我的脖子仍然处于僵硬状态，我只能转动眼球。
场景似乎和我被冰冻之前并没有太大的区别，不过我能看清稍近处的蓝色的冰柱了，里面似乎有一个赤裸的人影，又似乎是别的东西。
我吓了一跳，急忙想要注视那个冰柱， 但是我始终无法确定里面到底是不是存在一个人。
我的眼睛终于承受不住压力，我的视线开始从远方回来，然后又从我的膝盖到蓝色的冻冰地面。
这时，我发现地面像镜面一样，映照出一个人物。
那个人身上穿着正常的衣物，他一只脚向前踏出并处于悬空状态，一只脚在后。
那个人的双眼空洞无神，他双臂深深的抱在胸前，全身在不停的发抖着，他似乎很冷。
诶？ 这个人不就是我吗？ 💡</description>
    </item>
    
  </channel>
</rss>
