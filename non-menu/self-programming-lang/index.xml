<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>如何自制脚本语言 on Fanstasy Player / 幻想系玩家</title>
    <link>https://fantasyplayer.link/non-menu/self-programming-lang/</link>
    <description>Recent content in 如何自制脚本语言 on Fanstasy Player / 幻想系玩家</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>aincvy@gmail.com (Aincvy)</managingEditor>
    <webMaster>aincvy@gmail.com (Aincvy)</webMaster>
    <lastBuildDate>Tue, 08 Jun 2021 11:26:02 +0800</lastBuildDate>
    <atom:link href="https://fantasyplayer.link/non-menu/self-programming-lang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>自制脚本语言[7.2] 接口与继承</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.2-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Sun, 05 Dec 2021 10:59:02 +0800</pubDate><author>aincvy@gmail.com (Aincvy)</author>
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.2-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/</guid>
      <description>本篇来尝试描述一下接口和继承的相关内容。 基本内容函数和方法应该是同义的。 接口在 Java 和 C# 里面， 有接口的概念。 大体上存在下面的规则。 一个接口可以被</description>
    </item>
    <item>
      <title>自制脚本语言[7.1] 类</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.1-%E7%B1%BB/</link>
      <pubDate>Sun, 14 Nov 2021 11:19:19 +0800</pubDate><author>aincvy@gmail.com (Aincvy)</author>
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.1-%E7%B1%BB/</guid>
      <description>本篇来尝试描述一下类如何实现。 类是面向对象编程的基础， 即使不实现一个完全的类， 也应该实现一个可以储存复合数据的结构。 一般情况下，都会将类实例</description>
    </item>
    <item>
      <title>自制脚本语言[6.2] 匿名函数</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 14 Nov 2021 10:25:13 +0800</pubDate><author>aincvy@gmail.com (Aincvy)</author>
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/</guid>
      <description>本篇来描述一下匿名函数的实现。 基本内容 langX 代码示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 onEvent =&amp;gt; (flag, callback) { // xxx } callEvent =&amp;gt; (flag, data){ local cb = findCallback(flag); if( cb ){ cb(data); } } registerListeners =&amp;gt; { //</description>
    </item>
    <item>
      <title>自制脚本语言[附.1] 字节码列表</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E9%99%84.1-%E5%AD%97%E8%8A%82%E7%A0%81%E5%88%97%E8%A1%A8/</link>
      <pubDate>Sat, 02 Oct 2021 15:14:53 +0800</pubDate><author>aincvy@gmail.com (Aincvy)</author>
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E9%99%84.1-%E5%AD%97%E8%8A%82%E7%A0%81%E5%88%97%E8%A1%A8/</guid>
      <description>本文为想法草稿，并没有真实实践过。 本文描述的是一个基于栈的字节码指令列表。 前置内容 栈 指令基本上都是基于一个栈的。 栈中的每一个元素叫栈帧。 压栈</description>
    </item>
    <item>
      <title>自制脚本语言[6.1] 函数</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.1-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 02 Oct 2021 14:43:13 +0800</pubDate><author>aincvy@gmail.com (Aincvy)</author>
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.1-%E5%87%BD%E6%95%B0/</guid>
      <description>本篇来尝试描述一下函数如何实现。 基本内容 langX 代码示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // 函数声明 funa =&amp;gt; { a = 1 ; funb(); // 内置函数调用 println(&amp;#34;funa&amp;#34; + a); } funb =&amp;gt; (x){ println(&amp;#34;funb: &amp;#34;</description>
    </item>
    <item>
      <title>自制脚本语言[5.5] for循环语句</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.5-for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Sat, 31 Jul 2021 13:38:55 +0800</pubDate><author>aincvy@gmail.com (Aincvy)</author>
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.5-for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</guid>
      <description>本篇来尝试描述一下for循环语句如何实现。 基本内容 语法树部分先上图。 笔者这里给出了一个简单的for语句， 并附上了一个示意的AST结构。 for</description>
    </item>
    <item>
      <title>自制脚本语言[5.4] while循环语句</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.4-while%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Thu, 24 Jun 2021 15:38:47 +0800</pubDate><author>aincvy@gmail.com (Aincvy)</author>
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.4-while%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</guid>
      <description>本篇来尝试描述一下while循环语句如何实现。 基本内容 语法树部分先上图。 笔者这里给出了一个简单的while语句， 并附上了一个示意的AST结构</description>
    </item>
    <item>
      <title>自制脚本语言[5.3] switch-case语句</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.3-switch-case%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Thu, 24 Jun 2021 15:38:26 +0800</pubDate><author>aincvy@gmail.com (Aincvy)</author>
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.3-switch-case%E8%AF%AD%E5%8F%A5/</guid>
      <description>本篇先留白， 因为笔者没有想好该如何写作。</description>
    </item>
    <item>
      <title>自制脚本语言[5.2] if-else_if-else语句</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.2-if-else_if-else%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Sat, 22 May 2021 15:10:02 +0800</pubDate><author>aincvy@gmail.com (Aincvy)</author>
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.2-if-else_if-else%E8%AF%AD%E5%8F%A5/</guid>
      <description>本篇来尝试描述一下if-else_if-else 语句如何进行实现。 基本内容 语法树部分先上图。 这里给的只是一个示例的语法树图示， 读者可以根据自</description>
    </item>
    <item>
      <title>自制脚本语言[5.1] if-else分支语句</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.1-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Sun, 02 May 2021 16:41:53 +0800</pubDate><author>aincvy@gmail.com (Aincvy)</author>
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.1-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/</guid>
      <description>本篇来尝试描述下if-else语句如何进行实现。 基本内容 语法树部分先掏出之前给读者看过的这张图， 然后笔者来解释一下其中的内容。 显而易见， 左侧</description>
    </item>
    <item>
      <title>自制脚本语言[4.2] 复合数值运算</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.2-%E5%A4%8D%E5%90%88%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/</link>
      <pubDate>Sun, 21 Mar 2021 11:24:13 +0800</pubDate><author>aincvy@gmail.com (Aincvy)</author>
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.2-%E5%A4%8D%E5%90%88%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/</guid>
      <description>本篇来描述一下类似 a + b + c 得运算内容。 同样，本篇只是说明一个可用于实现得概念模型， 并没有提供什么优化技巧。 详细内容上一节我们讨论了两元运算</description>
    </item>
    <item>
      <title>自制脚本语言[4.1] 数值运算</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/</link>
      <pubDate>Sun, 07 Mar 2021 10:07:09 +0800</pubDate><author>aincvy@gmail.com (Aincvy)</author>
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/</guid>
      <description>本篇来描述一下数值运算相关的内容。 本篇描述的只是最简单的实现方式， 并没有提供什么优化技巧。 详细内容数值运算应该编程里必不可少的一部分， 所以一</description>
    </item>
    <item>
      <title>自制脚本语言[3.2]抽象语法树的简单介绍</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.2-%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 07 Feb 2021 16:00:56 +0800</pubDate><author>aincvy@gmail.com (Aincvy)</author>
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.2-%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</guid>
      <description>基本内容在进行了正确的语法分析之后，会生成抽象语法树。 一般情况下是一段代码生成一个抽象语法树。 （常见的情况是一个文件或者一块代码。） 本篇来简</description>
    </item>
    <item>
      <title>自制脚本语言[3.1] 环境与节点运算的值</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.1-%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%8A%82%E7%82%B9%E8%BF%90%E7%AE%97%E7%9A%84%E5%80%BC/</link>
      <pubDate>Sun, 07 Feb 2021 15:00:56 +0800</pubDate><author>aincvy@gmail.com (Aincvy)</author>
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.1-%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%8A%82%E7%82%B9%E8%BF%90%E7%AE%97%E7%9A%84%E5%80%BC/</guid>
      <description>本篇来描述一下 ”环境“相关的内容。 这部分内容是笔者从《两周自制脚本语言》这本书上学来的。 简单来说 环境就是一个K-V形式的Map。 Key 是变量名 Value</description>
    </item>
    <item>
      <title>自制脚本语言[2] 类型相关内容的介绍</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%802-%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E7%9A%84%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 07 Feb 2021 14:59:56 +0800</pubDate><author>aincvy@gmail.com (Aincvy)</author>
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%802-%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E7%9A%84%E4%BB%8B%E7%BB%8D/</guid>
      <description>本篇来描述一下 类型相关的内容。 脚本语言引擎需要提供一些基本类型和至少一个复杂类型的抽象(类，表等)。 基本类型就拿JAVA语言的基本类型来举例</description>
    </item>
    <item>
      <title>自制脚本语言[1] 词法分析与语法分析</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%801-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 18 Jan 2021 20:18:27 +0800</pubDate><author>aincvy@gmail.com (Aincvy)</author>
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%801-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</guid>
      <description>本篇来描述如何做语法分析和词法分析。 有两种方式可以做词法分析和语法分析， 一是自己纯手写， 二是使用第三方工具。 手写的优势 灵活性比较高 可以提供较</description>
    </item>
    <item>
      <title>自制脚本语言 - 开篇</title>
      <link>https://fantasyplayer.link/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/</link>
      <pubDate>Mon, 11 Jan 2021 21:13:45 +0800</pubDate><author>aincvy@gmail.com (Aincvy)</author>
      <guid>https://fantasyplayer.link/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/</guid>
      <description>这个小系列将会介绍如何自制一门脚本语言。 主要内容 优劣自制脚本语言将会有下面的好处： 自己可以对脚本语言的语法，特性进行定制化 可以大概了解别的编</description>
    </item>
  </channel>
</rss>
