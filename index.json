[{"categories":null,"content":"第一感觉，真难啊， 尤其是一个人搞。 感觉还不如上班呢。。 ","date":"2023-05-08","objectID":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/:0:0","tags":null,"title":"Steam上架后的一些感想","uri":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"主要内容 还是说点有用的东西吧。 ","date":"2023-05-08","objectID":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/:1:0","tags":null,"title":"Steam上架后的一些感想","uri":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"商店 steam 的曝光量，只有发行的第一天给的多， 假如购买量不足的话， 后面每天都会少很多。 可能是每天折半。 所以在真正发行之前， 可以挂着即将推出 久一点时间。 其次，商店的宣传图， 小宣传图和大宣传图 都值得用心琢磨一下， 做一下。 笔者急着上架， 所以这俩宣传图做的不是特别好， 而且是笔者自己做的， 效果差强人意。 感觉应该花钱找别人帮忙做的，应该做的有点特色一些， 不能太马虎。 ","date":"2023-05-08","objectID":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/:1:1","tags":null,"title":"Steam上架后的一些感想","uri":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"游戏内容 除了主体玩法之外， 还需要留时间给引导部分。 笔者发现， 每个人的理解能力不一样， 引导不能马虎。 引导马虎的直接结果就是 玩家很可能会退款 或者差评。 而这 肯定不是我们想要的。 ","date":"2023-05-08","objectID":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/:1:2","tags":null,"title":"Steam上架后的一些感想","uri":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"测试 测试也是很花时间的一件事情， 尤其是发行前， 可能需要保证游戏流程是不会中断的，所以需要花费很多时间去测试。 如果需要找别人进行测试， 也许可以使用 “游戏试玩”的口号， 而不是 帮忙测试下。 ","date":"2023-05-08","objectID":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/:1:3","tags":null,"title":"Steam上架后的一些感想","uri":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"远见 在立项的时候 就应该考虑整体内容， 面向的群体是哪些， 需要多少时间等。 并按月记录， 在超时的时候需要考虑用什么办法来处理。 在笔者的情况下， 实际的工作量总是大于预计的工作量， 所以应该把自己预计的工作量放大一些。 如果没有任何项目经验， 这部分可以试着做一下， 但是不是必须。 笔者是一个程序员， 在独自做独立游戏之后， 笔者的角色就变成了 制作人 策划 程序 美术 测试 运营 上面的每一个角色都代表了不同的人生经历， 不同的能力， 笔者很难去做好这些全部的角色， 只能说尽力去做。 如果有条件的话， 可以组队一起做项目。 1个人和2个人， 和3-5个人的差别是十分巨大的。 大于1个人的时候，孤独感应该会减少很多。孤独感和焦虑会随着做的时间越久而逐渐积累，感觉不到并不代表没有。 ","date":"2023-05-08","objectID":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/:1:4","tags":null,"title":"Steam上架后的一些感想","uri":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"失败 不要对一个项目抱有太高的期待， 可以减少失败的时候的受挫感。 但是 如果对一个项目没有太高的期待， 动力就会缺少。 受挫感是可以熬过去的， 无论有没有玩家玩我们做的游戏， 我们都应该认真去做。 失败并非没有价值的， 我们肯定会获得一些东西的。 ","date":"2023-05-08","objectID":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/:1:5","tags":null,"title":"Steam上架后的一些感想","uri":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"工作量 尽量选择一个小一些工作量的项目， 工作量越多， 折磨越多， 效果可能还不够好。 这在一定程度上表示时间都会打水漂。 ","date":"2023-05-08","objectID":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/:1:6","tags":null,"title":"Steam上架后的一些感想","uri":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"特点 玩法 OR 画面 OR 制作人 应该要有一个是突出的，否则很可能会比较难卖。 制作人是指名气突出， 不是能力突出。 如果制作人的能力真的突出， 那么会应用到游戏玩法OR画面上面的。 人手不足， 经验不足的情况下， 纠结玩法应该是比纠结画面要好一些， 但是画面也要尽可能的好。 想要表现很好， 是需要大量的工时去堆上去的， 但是这对1个人，2个人的小团队来说 很难。 ","date":"2023-05-08","objectID":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/:1:7","tags":null,"title":"Steam上架后的一些感想","uri":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"门槛 在到达门槛之前， 可能都卖出去的不多。 是一个极其亏本的买卖。 到达门槛之后 可能就可以进入到一个良性循环状态了。 ","date":"2023-05-08","objectID":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/:1:8","tags":null,"title":"Steam上架后的一些感想","uri":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"品牌 无论打不打算做多个游戏， 都应该考虑树立品牌， 这很难， 但是一旦成功，你的下一款产品将会有一些粉丝基础， 这很重要。 ","date":"2023-05-08","objectID":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/:1:9","tags":null,"title":"Steam上架后的一些感想","uri":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"版本 也许不应该采取一次性全部做完的情况， 可以分成若干个小版本。 等 可玩的版本出现之后， 就发布出去， 给别人免费下载游玩， 这个时候不一定要上什么商城， 可以在视频网站发布。 虽然很大的几率是没有人玩， 但是那是别人的行为， 你控制不了。 也许你会碰到一两个玩家， 然后慢慢变多。 总归是需要一个过程的， 长期积累之后出现大规模增长的可能性会变高。 还有一个问题是， 别人也可能会提出一些好点子， 让你提高项目的娱乐性 或者让项目变得更好操作。 ","date":"2023-05-08","objectID":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/:1:10","tags":null,"title":"Steam上架后的一些感想","uri":"/periphery/steam%E4%B8%8A%E6%9E%B6%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"游戏类型： 单人， VR， 战斗。 ","date":"2023-05-08","objectID":"/periphery/%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C-%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/:0:0","tags":null,"title":"作为术士，我要应付月中测验 - 技术细节","uri":"/periphery/%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C-%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/"},{"categories":null,"content":"主要内容 游戏引擎： Unity 2018, Unity 2019 美术部分： Unity asset store 模型 动画 粒子特效 Unity 插件使用以及目的 MapMagic 地形生成工具， 用于生成地形 还包括树木， 石头， 花草的自动放置。 UMotion 动画创造，编辑工具。 用于修改已有动画， 主要是调节 Z轴和Y轴。 Dotween xNode 主要是用于制作AI 行为树 Newtonsoft Json 序列化， 反序列化 Pdollarplus 图案识别 UniRx 事件 VRTK vr 操作的基础工具集 传送，抓取物品 摄像头， 手部控制器的位置同步相关 steamVR Facepunch.Steamworks steam API TinyScreenCapture 运行时截屏工具 TextMesh Pro 高质量文本显示 编辑器相关的工具 NaughtyAttributes Inspector 工具 HierarchyPro Hierarchy 美化工具 给工具栏添加自定义按钮 UnityFileDebug 日志查看工具， 方便分类，筛选等 ","date":"2023-05-08","objectID":"/periphery/%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C-%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/:1:0","tags":null,"title":"作为术士，我要应付月中测验 - 技术细节","uri":"/periphery/%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C-%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/"},{"categories":null,"content":"技能和实体和AI 此处的实体并非 ECS的实体， 而是表示一个可受伤的单位。 实体类结构 Entity LivingEntity NPCEntity MyNormalMonster MyBossMonster BOSSA BOSSB MonsterA MonsterB Servant Monster 已经弃用 NormalMonster 已经弃用 Player Entity 是所有实体的基类，是一个抽象类。 给当前单位应用一个持续力。 包含击退 攻击的伤害产生部分 。。。 LivingEntity 是关键类. 表示一个活着的实体。 具有血量， 蓝量（蓝量并没有使用） 能受伤， 死亡， 眩晕 。 具有移动，跳跃能力，飞行能力 伤害抗性 。。。 NPCEntity 表示一个 Npc单位 主要是动画部分的应用 AI 行为树的更新。 。。。 技能部分 SpellManager SpellMetaInfo 技能元信息 大多数的技能配置都在这里 名称，描述，伤害，对伤害过的单位产生一个新的力， prefab 路径 冷却时间， 蓝量 都未使用 技能类型， 技能移动类型， 元素类型， 能否被反击 挂载点， 瞄准点 坚定优先级 即是否使目标进入受伤动画的优先级 技能读条信息 读条时间 能否被打断， 打断条件是什么 。。。 技能额外信息 一些其他参数 SpellForm Prefab 挂载的脚本 主要目的是组合各个模块， 产生一个合适的效果 SpellAnimation 让施法者播放一个动画 SpellDamage 技能伤害 配置 持续时间， 伤害间隔等 伤害目标判定 主要是碰撞体的方式 还有 Physics.XXX() 的形式 这个用的比较少 SpellCustom 施放一个另外的技能 给施法者添加一个新的力 添加buff 。。。 ParticleHelper 技能特效 ","date":"2023-05-08","objectID":"/periphery/%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C-%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/:1:1","tags":null,"title":"作为术士，我要应付月中测验 - 技术细节","uri":"/periphery/%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C-%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/"},{"categories":null,"content":"AI 部分 KXAIGraph 表示一个AI图 所有节点的数据 运行中的节点数据 trigger list, property list, expire list AINodeEnter AINodeSequence Selector 遇到第一个 return true的节点就结束序列， 并return true Sequence 从头往下执行，每次Update 最多执行一个节点。 遇到 return false的节点就中断整个序列 [可选项] Parallel 并行， 一次Update 全部执行完毕， 不管子节点的返回值 AICheckNode AIWorkNode 具体的实体行为 移动到某个单位附近， 移动到某个点 使用技能 给自己添加BUFF 等等 AIEventNode 事件节点， 优先级高于其他类型的Node， 但是不参与常规Update KXAIGraph 初始化事件 技能在读条的时候被打断的事件 玩家使用了技能的事件 等等 AINodeChanceWork 权重随机 ","date":"2023-05-08","objectID":"/periphery/%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C-%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/:1:2","tags":null,"title":"作为术士，我要应付月中测验 - 技术细节","uri":"/periphery/%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C-%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/"},{"categories":null,"content":"编辑器工具部分 SpellCreator SpellTest BuffCreator EntityEditorHelper 等等 ","date":"2023-05-08","objectID":"/periphery/%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C-%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/:1:3","tags":null,"title":"作为术士，我要应付月中测验 - 技术细节","uri":"/periphery/%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C-%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/"},{"categories":null,"content":"反思 技能部分 应该是可以有一个更好的组成方式。 在构想中， 使用xNode的类似插件， 应该可以更好的设计和配置技能。 技能特效与技能效果与技能的生命周期 直接的协调， 还需要再考虑一下。 随机数的生成， 还需要考虑一个新的方案。 这个对技能和AI的影响比较大。 ","date":"2023-05-08","objectID":"/periphery/%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C-%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/:1:4","tags":null,"title":"作为术士，我要应付月中测验 - 技术细节","uri":"/periphery/%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C-%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/"},{"categories":null,"content":"其他工具 GoldWave 音频编辑工具 免费版有导出文件次数限制， 感觉还不如使用 adobe家族的工具 Shotcut 视频编辑工具 免费， 不要钱 有点难用， 但是也还能用 可以用于steam宣传片， 或者游戏内的视频 GIMP 图片编辑工具 免费，不要钱 做宣传图的时候可以考虑使用 游戏内的美术资源修改 也可以考虑使用 VS Code 文本编辑工具 代码编写工具 断点调试工具 免费， 不要钱 ","date":"2023-05-08","objectID":"/periphery/%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C-%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/:2:0","tags":null,"title":"作为术士，我要应付月中测验 - 技术细节","uri":"/periphery/%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C-%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/"},{"categories":null,"content":"作为术士，我要应付月中测验 是一款奇幻风格的动作游戏","date":"2023-05-05","objectID":"/2023/vr%E6%B8%B8%E6%88%8F-%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C/","tags":null,"title":"VR游戏| 作为术士，我要应付月中测验","uri":"/2023/vr%E6%B8%B8%E6%88%8F-%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C/"},{"categories":null,"content":"这是笔者做的一款独立游戏。 ","date":"2023-05-05","objectID":"/2023/vr%E6%B8%B8%E6%88%8F-%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C/:0:0","tags":null,"title":"VR游戏| 作为术士，我要应付月中测验","uri":"/2023/vr%E6%B8%B8%E6%88%8F-%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C/"},{"categories":null,"content":"主要内容 这个游戏的核心部分是近战反击，远程反击，与适时的技能爆发。 玩家扮演一个年轻的术士， 去完成他的月中测验。 测验进行的场地是一个1000*1000米的一个地图， 玩家在里面将进行数轮BOSS站， 战斗结束之后即可完成月中测验。 玩家的主要能力是 近战反击，失神击破， 远程反击， 远程反击快速技能。 玩家的主要法术部分是 召唤一个匕首， 召唤一个火球射手， 用手射出闪电。 能力和法术都有前置动作， 能力部分是依赖双手操作， 法术部分是需要勾画图案。 核心玩法概念是两部分 弹反， 近战与远程攻击。 以及成功弹反的奖励： 失神击破和一个不需要勾画图案的法术攻击 合适时机的法术轰炸 OR 法术伤害诱捕 有一只小号的人鱼和玩家一起参加测验， 在必要的时候， 她可以施放技能帮助玩家。 点击购买 ","date":"2023-05-05","objectID":"/2023/vr%E6%B8%B8%E6%88%8F-%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C/:1:0","tags":null,"title":"VR游戏| 作为术士，我要应付月中测验","uri":"/2023/vr%E6%B8%B8%E6%88%8F-%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C/"},{"categories":null,"content":"截图以及其他 B站宣传片： B站流程视频：点击观看 ","date":"2023-05-05","objectID":"/2023/vr%E6%B8%B8%E6%88%8F-%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C/:1:1","tags":null,"title":"VR游戏| 作为术士，我要应付月中测验","uri":"/2023/vr%E6%B8%B8%E6%88%8F-%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C/"},{"categories":null,"content":"背后的故事 这个项目是笔者从 2019年中开始做的，但是因为个人原因，在年末放弃了， 项目搁置了。 在2023年初， 因为工作以及其他问题， 所以又捡起来继续开发了， 并尝试完成了。 笔者非常喜欢只狼这个游戏，特别喜欢里面的弹反，识破，踩头部分。 所以本作借鉴了一些其中的概念。 ","date":"2023-05-05","objectID":"/2023/vr%E6%B8%B8%E6%88%8F-%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C/:1:2","tags":null,"title":"VR游戏| 作为术士，我要应付月中测验","uri":"/2023/vr%E6%B8%B8%E6%88%8F-%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C/"},{"categories":null,"content":"技术细节。 游戏采用 Unity 引擎进行开发。 美术资源， 包括模型， 贴图， 动画，粒子特效都是从 unity asset store 上购买的。 其中部分资源 经过了笔者的手动修改。 详细的技术细节 ","date":"2023-05-05","objectID":"/2023/vr%E6%B8%B8%E6%88%8F-%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C/:1:3","tags":null,"title":"VR游戏| 作为术士，我要应付月中测验","uri":"/2023/vr%E6%B8%B8%E6%88%8F-%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C/"},{"categories":null,"content":"未来规划 除了常规BUG修复， 还打算做一个新的DLC 。 ","date":"2023-05-05","objectID":"/2023/vr%E6%B8%B8%E6%88%8F-%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C/:1:4","tags":null,"title":"VR游戏| 作为术士，我要应付月中测验","uri":"/2023/vr%E6%B8%B8%E6%88%8F-%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C/"},{"categories":null,"content":"更新 2023年5月4日 发布 v1.0 版本到steam ","date":"2023-05-05","objectID":"/2023/vr%E6%B8%B8%E6%88%8F-%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C/:2:0","tags":null,"title":"VR游戏| 作为术士，我要应付月中测验","uri":"/2023/vr%E6%B8%B8%E6%88%8F-%E4%BD%9C%E4%B8%BA%E6%9C%AF%E5%A3%AB%E6%88%91%E8%A6%81%E5%BA%94%E4%BB%98%E6%9C%88%E4%B8%AD%E6%B5%8B%E9%AA%8C/"},{"categories":null,"content":"笔者有感而发， 并没做过验证，仅供参考 ","date":"2023-04-28","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%81%90%E6%83%A7%E5%92%8C%E5%B0%8F%E5%AD%A9%E5%AD%90%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/:0:0","tags":null,"title":"关于恐惧和小孩子的一些闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%81%90%E6%83%A7%E5%92%8C%E5%B0%8F%E5%AD%A9%E5%AD%90%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"主要内容 ","date":"2023-04-28","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%81%90%E6%83%A7%E5%92%8C%E5%B0%8F%E5%AD%A9%E5%AD%90%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/:1:0","tags":null,"title":"关于恐惧和小孩子的一些闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%81%90%E6%83%A7%E5%92%8C%E5%B0%8F%E5%AD%A9%E5%AD%90%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"身体上的体现 相由心生 相由心生是一个汉语词语，见于《尊婆须蜜菩萨所集论》《苏平仲文集》等若干古籍，一说意指内心所想影响对外在事物的看法，一说指人的外在相貌受内在心地或心境的影响。类似的词语如出自谚语的“相逐心生”等，还被解释为“其貌不扬的人，会因卓越的德才而赢得人的好感”。 释义来自百度百科。 笔者认为身体的一些表现是受到心理的影响的。 心含恐惧的主要身体特征可能是驼背， 含胸，圆肩等。 注意： 并不绝对 人的主动行为应该可以分为下面几类。 遗传性的， 即生来就会的。 学过的， 即看过的， 听过的。 思考出现的新行为。 这里的遗传性， 不是说由父母遗传的， 而是人类这种生物积累而来的。 包含父母的一部分， 但是更多的可能是更多的祖先所积累的。 学过的行为指重复别人的行动，外加一些小的改变。 在年龄较小的时候， 主动的主要行为基本上是 遗传性的和学过的。 驼背，含胸，圆肩的理论是这样的，由于恐惧而导致的身体寒冷的感觉， 导致小孩子 更喜欢蜷缩身体。 下面来解释一下。 身体寒冷 并不是真的感觉到了身体的寒冷， 而是内心上的一种感觉， 如果小孩子感觉到孤寂， 那么这种感觉会更加强烈。 蜷缩会使自己感觉更暖和一些，更舒服一些。 如果你在一个寒冷的天气， 衣服穿的不是很多的时候， 你的下意识行为是什么呢？ 如果小孩子是单独睡得， 则可以在适当的时候观察一下他的睡姿。 由于小孩子没有太多经验和知识， 这种行为大多是基于潜意识的， 即遗传性的主动行为。 另外一个理论是这样的， 这是一种示弱的表现， 表示臣服。 这个理论的动机是 趋利避害， 由于痛苦， 由于想要避免痛苦，而选择示弱， 想要激起对方的同情心。 但是， 这可能会招来一些不必要的欺凌 ","date":"2023-04-28","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%81%90%E6%83%A7%E5%92%8C%E5%B0%8F%E5%AD%A9%E5%AD%90%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/:1:1","tags":null,"title":"关于恐惧和小孩子的一些闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%81%90%E6%83%A7%E5%92%8C%E5%B0%8F%E5%AD%A9%E5%AD%90%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"情绪上的体现 小的时候 可能还好， 对父母有依赖，并不会表现太多。 但是 到了青少年， 以及慢慢有了生存之道的时候， 性情可能会发生一些改变。 可能会表现出暴怒， 一点就炸的情绪。 当出现了这个状况的时候， 可能就需要小心与孩子之间的感情。 如果作为父母的读者 想要修缮感情， 那么可能要吃很多刀子。。 如果吃得下这些刀子， 那么感情会得到缓解。 但是， 如果真的能吃得下的话，可能也不会发展到这个情况。。 预防胜于治疗， 越早的处理越简单， 越省事。 抑郁，强迫症 也是可能发生的， 并且会伴随孩子到成人阶段。 ","date":"2023-04-28","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%81%90%E6%83%A7%E5%92%8C%E5%B0%8F%E5%AD%A9%E5%AD%90%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/:1:2","tags":null,"title":"关于恐惧和小孩子的一些闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%81%90%E6%83%A7%E5%92%8C%E5%B0%8F%E5%AD%A9%E5%AD%90%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"其他 上述判断方法只是一个非常有限的参考。 如果是自己的小孩子， 反思自己做过什么， 可以更好的猜测孩子的当前心理状况。 建议不要走极端， 即对孩子过分的宠爱， 或者过分的教育。 之前看到有人这么说。 幸福的人用童年治愈一生，不幸的人用一生治愈童年。 如果不学习， 不改变的话，一生可能都会受到童年不幸经历的影响。 但是如果学习一些心理学上的知识， 原谅自己， 原谅父母，尝试改变， 那么可能会慢慢的就治愈好了童年。 原谅父母 并不等于要对他们怎么怎么样， 只是说， 不再对他们的过去行为产生怒气，恨意等负面情绪， 但是也不用对他们言听计从。 无论剩下的生命是长是短， 我们都可以向着想去的方向前进。 ","date":"2023-04-28","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%81%90%E6%83%A7%E5%92%8C%E5%B0%8F%E5%AD%A9%E5%AD%90%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/:2:0","tags":null,"title":"关于恐惧和小孩子的一些闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%81%90%E6%83%A7%E5%92%8C%E5%B0%8F%E5%AD%A9%E5%AD%90%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"如果你没有注册过 steam works， 那么在开始注册到可以售卖之间可能需要2个月的时间。 ","date":"2023-04-26","objectID":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/:0:0","tags":null,"title":"如何在steam上发行自己的游戏","uri":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/"},{"categories":null,"content":"主要内容 ","date":"2023-04-26","objectID":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/:1:0","tags":null,"title":"如何在steam上发行自己的游戏","uri":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/"},{"categories":null,"content":"注册账号 注册账号： https://partner.steamgames.com/ 如果你之前有 steam 账号， 那么可以直接登录， 只不过还是要填写一些信息。 根据提示填写就可以了， 不是很难。 个人游戏，公司名要填写自己本人的名字。因为之后银行卡的名字要和这个名字一模一样，所以不要乱写。必须是你的银行卡汇款的账号名。 ","date":"2023-04-26","objectID":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/:1:1","tags":null,"title":"如何在steam上发行自己的游戏","uri":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/"},{"categories":null,"content":"验证税务信息 点击 用户与权限 / 公司详细资料 可能需要补充一下 银行详情信息。 税务信息在最下面， 点击更改税务信息。 这时会跳到一个新的网站， 让你填写税务信息。 永久居住地址的地方 一定要填写身份证上的地址， 最好采用机翻的形式。 邮政编码也要正确填写， 联系地址直接保持一致就可以了 。 TIN 的地方 选择我有， 然后填写外国的 TIN， 具体数值就是身份证号码。 填写完成之后， 在提交的时候注意下，需要提供您在加入 Steamworks 流程中使用的帐户所链接的电子邮件地址。 提交完成之后， 税务验证信息 可能会变成验证通过， 但是这个是假的。 只是临时的验证通过， 一定要多注意自己的邮箱。 基本上在1天之内， 就会收到邮件结果， 可能会变成真正的验证通过， 也可能会要求补充信息。 下面是笔者收到的邮件。 Hello, At this time, we are unable to validate your Steam account. This is because the permanent and or mailing address you entered in the tax interview cannot be verified You must now provide us with proof of your address. Please provide one of the following documents, showing the same address as you have entered it in the tax interview: · Recent utility bill (if it shows your address) · Recent bank statement (if it shows your address) · Government ID Card (if it shows your address) · Tenant Lease (if it shows your address) · OR for a company / business you can provide a company registration certificate (if it shows your address) Please do not give us the address of your bank or utility company. Forward your documents as an attachment to this email. Your Steam account will not be validated until we can verify the address. Please note that Valve uses Lilaham, a third-party tax provider, to gather tax information. Important Notice: Information in this document does not constitute tax, legal, or other professional advice. If you have other questions, please contact your tax, legal, or other professional advisor. Best regards, XXXX | Valve 这里可以看到， 允许提供 Government ID Card 就是身份证照片， 笔者把身份证正反面拍照了之后提交上去了。 文字部分笔者是这么写 This is my China Government ID Card. Address part is [英文机翻地址，和提交的地址保持一致 （ 中文地址部分 ）。] Best wishes, [自己的名字] 笔者是英渣， 看着写就可以了。 在几个工作日之后， 笔者收到了 税务信息验证通过的邮件。 语气更好一些， 可能用的时间会短一些。 ","date":"2023-04-26","objectID":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/:1:2","tags":null,"title":"如何在steam上发行自己的游戏","uri":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/"},{"categories":null,"content":"支付费用 在 steam works 的主面板里， 有一栏是 支付Steam Direct 费 ， 没什么好说的， 点开之后付钱， 支持支付宝。 2023年4月26日看了一下价格是 638 。 受到汇率影响。 这个费用不能用 steam 钱包支付。 这个费用在销售金额到达1000刀的时候 可以退还好像。 ","date":"2023-04-26","objectID":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/:1:3","tags":null,"title":"如何在steam上发行自己的游戏","uri":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/"},{"categories":null,"content":"准备商店页面 付钱之后 就可以创建应用了。 创建应用之后， 就可以准备商店页面了。 在商店编辑页面底部有一段文字 Valve 保密 本页含有 Valve 的机密信息，设有访问限制。您必须与 Valve 签订涵盖机密信息条款的保密协议和/或许可协议，方能使用和访问本页面。 所以详情内容， 笔者就不透露了。 下面说一些注意事项 准备好之后就可以提交审核了， 商店页面和程序包是分开审核的 宣传片和宣传图相关 注意， 图片中不要包含 评分， 折扣等信息， 具体可以查看： https://partner.steamgames.com/doc/store/assets/rules https://partner.steamgames.com/doc/store/assets/standard https://partner.steamgames.com/doc/store/assets/libraryassets 关于此游戏的地方 可以多写写玩家可以做什么，有什么特性。 审核成功之后， 会有邮件通知。 ","date":"2023-04-26","objectID":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/:1:4","tags":null,"title":"如何在steam上发行自己的游戏","uri":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/"},{"categories":null,"content":"准备程序包 steam work 的设置页面 每个标签看过去， 带*的都写上就差不多了。 对了， 小于2GB的 压缩包可以通过 web界面上传， 但是注意， 压缩包要直接包含 可启动的exe程序。 比如， 设置的启动程序是： Sorcerer’s mid-month exam.exe 那么压缩包的内容可以是 MonoBleedingEdge Sorcerer’s mid-month exam_Data Sorcerer’s mid-month exam.exe UnityCrashHandler64.exe UnityPlayer.dll 但是不能是 Sorcerer’s mid-month exam\\MonoBleedingEdge Sorcerer’s mid-month exam\\Sorcerer’s mid-month exam_Data Sorcerer’s mid-month exam\\Sorcerer’s mid-month exam.exe 大于 2GB的程序 使用 sdk上传。 设置好， 上传完， 设置分支之后就可以提交审核了。 对了， 成人内容审查记得填写一下。 还有就是， 游戏内容要包含商店中 关于此游戏 列出的特性。 审核成功之后， 会有邮件通知。 ","date":"2023-04-26","objectID":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/:1:5","tags":null,"title":"如何在steam上发行自己的游戏","uri":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/"},{"categories":null,"content":"其他 只要交了钱， 在 steam 上发行游戏很简单， 但是困难的是 怎么卖出更多的游戏。 ","date":"2023-04-26","objectID":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/:2:0","tags":null,"title":"如何在steam上发行自己的游戏","uri":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/"},{"categories":null,"content":"steam 的unity 库 https://github.com/Facepunch/Facepunch.Steamworks https://steamworks.github.io/ 看情况使用一个就可以了。 ","date":"2023-04-26","objectID":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/:2:1","tags":null,"title":"如何在steam上发行自己的游戏","uri":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/"},{"categories":null,"content":"拓展阅读 https://indienova.com/u/%25E7%2596%25AF%25E7%258E%258B%25E5%25AD%2590/blogread/1388 https://zhuanlan.zhihu.com/p/482830658 ","date":"2023-04-26","objectID":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/:2:2","tags":null,"title":"如何在steam上发行自己的游戏","uri":"/periphery/%E5%A6%82%E4%BD%95%E5%9C%A8steam%E4%B8%8A%E5%8F%91%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F/"},{"categories":null,"content":"本篇试着说一说如何缓解因轻度焦虑而产生的睡眠质量问题。 本篇只讨论 睡眠过程中总是醒来的问题， 并不讨论 睡不着的问题。 如果睡不着的话， 可以试着看这篇博文： 入睡的新方式介绍 ","date":"2023-04-25","objectID":"/caprice/%E5%86%8D%E8%B0%88-%E7%84%A6%E8%99%91%E4%B8%8E%E7%9D%A1%E7%9C%A0/:0:0","tags":null,"title":"再谈 焦虑与睡眠","uri":"/caprice/%E5%86%8D%E8%B0%88-%E7%84%A6%E8%99%91%E4%B8%8E%E7%9D%A1%E7%9C%A0/"},{"categories":null,"content":"主要内容 ","date":"2023-04-25","objectID":"/caprice/%E5%86%8D%E8%B0%88-%E7%84%A6%E8%99%91%E4%B8%8E%E7%9D%A1%E7%9C%A0/:1:0","tags":null,"title":"再谈 焦虑与睡眠","uri":"/caprice/%E5%86%8D%E8%B0%88-%E7%84%A6%E8%99%91%E4%B8%8E%E7%9D%A1%E7%9C%A0/"},{"categories":null,"content":"理论部分 笔者的理论是这样的。 因为太在意某件事而无法在睡眠的时候放松，从而会导致睡眠质量出现问题。 白天的行为会对夜间的睡眠产生一定的影响。 再次声明， 本方法只对 轻度焦虑患者 产生一些作用。 不用信教， 也不用吃什么东西， 主要方法是进行深呼吸。 人在进行思维活动的时候， 大脑应该处于一个比较活跃的状态。 而在睡眠的时候， 则希望大脑处于比较平静的状态。 所以， 这里笔者提出的方法就是： 点刹。 让大脑从高速运动向着平静的方向前进一些。 ","date":"2023-04-25","objectID":"/caprice/%E5%86%8D%E8%B0%88-%E7%84%A6%E8%99%91%E4%B8%8E%E7%9D%A1%E7%9C%A0/:1:1","tags":null,"title":"再谈 焦虑与睡眠","uri":"/caprice/%E5%86%8D%E8%B0%88-%E7%84%A6%E8%99%91%E4%B8%8E%E7%9D%A1%E7%9C%A0/"},{"categories":null,"content":"实际操作 睡前留出 20 ~ 60 分钟的时间。 其实也不必要非得留出来时间， 平常时间上床也是OK的。 上床之后， 可以拿一个有腿有手的毛绒玩具 当做计数器。 如果拿其他的东西也是一样的， 不过笔者觉得拿着毛绒玩具更舒服一些。 躺好， 开始深呼吸， 尝试 长长的深呼吸， 每次呼吸之后， 就进行计数。 十次之后，用手抓住一只手，或者一只腿。 总计 10轮， 即 10 * 10 = 100 次深呼吸。 至于到底怎么使用计数器， 看个人喜好就可以了。 在深呼吸的时候， 大脑可能会停不下来， 还是在考虑那件令你焦虑的事情。 不要怕， 如果思维被带偏了， 就主动带回来就可以了。 并且， 告诉自己， 待会有时间可以考虑。 10轮之后， 就到达了放松时间， 这个时候， 大脑焦虑哪些事情， 就可以进行思考了， 其实，这个时候 无论想什么事情都是OK的。 等想了一些事情之后， 再次开始 10轮深呼吸。 如此反复3~4次， 就可以尝试睡觉了。 在过程中， 也不是一定不要睡着， 只是笔者觉得 如果轮次不太够的话， 可能睡眠质量的改善不是特别大。 ","date":"2023-04-25","objectID":"/caprice/%E5%86%8D%E8%B0%88-%E7%84%A6%E8%99%91%E4%B8%8E%E7%9D%A1%E7%9C%A0/:1:2","tags":null,"title":"再谈 焦虑与睡眠","uri":"/caprice/%E5%86%8D%E8%B0%88-%E7%84%A6%E8%99%91%E4%B8%8E%E7%9D%A1%E7%9C%A0/"},{"categories":null,"content":"放松的方式 如果白天可以适当的放松，那么对晚上的睡眠也有很大的帮助。 笔者认为， 放松最简单，最直接，最有效的方式是 发呆， 冥想。 但是，这俩都很无聊，而且容易被打断。 源自身体的欲望也是一种方式。 但是这种方式对身体可能会产生一些副作用， 需要谨慎使用， 并且不能极端。 所谓不能极端， 就是说要站在中间的位置， 不能禁止， 也不能过度。 身体欲望大致有下面几个 吃的 喝的 性 按摩之类的， 肌肉的放松也会对内心的放松产生帮助。 阅读，深呼吸也算放松的方式。 至于阅读小说， 笔者自身的经历来看， 有时候可用， 有时候不行， 还没找到原因。 如果进行阅读的话， 阅读一些非小说类的书籍和文章 可能效果更好。 原因如下 小说会让人想要继续看下去 如果一本小说，让人不想看下去，那99%说明那本小说很烂。 疲劳状态下， 人的自控力会极大的减小。 阅读也是需要精力的，如果不能及时的停下来， 就容易变得非常过劳。 如果看其他类的书籍，那么在想停的时候， 就比较容易停下来。 看某类需要聚精会神的书籍 效果更好， 不过 不能看多。 需要谨防过劳，以及更加过劳。 运动也是一个非常不错的放松方式， 和朋友一起运动的话， 效果更好。 自己一个人的话， 跑步很好。 对了， 睡前不要剧烈运动。 除此之外， 还有娱乐这种方式，只是， 如果处于过度疲劳的话， 娱乐并不是什么好办法。 每个人都有自己的娱乐方式， 这里笔者就不多说了。 还有就是下面的方式， 也可以考虑一下。 旅游 唱歌 ","date":"2023-04-25","objectID":"/caprice/%E5%86%8D%E8%B0%88-%E7%84%A6%E8%99%91%E4%B8%8E%E7%9D%A1%E7%9C%A0/:1:3","tags":null,"title":"再谈 焦虑与睡眠","uri":"/caprice/%E5%86%8D%E8%B0%88-%E7%84%A6%E8%99%91%E4%B8%8E%E7%9D%A1%E7%9C%A0/"},{"categories":null,"content":"其他 焦虑之后， 如果睡眠不好， 往往会导致下面的情况。 过度疲劳 恶性循环 偏头痛 如果出现了过度疲劳， 本方法有一定的缓解作用， 但是不可以预期有很好的效果。 如果不怎么焦虑了， 但是过劳的话， 似乎也会睡不好。 其实， 笔者觉得焦虑还好， 因为特别重视一件事情， 而想要全身心的都关注那件事情， 也是一种常规性的正常反应。 只是， 有时候， 焦虑不能帮助事情的发展，而且还会伤害自身。 重要的还是 事情的发展， 其实完全没有必要焦虑， 用心努力就可以了。 如果焦虑的是自己的事情， 那么就去用力推动事情的发展。 如果焦虑的是别人的事情， 比如自己的亲人怎么怎么了， 那么就多做一些可以影响结果的事情。 对了， 似乎一般焦虑的人， 他们的绝大部分注意力总是放在自己的脑袋里， 对外界的感知总是很少。 这个时候， 如果能加大对外界的感知， 减少对自己内心，头脑的感知， 可能也是有所帮助的。 如果你在闲暇的时候不停的计划明天的事情， 那么劝你最好放下。 计划要做， 但是不要天天，时时刻刻的做。 定期计划一下， 更新一下计划就可以了。 ","date":"2023-04-25","objectID":"/caprice/%E5%86%8D%E8%B0%88-%E7%84%A6%E8%99%91%E4%B8%8E%E7%9D%A1%E7%9C%A0/:1:4","tags":null,"title":"再谈 焦虑与睡眠","uri":"/caprice/%E5%86%8D%E8%B0%88-%E7%84%A6%E8%99%91%E4%B8%8E%E7%9D%A1%E7%9C%A0/"},{"categories":null,"content":"拓展阅读 关于失眠治疗的一些建议 入睡的新方式介绍 ","date":"2023-04-25","objectID":"/caprice/%E5%86%8D%E8%B0%88-%E7%84%A6%E8%99%91%E4%B8%8E%E7%9D%A1%E7%9C%A0/:2:0","tags":null,"title":"再谈 焦虑与睡眠","uri":"/caprice/%E5%86%8D%E8%B0%88-%E7%84%A6%E8%99%91%E4%B8%8E%E7%9D%A1%E7%9C%A0/"},{"categories":null,"content":"插件这东西并不是越多越好， 还是符合自己的需求最好。 🈚 免费 🈶 要钱 📖 开源 ","date":"2023-02-26","objectID":"/periphery/unity-asset-store%E7%9A%84%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/:0:0","tags":null,"title":"Unity Asset Store 一些插件的介绍","uri":"/periphery/unity-asset-store%E7%9A%84%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/"},{"categories":null,"content":"主要内容 ","date":"2023-02-26","objectID":"/periphery/unity-asset-store%E7%9A%84%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/:1:0","tags":null,"title":"Unity Asset Store 一些插件的介绍","uri":"/periphery/unity-asset-store%E7%9A%84%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/"},{"categories":null,"content":"代码工具类 日志插件： 🈚📖 Unity File Debug 简介： 这个插件可以记录 console log 到文件里面， 文件类型可以是 csv, json, txt 。 插件提供一个 DebugWrapper的类，所以使用的时候 不需要修改旧的代码。 就是这个类缺了函数LogWarningFormat 自己手动添加一下即可。 此外，插件还提供一个日志查看使用的html文件， 图示就是那个html 文件。 如果是开发手游的话， 在调试的时候就可以把生成的日志文件复制到电脑里面， 然后用这个html 文件进行查看。 使用方法： 安装插件之后， 拖拽一个 Prefab 到场景里面， 设置一下输出日志的文件名就可以了。 日志的默认输出目录是 Application.persistentDataPath 工具： 🈚📖 UniRx - Reactive Extensions for Unity 简介： 这个应该是一个unity的响应式拓展， 下面放出一些 作者在Github 上的示例 。 var clickStream = Observable.EveryUpdate() .Where(_ =\u003e Input.GetMouseButtonDown(0)); clickStream.Buffer(clickStream.Throttle(TimeSpan.FromMilliseconds(250))) .Where(xs =\u003e xs.Count \u003e= 2) .Subscribe(xs =\u003e Debug.Log(\"DoubleClick Detected! Count:\" + xs.Count)); // Another example public static IObservable\u003cfloat\u003e ToObservable(this UnityEngine.AsyncOperation asyncOperation) { if (asyncOperation == null) throw new ArgumentNullException(\"asyncOperation\"); return Observable.FromCoroutine\u003cfloat\u003e((observer, cancellationToken) =\u003e RunAsyncOperation(asyncOperation, observer, cancellationToken)); } static IEnumerator RunAsyncOperation(UnityEngine.AsyncOperation asyncOperation, IObserver\u003cfloat\u003e observer, CancellationToken cancellationToken) { while (!asyncOperation.isDone \u0026\u0026 !cancellationToken.IsCancellationRequested) { observer.OnNext(asyncOperation.progress); yield return null; } if (!cancellationToken.IsCancellationRequested) { observer.OnNext(asyncOperation.progress); // push 100% observer.OnCompleted(); } } // usecase Application.LoadLevelAsync(\"testscene\") .ToObservable() .Do(x =\u003e Debug.Log(x)) // output progress .Last() // last sequence is load completed .Subscribe(); // MessageBroker is Rx based in-memory pubsub system filtered by type. public class TestArgs { public int Value { get; set; } } --- // Subscribe message on global-scope. MessageBroker.Default.Receive\u003cTestArgs\u003e().Subscribe(x =\u003e UnityEngine.Debug.Log(x)); // Publish message MessageBroker.Default.Publish(new TestArgs { Value = 1000 }); 笔者用的比较简单， 主要用于同步事件。 工具： 🈚📖 Query for Unity 简介： 代码工具。 Github Cheat Sheet 节点编辑器基础： 🈚📖 xNode 简介： 这个也是可视化编辑工具。 从Github 上获取不要钱， 但是从 asset store 上获取则需要10刀。 xNode is a very powerful and intuitive node editor framework ideal for coding your own dialogue systems, state machines, procedural generation, behaviour trees etc. 笔者使用这个工具来做 行为树。 笔者使用的是老版本， 当节点到达 500+ 的时候， 编辑节点就会感觉到卡顿， 不知道最新版有没有变化。 代替品考虑： https://github.com/alelievr/NodeGraphProcessor 笔者暂时没有使用过 Inspector工具： 🈚📖 NaughtyAttributes public class NaughtyComponent : MonoBehaviour { [Button] private void MethodOne() { } [Button(\"Button Text\")] private void MethodTwo() { } } 简介： NaughtyAttributes is an extension for the Unity Inspector. 给组件添加一些注解之后， Inspector 上的渲染方式会发生改变。 json \u0026\u0026 bson: 🈚 JSON .NET For Unity 简介： JSON .NET brings the power of Json and Bson serialization to Unity with support for 4.7.2 and up and is compatible with both .NET and IL2CPP backends. 这个好像是 Newtonsoft.Json 没什么好说的， 就是json 和bson 的序列化和反序列化工具。 ","date":"2023-02-26","objectID":"/periphery/unity-asset-store%E7%9A%84%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/:1:1","tags":null,"title":"Unity Asset Store 一些插件的介绍","uri":"/periphery/unity-asset-store%E7%9A%84%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/"},{"categories":null,"content":"3D 模型相关 动画编辑工具： 🈶 UMotion Pro - Animation Editor 原价： $77 存在一个免费的 社区版本 UMotion Community - Animation Editor 简介： 可以在unity 里面查看，编辑， 创建 动画AnimationClip的一个工具。 也许在 blender里面修改 更简单，而且还不要钱？ 笔者不会blender 所以不太清楚。。 过渡动画工具： 🈶 DOTween Pro 原价： $16.50 存在一个免费的 社区版本 https://assetstore.unity.com/packages/tools/animation/dotween-hotween-v2-27676 简介： 动画过渡工具。 在线文档： http://dotween.demigiant.com/documentation.php 位置过渡动画 旋转过渡动画 值过渡 每个过渡还有一些事件可以使用 onKill onComplete … ","date":"2023-02-26","objectID":"/periphery/unity-asset-store%E7%9A%84%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/:1:2","tags":null,"title":"Unity Asset Store 一些插件的介绍","uri":"/periphery/unity-asset-store%E7%9A%84%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/"},{"categories":null,"content":"待验证 低模可动城市人口 https://assetstore.unity.com/packages/3d/characters/humanoids/humans/simple-modular-human-100162 低模城市 带有夜景 https://assetstore.unity.com/packages/3d/environments/urban/city-package-107224 2d ui 图标 https://assetstore.unity.com/packages/2d/gui/icons/2d-casual-ui-hd-82080 低模环境包 https://assetstore.unity.com/packages/3d/environments/landscapes/lowpoly-environment-pack-99479 3d ui 菜单 https://assetstore.unity.com/packages/tools/gui/3d-modern-menu-ui-116144 音效已经bgm管理 https://assetstore.unity.com/packages/tools/audio/fmod-for-unity-161631 免费shader https://assetstore.unity.com/packages/vfx/shaders/ultimate-10-shaders-168611 ","date":"2023-02-26","objectID":"/periphery/unity-asset-store%E7%9A%84%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/:2:0","tags":null,"title":"Unity Asset Store 一些插件的介绍","uri":"/periphery/unity-asset-store%E7%9A%84%E6%8F%92%E4%BB%B6%E5%88%86%E7%B1%BB/"},{"categories":null,"content":"主要内容 思考一些和自己没有关系但是让自己感觉舒服的事情。 换句话说： 到了做梦的时间了！ 🥳🥳🥳 尽量不要思考下面的内容： 有关自己的未来的事情 未做完的事情 XXX 难题 一般来说， 人都会有一些憧憬， 这个时候可以想象另外一个人已经完成了这些憧憬。 无论憧憬是什么，都可以这么想象， 只要在想象的时候感觉自己很舒服。 可以想想他完成之后会做些什么， 完成之前会做些什么。 笔者比较喜欢异世界之旅。 建议想象的内容和自己的生活完全剥离开， 一点重复都没有最好。 如果想着想着又绕回自己的事情了， 那就重新开始， 或者接着上次想的内容就好了。 性幻想之类的并不建议， 这个会更加的睡不着！ 这个只对入睡有一些效果， 对睡眠质量并没有太大的提升。 如果半夜醒来了， 睡不着了，可以接着使用这个方式继续入睡。 ","date":"2023-02-26","objectID":"/caprice/%E5%85%A5%E7%9D%A1%E7%9A%84%E6%96%B0%E6%96%B9%E5%BC%8F%E4%BB%8B%E7%BB%8D/:1:0","tags":null,"title":"入睡的新方式介绍","uri":"/caprice/%E5%85%A5%E7%9D%A1%E7%9A%84%E6%96%B0%E6%96%B9%E5%BC%8F%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"拓展阅读 关于失眠治疗的一些建议 ","date":"2023-02-26","objectID":"/caprice/%E5%85%A5%E7%9D%A1%E7%9A%84%E6%96%B0%E6%96%B9%E5%BC%8F%E4%BB%8B%E7%BB%8D/:2:0","tags":null,"title":"入睡的新方式介绍","uri":"/caprice/%E5%85%A5%E7%9D%A1%E7%9A%84%E6%96%B0%E6%96%B9%E5%BC%8F%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"主要内容 ","date":"2023-02-26","objectID":"/program/cpp%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E9%95%BF%E5%BA%A6%E5%92%8C%E8%BE%93%E5%87%BA%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%B0%E5%BD%95/:1:0","tags":null,"title":"Cpp中字符串的长度和输出的字符串长度不一致的问题的记录","uri":"/program/cpp%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E9%95%BF%E5%BA%A6%E5%92%8C%E8%BE%93%E5%87%BA%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"现象 先来看一段日志 [..t/sight/sight_js.cpp:996 (parseGraph)] finalSource = \"varName = 23.5 + -69.5;\" (std::string) [..t/sight/sight_js.cpp:996 (parseGraph)] finalSource.length() = 80 (unsigned long) [..t/sight/sight_js.cpp:996 (parseGraph)] finalSource.size() = 80 (unsigned long) [..t/sight/sight_js.cpp:997 (parseGraph)] finalSource.data() = varName (char*) [..t/sight/sight_js.cpp:998 (parseGraph)] finalSource.c_str() = \"varName\" (const char*) varName varName = 23.5 + -69.5; 前面三行可以看到字符串 finalSource 的长度是80， 但是内容只打印出 varName = 23.5 + -69.5; 这些是23个字符，与输出的长度并不一致。 经过调试之后， 我发现是因为字符串里面存在大量的0, 这些0在打印的时候 什么也不会输出。 [..t/sight/sight_js.cpp:996 (parseGraph)] finalSource.length() = 80 (unsigned long) [..t/sight/sight_js.cpp:996 (parseGraph)] finalSource.size() = 80 (unsigned long) [..t/sight/sight_js.cpp:997 (parseGraph)] finalSource.data() = varName (char*) [..t/sight/sight_js.cpp:998 (parseGraph)] finalSource.c_str() = \"varName\" (const char*) varName 11897114789710910100000000000000000000000000000000000000000000000000000000032613250514653324332455457465359 第一段日志的最后一行是使用 %c 打印出来的， 上一段日志的最后一行是使用%d 打印出来的。 经过查询得知， 0 对应的 字符描述是 Null character from https://www.ascii-code.com/ 所以在打印的时候 什么都没有显示出来应该也是正常的。 打印使用的代码如下： printf(\"%s\\n\", finalSource.c_str()); for (const auto \u0026item : finalSource) { printf(\"%d\",item); } ","date":"2023-02-26","objectID":"/program/cpp%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E9%95%BF%E5%BA%A6%E5%92%8C%E8%BE%93%E5%87%BA%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%B0%E5%BD%95/:1:1","tags":null,"title":"Cpp中字符串的长度和输出的字符串长度不一致的问题的记录","uri":"/program/cpp%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E9%95%BF%E5%BA%A6%E5%92%8C%E8%BE%93%E5%87%BA%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"问题原因 这些字符串是使用 v8pp 注入cpp 字符串到js里面产生的。 当注入字符串类型是 char[] 的时候， 它会把全部的内容都注入到js 里面。 v8pp 的函数是这样的： template\u003csize_t N\u003e v8::Local\u003cv8::String\u003e to_v8(v8::Isolate* isolate, char const (\u0026str)[N], size_t len = N - 1) { return convert\u003cstring_view\u003e::to_v8(isolate, string_view(str, len)); } 作者使用了模板函数获取字符串数组的长度， 然后把所有内容都注入进去了。 解决方法如下： char tmp[1024] = {0}; sprintf(tmp, \"abcd\"); v8pp::to_v8(isolate, tmp); // 这有问题 v8pp::to_v8(isolate, (const char*) tmp); // 这样就可以了。 作者的解释可以看这里： https://github.com/pmed/v8pp/issues/174#issuecomment-921982794 作者这样的设计的目的可能是允许其他人注入二进制数据到js里面。 ","date":"2023-02-26","objectID":"/program/cpp%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E9%95%BF%E5%BA%A6%E5%92%8C%E8%BE%93%E5%87%BA%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%B0%E5%BD%95/:1:2","tags":null,"title":"Cpp中字符串的长度和输出的字符串长度不一致的问题的记录","uri":"/program/cpp%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E9%95%BF%E5%BA%A6%E5%92%8C%E8%BE%93%E5%87%BA%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"其他 编译时的字符串拼接 test(\"hello,\" \"world!\" ) ","date":"2023-02-26","objectID":"/program/cpp%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E9%95%BF%E5%BA%A6%E5%92%8C%E8%BE%93%E5%87%BA%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%B0%E5%BD%95/:1:3","tags":null,"title":"Cpp中字符串的长度和输出的字符串长度不一致的问题的记录","uri":"/program/cpp%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E9%95%BF%E5%BA%A6%E5%92%8C%E8%BE%93%E5%87%BA%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"是windows 下碰到的问题。 提示错误是： vscode The .NET Core SDK cannot be located: A valid dotnet installation could not be found vs code 里面已经设置了正确的 dotnetPath 和 sdkPath ， 但是还是提示这个。 使用 cmd.exe 里面输入 dotnet --version 是看得到输出信息的。 参考的设置内容是： { \"omnisharp.dotnetPath\": \"C:\\\\Program Files\\\\dotnet\", \"omnisharp.sdkPath\": \"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\7.0.102\" } 解决方法。 关掉vs code ， 重新打开就好了。 但是如果使用的是 unity 双击脚本打开的， 则需要重新启动 unity. 也可以考虑不关闭unity, 手动关闭vs code 然后从开始菜单或者桌面图标打开 vs code。 如果只安装了 .net core， 在加载项目的时候 可能会提示 .net runtime 找不到。 这个时候根据提示的地址下载 .net 开发人员工具包就可以了。 具体错误可以看 vs code 里面的 output 的 OmniSharp Log 一栏 。 这里的日志应该还会提示 .net 开发人员工具包的版本， 安装提示的版本可能更好一些。 ","date":"2023-01-21","objectID":"/periphery/vscode-.net-sdk-%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98-%E8%AE%B0%E5%BD%95/:0:0","tags":null,"title":"Vscode .Net Sdk 找不到的问题 记录","uri":"/periphery/vscode-.net-sdk-%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98-%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"主要内容 ","date":"2023-01-08","objectID":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:0","tags":null,"title":"Unity 相关的几个小问题记录","uri":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"动画播放结束会模型会卡住一段时间的问题 动画播放是使用 Animator Controller 实现的， 笔者碰到的问题是在一个受击动画播放结束之后，没有马上切换到 Idle 状态， 而是会在受击状态结束后卡住一会才会切换。 因为是受击动画，所以笔者没有使用条件，而是使用了 Has Exit Time 经过一段时间的查找， 笔者发现原因是： 当动画的 Exit Time 比实际的动画要更长的时候， 就会出现这个问题。 解决方法是： 找到受击状态与 Idle 状态的过渡线， 点开Settings ， 里面有个 Exit Time ,改小一些就可以了。 ","date":"2023-01-08","objectID":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:1","tags":null,"title":"Unity 相关的几个小问题记录","uri":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"使用代码修改粒子特效的属性 // item.emission.enabled = false; // Cannot modify the return value of 'ParticleSystem.emission' because it is not a variable [Assembly-CSharp] // item.enableEmission = false; // 'ParticleSystem.enableEmission' is obsolete: 'enableEmission property is deprecated. Use emission.enabled instead.' [Assembly-CSharp] // item: ParticleSystem var e = item.emission; e.enabled = false; 上面两种方式一种会产生报错， 一种会产生警告， 使用最后那种方式修改就好了。 修改其他属性的时候， 也可以使用类似的方式， 比如 item.main 等。 ","date":"2023-01-08","objectID":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:2","tags":null,"title":"Unity 相关的几个小问题记录","uri":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"transform.position 获取的位置和看到的位置不一样的问题记录。 主要是 y 轴不一样， x,z 轴实际和看到的是一样的。 因为 怪物身上同时具有 rigidbody 和 NavMeshAgent 两个组件。 NavMeshAgent 会把怪物强制到地形上面， 而 rigidbody 添加重力的时候会让怪物不断下沉。 将 NavMeshAgent 禁用掉， 就可以看到怪物实际的位置了。 主要触发原因可能是 怪物的初始 y 轴的值 略微低于地面。 当这种情况下，把怪物的 y轴 调到地形上面就可以了。 或者更好的处理 两者的关系。 使用 NavMeshAgent 的时候就设置 Rigidbody.isKinematic = true. 使用 Rigidbody 的时候就设置， NavMeshAgent.enable = false. ","date":"2023-01-08","objectID":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:3","tags":null,"title":"Unity 相关的几个小问题记录","uri":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"更改 Asset store 的下载目录 windows 操作系统下的方法， 其实各个系统都可以使用软链接来做。 windows 下的默认目录是： c:/Users/[用户名]/AppData/Roaming/Unity 先将这个目录移动到别的位置， 比如： D:\\RoamingUnity 随后执行下面的命令 建立一个软链接就可以了。 cd c:/Users/[用户名]/AppData/Roaming mklink /d Unity D:\\RoamingUnity ","date":"2023-01-08","objectID":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:4","tags":null,"title":"Unity 相关的几个小问题记录","uri":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"layer 和 layer mask 的一点内容 layer 和 layer mask 是两个东西， gameobject.layer 使用的是layer， 发射射线使用的是 layer mask。 基本上来说， layer 是一个整形数字 具体值好像是 0 ～ 31 。 而 layer mask 是移位 移出来的。 layer mask = 1 \u003c\u003c layer layer 是唯一的， 只能表示一个， 但是 layer mask 可以同时表示多个layer 该位为1,即表示包含。 可以使用的 api 有： var layer = LayerMask.NameToLayer(\"Entity\"); var layerMask = LayerMask.GetMask(\"Entity\"); Debug.Log(layer); Debug.Log(layerMask); 参考阅读： https://docs.unity3d.com/Manual/layers-and-layermasks.html ","date":"2023-01-08","objectID":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:5","tags":null,"title":"Unity 相关的几个小问题记录","uri":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"动画过渡相关的一点内容 动画过渡的 settings 里面的 exit time 是比例(normalized time)， 不是秒 duration 可以设置是 秒还是 比例。 ","date":"2023-01-08","objectID":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:6","tags":null,"title":"Unity 相关的几个小问题记录","uri":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"NavMesh和 NavMeshAgent 相关的一点内容 NavMesh.GetAreaFromName 返回的结果是 0 ~ 31 要设置给agent的时候使用 navMeshAgent.areaMask = 1 \u003c\u003c NavMesh.GetAreaFromName(\"Walkable\"); 默认情况下，agent type 只有 Humanoid 可用。 如果设置了其他类型 就会无法寻路。 想要使用其他的agent type可以参考下面的链接 https://answers.unity.com/questions/1358023/nav-mesh-agent-type.html https://github.com/Unity-Technologies/NavMeshComponents 似乎以Mask结尾的东西都是移位之后的数值。 笔者在自己测试的时候发现，修改NavMeshAgent的 radius,height 属性之后 似乎没有什么作用。具体原因笔者没有深究。 ","date":"2023-01-08","objectID":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:7","tags":null,"title":"Unity 相关的几个小问题记录","uri":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"Unity Message unity 的消息函数， 如： OnCollisionEnter Awake Start Update 都是使用反射的方式调用的。 如果在设计类结构的时候使用了继承机制， 那么就要小心这些消息函数的访问修饰符。 如果在代码里都是使用的private 修饰符的话， 比如像下面的代码。 private void OnCollisionEnter(Collision other) { // 检测是否是碰到了玩家 Log(\"OnCollisionEnter\"); } 如果子类也实现了这个函数的话， 那么基类的函数就不会得到调用。 可能会产生一些不太好寻找的BUG。 并且， 在VS Code 里面的话， 也不会得到一丝提示。 如果去掉访问修饰符， 或者使用 protected public 的话， 在 VS Code 里面就可以看到一个警告。 如果使用修饰符 protected 或者 public 的话， 在 VS Code 里面就可以看到一个警告。 拓展阅读： https://forum.unity.com/threads/monobehaviour-inheritance-and-awake-start-onenable-etc.303834/#post-1985265 ","date":"2023-01-08","objectID":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:8","tags":null,"title":"Unity 相关的几个小问题记录","uri":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"动画预览 打开Animator 窗口之后， 点击一个Transition 之后， 可以在右下角看到一个preview 界面， 这个是预览动画。 预览界面的底部中间有一行字，这行字的前半部分是 0:00 ， 这个是表示的是帧数还是时间， 笔者还没有搞清楚。 但是笔者知道， 前面一个0 是秒数， 后面一个则是 0 ~ 59 之间的数值。 即 0:58, 0:59, 1:00 这样的。 如果需要手动填写动画时间的时候， 需要注意一个差别， 1秒 等于 1000 毫秒， 即 预览里看到的是 0:30 的时候， 时间上应该填写 0.5s 不过， 笔者发现 手动填写动画时间 并不靠谱，更应该考虑动画事件， 这样在时间上更精确一些。 只是动画事件的回调，在 transition的过程中也会调用， 这是一个问题。 ","date":"2023-01-08","objectID":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:9","tags":null,"title":"Unity 相关的几个小问题记录","uri":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"地形与树木 首先说说树木的碰撞体吧。 给树木的prefab 添加碰撞体之后， 需要在地形的 TerrainCollider 组件上 勾选 EnableTreeColliders 属性， 这样树木的碰撞体就生效了。 默认情况下， EnableTreeColliders 属性是开启的。 所以只需要给树木的prefab 添加碰撞体就可以了。 如果把树木当成普通的prefab 使用， 那么就不需要这个。 现在来说一下 树木的 layer。 使用上面的方式添加碰撞体之后， 树木的碰撞体和layer 将会与地形混合在一起。 即当你与树木的碰撞体碰撞之后， 你获取到的GameObject 是TerrainCollider 所挂载的GameObject。 GameObject name, collider, GameObject layer, 都是地形碰撞体的。 在地形编辑器里面有一个属性叫做 PreserveTreePrototypeLayers ，勾选它， 似乎就可以获取到 树木的layer 。 但是 笔者在测试后发现， 这个属性没用。 似乎有些版本有效， 有些没用。 笔者目前测试的版本是 Unity 2019.4.21f1 有一些其他版本的用户也说了这个问题 https://forum.unity.com/threads/cannot-get-layer-id-of-terrain-tree-prefab-bug.986496/ https://forum.unity.com/threads/preservetreeprototypelayers-broken.1406575/ https://forum.unity.com/threads/trigger-sound-on-terrain-tree-collider.1050500/ 上面的链接中 有一个人提出了一个曲线救国的方法， 使用碰撞位置和地形高度进行比较， 笔者没有尝试， 感觉使用起来比较麻烦，而且不知道会不会有性能问题。 然后是树木和风 添加一个 WindZone 可以给树木施加风的效果。 但是， 并不是所有的树木都是可以的， 需要使用地形工具的Paint Tree 画出来的树木才可以。 并且在Edit Tree 中需要把 Bend Factor 属性的值修改成大于0的值。 如果Edit Tree 中没有这个属性， 则说明该树木不支持 Wind 的效果。 如果你是购买了一个树木资源包， 那么， 那个资源包可能会包含一个 Wind_prefab 之类的东西。 具体情况可以去询问资源包的作者。 吐槽一下 经过简单的测试， 笔者感觉 wind 的效果并不怎么样- - WindZone 如果设置成 Directional ， 那么将影响整个场景， 想设置一个范围都不行- - ","date":"2023-01-08","objectID":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:10","tags":null,"title":"Unity 相关的几个小问题记录","uri":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"trigger collider 的回调函数 protected virtual void OnTriggerEnter(Collider other) { } protected virtual void OnTriggerExit(Collider other) { } 当一个碰撞体 触发了 OnTriggerEnter 回调的时候， 你不能预期它的 OnTriggerExit 回调一定会执行。 如果当前的 GameObject 被禁用了的话， OnTriggerExit 就永远不会被调用了。 这里有一个脚本提供了可靠性的调用保证： https://forum.unity.com/threads/fix-ontriggerexit-will-now-be-called-for-disabled-gameobjects-colliders.657205/ // OnTriggerExit is not called if the triggering object is destroyed, set inactive, or if the collider is disabled. This script fixes that 但是笔者并没有使用这个脚本， 而是选择了 OnTriggerStay 函数。 ","date":"2023-01-08","objectID":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:11","tags":null,"title":"Unity 相关的几个小问题记录","uri":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"UNITY 回调函数的执行顺序 官方文档地址： https://docs.unity3d.com/Manual/ExecutionOrder.html Awake 和 OnEnable 最先执行， 之后是 Reset ， 但是Reset 只在编辑器里面会调用， 在添加组件的时候。 然后是 Start 函数， 然后是 物理部分。 物理部分 一帧可能会调用多次， 当 fixed time step 小于帧的 update time 的时候。 物理部分 先是 FixedUpdate ，最后是 OnTriggerXXX 和 OnCollisionXXX。 OnTriggerXXX 要先于 OnCollisionXXX 调用。 Update 要在物理和 输入事件部分之后调用, 之后是 Coroutine 相关的部分。 LateUpdate 在 GameLogic 的最后一部分执行，但是之后还有渲染和其他一些内容。 OnDisable 和 OnDestroy 是在最后的最后执行的。 ","date":"2023-01-08","objectID":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:12","tags":null,"title":"Unity 相关的几个小问题记录","uri":"/program/unity-%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"解决办法 让ssh客户端强制使用密码登录就可以了。 ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no example.com 前置情况描述 笔者的 gogs 是直接安装在机器上的， 没有使用 docker 等容器服务。 所以 gogs 会使用系统的 sshd 服务。 当客户机的ssh key 添加到了 gogs 的管理面板之后， 客户端就无法使用密钥登录到系统的 ssh 服务。 不提供上面的参数的时候， 会自动使用密钥方式登录。 每次登录的时候都被 gogs 拦截， 然后会提示你 gogs 不提供 ssh shell。 此时就可以使用上面提示的， 使用密码进行登录。 备选方法 仅在 mac 下测试过。 在客户机的 hosts 文件里面添加两个域名解析到服务器上， 或者添加到自己的私有 DNS 服务器上。 比如 gogs.m1.link 和m1.link 。 在客户机上生成两个 ssh 密钥对 ， 一个用于 gogs， 一个用于登录机器。 添加新建 或者修改 文件 ~/.ssh/config 内容如下： Host gogs.m1.link AddKeysToAgent yes UseKeychain yes IdentitiesOnly yes IdentityFile ~/.ssh/id_ed25519 Host m1.link AddKeysToAgent yes UseKeychain yes IdentitiesOnly yes IdentityFile ~/.ssh/ssh_login_ed25519 Host github.com AddKeysToAgent yes UseKeychain yes User git IdentitiesOnly yes IdentityFile ~/.ssh/id_ed25519 就是使用这种方式的时候， 如果 git 仓库的地址是 ssh:// 的形式， 一定要使用gogs.m1.link 这个 域名， 或者会无法操作仓库。 ","date":"2022-12-28","objectID":"/periphery/gogs-%E6%B7%BB%E5%8A%A0ssh-key-%E4%B9%8B%E5%90%8E%E4%BD%BF%E7%94%A8%E5%B8%B8%E8%A7%84%E6%96%B9%E5%BC%8F%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95-ssh%E7%BB%88%E7%AB%AF/:0:0","tags":null,"title":"Gogs 添加ssh Key 之后 无法登录到 系统Ssh终端","uri":"/periphery/gogs-%E6%B7%BB%E5%8A%A0ssh-key-%E4%B9%8B%E5%90%8E%E4%BD%BF%E7%94%A8%E5%B8%B8%E8%A7%84%E6%96%B9%E5%BC%8F%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95-ssh%E7%BB%88%E7%AB%AF/"},{"categories":null,"content":"参考阅读 https://unix.stackexchange.com/a/15141 ","date":"2022-12-28","objectID":"/periphery/gogs-%E6%B7%BB%E5%8A%A0ssh-key-%E4%B9%8B%E5%90%8E%E4%BD%BF%E7%94%A8%E5%B8%B8%E8%A7%84%E6%96%B9%E5%BC%8F%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95-ssh%E7%BB%88%E7%AB%AF/:0:1","tags":null,"title":"Gogs 添加ssh Key 之后 无法登录到 系统Ssh终端","uri":"/periphery/gogs-%E6%B7%BB%E5%8A%A0ssh-key-%E4%B9%8B%E5%90%8E%E4%BD%BF%E7%94%A8%E5%B8%B8%E8%A7%84%E6%96%B9%E5%BC%8F%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95-ssh%E7%BB%88%E7%AB%AF/"},{"categories":null,"content":"基本内容 在本地客户端 关闭 lfs 之后， 推送到远端提示 这个 remote: GitLab: LFS objects are missing. Ensure LFS is properly set up or try a manual “git lfs push –all”. 解决办法就是 使用 gitlab 的网页管理端， 找到 项目， 用户设置， 通用， 可见性，项目功能，权限， Git 大文件存储 ，把这个取消 掉就可以了。 ","date":"2022-12-28","objectID":"/periphery/gitlab-%E5%85%B3%E9%97%AD-lfs-%E7%9A%84%E8%AE%B0%E5%BD%95/:0:1","tags":null,"title":"Gitlab  关闭 Lfs 的记录","uri":"/periphery/gitlab-%E5%85%B3%E9%97%AD-lfs-%E7%9A%84%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"为什么要在客户端上关闭 lfs 起因是 使用 lfs 推送的时候 ， 提示 413 错误。 笔者谷歌之后，别人说修改 nginx['client_max_body_size'] 可以修复错误。 值可以修改成一个较大的值 ，或者修改为 0。 但是笔者尝试之后 并没有解决问题。 ","date":"2022-12-28","objectID":"/periphery/gitlab-%E5%85%B3%E9%97%AD-lfs-%E7%9A%84%E8%AE%B0%E5%BD%95/:0:2","tags":null,"title":"Gitlab  关闭 Lfs 的记录","uri":"/periphery/gitlab-%E5%85%B3%E9%97%AD-lfs-%E7%9A%84%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"参考阅读 https://gitlab.com/gitlab-org/omnibus-gitlab/-/issues/4272 https://github.com/git-lfs/git-lfs/issues/3026#issuecomment-696697599 ","date":"2022-12-28","objectID":"/periphery/gitlab-%E5%85%B3%E9%97%AD-lfs-%E7%9A%84%E8%AE%B0%E5%BD%95/:0:3","tags":null,"title":"Gitlab  关闭 Lfs 的记录","uri":"/periphery/gitlab-%E5%85%B3%E9%97%AD-lfs-%E7%9A%84%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"笔者评论 本书谈论的是基本面分析的方法。 笔者认为本书的内容还是值得一读的， 就是不知道会不会因为年份久远而内容过时 。 本书的作者（下面都简称为作者）谈论了他的选股方法，公司分类， 市盈率， 何时买入， 何时卖出股票等内容。 作者不太看好技术形态分析，如头肩形之类的形态。他也不看好期权，期货等金融工具，以及也不看好做空。 作者不推荐使用止损， 认为现在股价波动比较大，没有必要使用止损。 而且如果公司的基本面良好，在公司股价下跌的时候 应该加仓 而不是卖出。 当公司的基本面不好，或者出现不利的消息的时候应该立即卖出。 注意：这里所说的不利消息并非某个投资专家给出的内容 ，而应该是自己寻找到的， 主要是公司的盈利能力以及公司未来的盈利能力是否受到了阻碍 。 ","date":"2022-12-20","objectID":"/2022/%E5%BD%BC%E5%BE%97%E6%9E%97%E5%A5%87%E7%9A%84%E6%88%90%E5%8A%9F%E6%8A%95%E8%B5%84-%E4%B9%A6%E6%91%98/:1:0","tags":null,"title":"彼得·林奇的成功投资 - 书摘","uri":"/2022/%E5%BD%BC%E5%BE%97%E6%9E%97%E5%A5%87%E7%9A%84%E6%88%90%E5%8A%9F%E6%8A%95%E8%B5%84-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"主要内容 我个人认为“股价”是投资者所能追踪到的最没有价值的信息，却又是投资者最普遍追踪的信息 如果你只追随一个数据进行投资，那么就追随盈利——当然前提是我们正在讨论的这家公司有盈利 我支持这样一种投资理念：公司盈利迟早决定证券投资的成败与否 在本书中我会以麦当劳公司股票为例，说明投资者以过高的价格买入优秀公司的股票也会变成高风险的投资。 使其市盈率狂涨到500倍，即使EDS公司的每股收益持续保持不变，投资者也需要等上500年的时间才能收回最初的投资” 第一种投资策略是“铁镐和铁锨”（picks and shovels）投资策略 第二种投资策略是投资于“可以一分钱不花就能拥有其互联网业务”（free Internet play）的公司 第三种投资策略是投资于因互联网发展而“附带受益”（tangential benefit）的公司，指传统的“砖瓦+水泥”（brick and mortar）的实业公司通过使用互联网而削减了成本，简化了业务流程，提高了经营效率，从而实现了盈利能力的大幅增长。 当期望变成现实的时候，那些大赢家才会比现在更加显而易见 只要在工作场所、购物中心、汽车展览厅、饭店，或者其他任何地方发现一家具有远大发展前景的公司时留心观察公司最新的发展情况，业余投资者就能寻找到一只未来能赚大钱的大牛股 如果你拥有一家零售业公司的股票，分析这家公司的一个关键点是要确定该公司的扩张阶段是否即将结束 你没有必要在所选择的每一只股票上都赚钱。 股息正在像濒危物种一样面临灭绝 公司不再派发股息会导致两个不利的结果：一是投资者无法通过定期派发股息的支票得到定期的收入；二是在股价下跌没有投资收益时投资者就找不到理由再继续持有该公司股票。 推动标准普尔500指数上涨的主要动力是一些大盘股大幅上涨，而不是小盘股和中盘股。 这并非是说根本不存在市场被高估的情况，而是说人们没有必要对此过于担心。 如果你持有一家盈利不断增长的公司的股票，那么你的股票投资回报将会十分丰厚 千万不要听信任何专业投资者的投资建议 你日常生活的环境正是你寻找“10倍股”（tenbaggers）的最佳地方 很显然，学习历史和哲学比学习统计学能够更好地为股票投资做好准备。股票投资是一门艺术，而不是一门科学， 事实上华尔街的思维方式就跟古希腊人一模一样 在几个世纪以前，当太阳升起时古代人听到公鸡报晓误认为是鸡叫才让太阳升起来了，当然现在这种混淆因果关系的说法听起来非常愚昧。 。。等，这些说法同样也混淆了因果关系。每次我听到诸如此类的理论时，我总会想起过去人们认为鸡叫让太阳升起的愚蠢说法。 我看得更远……，是因为我站在巨人的肩膀上。 我学习了统计学、高级微积分学和数量分析等课程，但是根据我在课堂上所学的数量分析理论，我在富达基金公司所亲眼看到的事情在现实世界里根本不会发生。 因此当我在理论和实践二者之间进行选择时，我选择了与实务派站在一起 彼得将这种现象概括为： *在一个等级制度中，每个职工趋向于上升到他所不能胜任的地位”，被称为著名的彼得原理。 有一系列十分有名的把互相矛盾的词合在一起的矛盾修饰词语，… 、巨大无比的小虾（jumbo shrimp），在这一长串名单之后我要再加上一个：专业投资。对于业余投资者来说，非常重要的一点是要用一种适当怀疑的眼光来审视专业投资人 如果一只股票的价格下跌时公司的基本面仍然良好，那么你最好是继续持有它，而比这更好的做法则是进一步买入更多的股票。 华尔街上有一条不成文的潜规则：“如果你购买是IBM的股票而使客户资金遭受损失，那么你永远不会因此而丢掉你的饭碗。 只要各个账户的投资经理都从同一个经过批准的股票名单中进行选股，养老基金管理部门很快就可以从此避免这种令人不快的问题再次发生 这里有另外一条不成文的规则，即客户的资产规模越大，投资组合经理人与这家客户的管理者进行交谈以取悦他们所需要的时间也就越多。 在我们这一行，不分青红皂白就把目前暂时赔钱的股票全部卖掉的做法被称为“掩埋罪证 资产规模大的基金跟所有体积庞大的物体一样存在着内在缺陷：因为物体体积越庞大，移动时所需要的能量就越大。 最后我再说一次，也许你根本不应该与股票市场沾边儿，这是一个值得进一步详细讨论的问题，因为进入股市必须要有坚定的信念，没有坚定信念的投资者只会成为股市中的牺牲品。 你也得承认这次交易中普遍被认为是大傻瓜的印第安人并不像人们想象的那样傻，可见进行债权投资获取利息的收益并不差。 股票投资者是一家业务兴盛且迅速扩张的公司的一个合伙人 唠唠叨叨这么长一大段话的目的是为了说明财富不是永恒不变的，没有人能保证大公司不会变成小公司，也根本不存在所谓的不容错过的蓝筹股。 即使是买对了正确的股票，但如果在错误的时间以错误的价格买入，也会损失惨重。 通常在股票并非谨慎的投资时，人们最有可能把股票看做是谨慎的投资 一旦我们接受货币本身具有风险这一让人不安的事实，我们才能够真正地区分究竟什么是赌博什么是投资。 对于我来说，投资只不过是一种能够想方设法提高胜算的赌博而已 梭哈扑克牌和在华尔街投资一样，奇迹出现的次数刚好让那些输钱的人不会死心总想翻本，一赌再赌而一输再输。 他们自信只要一直坚持自己的基本策略，随着时间的延长他们最终一定会赢钱 因为他们认识到股票并不是纯粹的科学，也不像下棋那样在形势占优时肯定会赢。 公司本身是好公司，但他们买入的价格却是错误的价格。 对于那些能够接受不确定性的投资者来说，进行股票投资的最大好处是，一旦判断正确就可以获得非常惊人的投资回报。 很显然，股票投资已经成为值得一试身手的赌博，前提是你要懂得如何正确地来玩这种游戏。 开始投资任何股票之前，投资者都应该首先问自己以下三个个人问题：①我有一套房子吗？②我未来需要用钱吗？③我具备股票投资成功所必需的个人素质吗？ 难怪人们能够在房地产市场上赚钱却在股票市场上赔钱，他们选房子时往往要花几个月的时间，而选择股票时却只花几分钟的时间。事实上，他们在选择一个好微波炉时花的时间也比选择一只好股票的时间多得多 我认为股票投资成功所必需的个人素质应该包括：耐心、自立、常识、对于痛苦的忍耐力、心胸开阔、超然、坚持不懈、谦逊、灵活、愿意独立研究、能够主动承认错误以及能够在市场普遍性恐慌之中不受影响保持冷静的能力 要想取得股票投资成功一个非常重要的个人素质是要有能力在得到的信息不完全、不充分以及得到的信息不完全准确的情况下做出投资决策。 问题并不在于投资者以及他们的投资顾问长期以来一直非常愚蠢或者反应迟钝，而在于当他们得到信息时，原来的信息所反映的事实现在可能已经发生了改变。 令人吃惊的是投资者情绪转变之迅速达到了令人难以置信的程度，甚至即使事实根本没有任何改变 真正的逆向投资者会耐心等待市场热情冷却下来，然后再去买入那些不再被人关注的公司股票，特别是那些让华尔街感到厌倦无聊的公司股票。 投资的窍门不是要学会相信自己内心的感觉，而是要约束自己不去理会内心的感觉。只要公司的基本面没有什么根本的变化，就一直持有你手中的股票。 很显然，投资者并不需要具备预测市场的能力照样可以在股市上赚钱，如果不是这样的话，那么我就应该一分钱也赚不到。 记住，事情从来不会十分明朗，一旦明朗早已为时太晚。 但看起来我们总是在为最近已经发生的事情再次发生做准备，而不是在为将要发生的事情做准备 我只相信购买卓越公司的股票，特别是那些被低估而且（或者）没有得到市场正确认识的卓越公司的股票是唯一投资成功之道。 市场应该是与投资无关的。如果我能够使你相信这一点，我写这本书的目的就达到了 即使正确预测市场走势却选错了股票仍然会让你亏损掉一半的投资 如果你依赖整个大盘的上升来带动你选择的股票上涨，那么你最好还是坐上大巴去亚特兰大城赌博算了 投资者要做的是选择一只正确的股票，至于股市自己会照顾自己的。 如果是我的话，我会问的第一个问题就是：“这种玩意儿是哪家上市公司制造的？” 为什么股票就像门前的草坪一样，人们总是觉得别人家的草坪更绿一些呢？ 一个在某一行业拥有优势的人总是比没有优势的人在这一行业进行股票投资的胜算更大——毕竟在行业上没有优势的人是最后一个知道这一行业发生重大变化的人。 “提前反映”（discounting）是华尔街的专家假装已经提前预测到公司发生意外事件的一种委婉说法。 专业优势特别有助于确定是否买入那些业务已经恢复过来一段时间的公司，尤其是那些处于所谓的周期性行业中的公司的股票。 你所寻找的是具有以下特征的公司股票：每股股票的资产价值超过了每股股票的市场价格 如果你依赖华尔街投资专家的推荐来选股，那么你总是要比专业投资者晚得多才能得到重要的投资信息。 购买自己所了解的公司股票 事实上，你应该将最初的信息（任何引起你注意一家公司的东西）看做是秘密塞进你信箱的一条匿名却让人很感兴趣的消息 不做研究就投资如同不看牌就玩梭哈扑克游戏一样危险。 一对夫妇可以花费整整一个周末的时间来寻找去伦敦的最低机票，但是当他们购买500股荷兰航空公司（KLM）的股票时在分析这家公司上花费的时间却连5分钟都不到。 如果你由于一家公司生产的某一种产品很受欢迎而考虑购买它的股票，那么你首先要弄清楚的第一个问题是：这种产品的成功对于这家公司的净利润影响程度有多大？ 抛开具体的产品不谈，规模大的公司股票一般不会有太大的涨幅。 但是只有投资于规模较小的公司股票才有可能获得涨幅最大的投资收益 我就要确定这家公司属于6种公司基本类型中的哪一种类型：缓慢增长型、稳定增长型、快速增长型、周期型、隐蔽资产型以及困境反转型。 那些风行一时的快速增长行业早晚都会变成缓慢增长行业， 人们总是倾向于认为事情永远不会改变，但是事实证明改","date":"2022-12-20","objectID":"/2022/%E5%BD%BC%E5%BE%97%E6%9E%97%E5%A5%87%E7%9A%84%E6%88%90%E5%8A%9F%E6%8A%95%E8%B5%84-%E4%B9%A6%E6%91%98/:2:0","tags":null,"title":"彼得·林奇的成功投资 - 书摘","uri":"/2022/%E5%BD%BC%E5%BE%97%E6%9E%97%E5%A5%87%E7%9A%84%E6%88%90%E5%8A%9F%E6%8A%95%E8%B5%84-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"主要内容 ","date":"2022-12-12","objectID":"/program/java%E4%B8%ADhashmap%E5%92%8Csynchronized%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%AE%A4%E8%AF%86/:1:0","tags":null,"title":"Java中HashMap和synchronized的更多认识","uri":"/program/java%E4%B8%ADhashmap%E5%92%8Csynchronized%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%AE%A4%E8%AF%86/"},{"categories":null,"content":"HashMap.keySet() 这个方法返回一个内部类 HashMap.KeySet的实例， 多次调用这个方法将获取同一个对象。 调用这个对象的 remove 方法 将删除HashMap 里面的元素。 调用这个对象的 clear 方法将清空 HashMap 可见源码： public Set\u003cK\u003e keySet() { Set\u003cK\u003e ks = keySet; if (ks == null) { ks = new KeySet(); keySet = ks; } return ks; } final class KeySet extends AbstractSet\u003cK\u003e { public final int size() { return size; } public final void clear() { HashMap.this.clear(); } public final Iterator\u003cK\u003e iterator() { return new KeyIterator(); } public final boolean contains(Object o) { return containsKey(o); } public final boolean remove(Object key) { return removeNode(hash(key), key, null, false, true) != null; } public final Spliterator\u003cK\u003e spliterator() { return new KeySpliterator\u003c\u003e(HashMap.this, 0, -1, 0, 0); } public final void forEach(Consumer\u003c? super K\u003e action) { Node\u003cK,V\u003e[] tab; if (action == null) throw new NullPointerException(); if (size \u003e 0 \u0026\u0026 (tab = table) != null) { int mc = modCount; for (Node\u003cK,V\u003e e : tab) { for (; e != null; e = e.next) action.accept(e.key); } if (modCount != mc) throw new ConcurrentModificationException(); } } } 这个方法的返回值一般用于遍历 keys, 如果对这个Set做一些操作，但是并不想修改HashMap的数据的话， 可以这么做： Map\u003cString, Long\u003e map = new HashMap\u003c\u003e(); Set\u003cString\u003e keys = new HashSet\u003c\u003e(map.keySet()); // 这么做之后， 修改 `keys` 里面的元素就不会影响到 `map` 了 // 但是如果修改keys的元素的值， 那么就会影响到 map里面的key, 这个自然不必多说。 // 在本例里面 元素的类型是 String, 我们都知道String是不可变的， 所以无法修改它的内部属性 // 这里在额外说一些内容 // 如果 Map\u003cK,V\u003e 中的 K是一个 自定义的复合类型， 在放入map中之后就尽量不要修改它的值 // 详情看下面的代码 如果 Map\u003cK,V\u003e 中的 K是一个 自定义的复合类型， 那么就尽量不要修改它的值， 因为如果你修改了， 则可能会发生一些预期之外的行为。 其实最好的还是不使用复合类型作为KEY， 仅仅使用简单类型和String，或者使用一些 不可变的对象 。 下面是笔者测试使用的代码。 import java.util.HashMap; import java.util.Map; import java.util.Map.Entry; import lombok.AllArgsConstructor; import lombok.Data; import lombok.EqualsAndHashCode; import lombok.NoArgsConstructor; import lombok.ToString; public class HashMapTest { @Data @NoArgsConstructor @AllArgsConstructor @EqualsAndHashCode @ToString public static class Point{ private int x; private int y; } public static void main(String[] args) { Map\u003cPoint, Integer\u003e map = new HashMap\u003c\u003e(8); Point point1 = new Point(1,1); map.put(point1, 1); System.out.println(map.get(new Point(1, 1))); // 1 point1.setX(2); point1.setY(2); System.out.println(map.get(point1)); // null System.out.println(map.get(new Point(2, 2))); // null point1.setX(1); point1.setY(1); System.out.println(map.get(point1)); // 1 point1.setX(2); point1.setY(2); System.out.println(map.get(point1)); // null Point point3 = new Point(3, 3); map.put(point3, 3); for (Entry\u003cPoint, Integer\u003e entry : map.entrySet()) { System.out.println(entry); // HashMapTest.Point(x=2, y=2)=1 // HashMapTest.Point(x=3, y=3)=3 } for (Point point : map.keySet()) { System.out.println(point.toString() + \"=\" + map.get(point)); // HashMapTest.Point(x=2, y=2)=null // HashMapTest.Point(x=3, y=3)=3 } System.out.println(map.get(point1)); // null for (int i = 0; i \u003c 160; i++) { Point point = new Point(i,i*2); map.put(point, i+1); } System.out.println(map.size()); // 162 System.out.println(map.get(point1)); // null map.put(new Point(1, 1), 10); System.out.println(map.size()); // 163 System.out.println(map.get(point1)); // null System.out.println(map.get(new Point(1, 1))); // 10 System.out.println(new Point(1, 1).equals(point1)); // false System.out.println(new Point(1, 1).hashCode() == point1.hashCode()); // false System.out.println(map.get(new Point(2, 2))); // null System.out.println(new Point(2, 2).equals(point1)); // true System.out.println(new Point(2, 2).hashCode() == point1.hashCode()); // true point1.setX(1); point1.setY(1); System.out.println(map.get(point1)); // 1 System.out.println(map.size()); // 163 System.out.println(new Point(1, 1).equals(point1)); // true System.out.println(new Point(1, 1).hashCode() == point1.hashCode()); // true System.out.println(map.get(new Point(1, 1))); // 1 } } 前面可以看出， 假如 map.put(b,c), map.get(a). 如果 a.hashCode()和b.hashCode() 相等，并且a.equals(b) 返回true, 即使是两个不一样的对象， 也可以获取到 c. 从代码中可以看到 假如 point1的值修改了， 那么你就永远的失去了它，除非你把它修改回去。 map.put(point1, 1); 修改 point1的","date":"2022-12-12","objectID":"/program/java%E4%B8%ADhashmap%E5%92%8Csynchronized%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%AE%A4%E8%AF%86/:1:1","tags":null,"title":"Java中HashMap和synchronized的更多认识","uri":"/program/java%E4%B8%ADhashmap%E5%92%8Csynchronized%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%AE%A4%E8%AF%86/"},{"categories":null,"content":"synchronized 据笔者所知 synchronized 是一个java的关键字， 用于加锁， 相比于ReentrantLock， synchronized 更加轻便， 没有选项， 但是存在一些优化措施 。 比如所谓的锁升级机制就是指的 synchronized， ReentrantLock 则没有这种机制。 所谓的锁升级机制是说 一个对象的 对象头(cpp部分) 有一个叫做 mark word 的东西， 那个字段有2个位是表示锁的状态的的。 它有四种状态 ， 00 01 10 11 分别对应什么笔者记不清楚了。 但是大概是 无锁， 偏向锁， 轻量锁， 重量级锁。 锁只能升级， 不能降级。 当一个对象没有被任何线程锁住的时候，它是无锁的。 此时一个线程A 请求给这个对象加锁， 那么线程A会假设没有别的线程和它争抢， 它将对象头修改成 偏向锁，然后进入下一步操作。 但是此时，并没有真正的锁产生。 这么做当然是为了效率， 听说加锁是一个消耗比较重的操作。 后来， 线程B 也想给这个对象加锁，那么，线程B会看到这个对象处于 偏向锁的状态，随后它修改对象头成轻量级锁， 并且进行一段时间的自旋。自旋就是空转， 这时线程B是没有进入休眠的， 线程B 假设线程A很快就会释放这个对象的锁。 假如线程A真的很快的释放了锁， 那么线程B就会拿到锁， 并且进入下一步操作。 此时还是没有真正的 锁产生， 效率是比较高的。 但是假如线程A并没有很快的释放锁， 那么自旋到一定的次数或者时间， 线程B会把锁升级成重量级锁， 并且进入休眠， 此时就产生了一个真正的锁。 对象头对于各个线程的同步机制在cpp层面是如何实现的， 笔者并不清楚。。 因为java的线程和cpp的线程听说是一对一的 笔者 看来的原文是说java的 线程和操作系统的线程是一对一的。 wait 方法会释放掉 synchronized 持有的锁。 以下代码节选自 java.util.TimerThread /** * The main timer loop. (See class comment.) */ private void mainLoop() { while (true) { try { TimerTask task; boolean taskFired; synchronized(queue) { // Wait for queue to become non-empty while (queue.isEmpty() \u0026\u0026 newTasksMayBeScheduled) queue.wait(); if (queue.isEmpty()) break; // Queue is empty and will forever remain; die // Queue nonempty; look at first evt and do the right thing long currentTime, executionTime; task = queue.getMin(); synchronized(task.lock) { if (task.state == TimerTask.CANCELLED) { queue.removeMin(); continue; // No action required, poll queue again } currentTime = System.currentTimeMillis(); executionTime = task.nextExecutionTime; if (taskFired = (executionTime\u003c=currentTime)) { if (task.period == 0) { // Non-repeating, remove queue.removeMin(); task.state = TimerTask.EXECUTED; } else { // Repeating task, reschedule queue.rescheduleMin( task.period\u003c0 ? currentTime - task.period : executionTime + task.period); } } } if (!taskFired) // Task hasn't yet fired; wait queue.wait(executionTime - currentTime); } if (taskFired) // Task fired; run it, holding no locks task.run(); } catch(InterruptedException e) { } } } 通过这段代码 我们可以看到， 他是在 while 内部进行 synchronized的， 假如 queue.wait(); 这行代码没有释放锁的话 ， 那么其他线程就永远拿不到queue的锁了。 而 再看看 Timer 类的实现内容。 private void sched(TimerTask task, long time, long period) { if (time \u003c 0) throw new IllegalArgumentException(\"Illegal execution time.\"); // Constrain value of period sufficiently to prevent numeric // overflow while still being effectively infinitely large. if (Math.abs(period) \u003e (Long.MAX_VALUE \u003e\u003e 1)) period \u003e\u003e= 1; synchronized(queue) { if (!thread.newTasksMayBeScheduled) throw new IllegalStateException(\"Timer already cancelled.\"); synchronized(task.lock) { if (task.state != TimerTask.VIRGIN) throw new IllegalStateException( \"Task already scheduled or cancelled\"); task.nextExecutionTime = time; task.period = period; task.state = TimerTask.SCHEDULED; } queue.add(task); if (queue.getMin() == task) queue.notify(); } } 这里的代码说 在添加任务 之前， 它需要先执行 synchronized(queue) 语句。 这个方法肯定和 TimerThread 是在不同的线程执行的。 假如 wait 方法不释放锁的话， 这里就会死锁了， 实际上并没有死锁发生， 所以可以说明 wait 会释放锁。 这种反推是不是不太合理啊。。。 ReentrantLock 有两个 tryLock方法，用于尝试加锁， 给予一定的等待时间。 public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException { return sync.tryAcquireNanos(1, unit.toNanos(timeout)); } 还有下面的一些方法 isLocked 是否被任一线程持有？ isHeldByCurrentThread 是否被当前线程持有？ isFair 是否公平？ 可重入式锁是指 同一个 线程可以 不断的对同一个锁进行加锁。 但是每次加锁都需要对应一次解锁操作。 ","date":"2022-12-12","objectID":"/program/java%E4%B8%ADhashmap%E5%92%8Csynchronized%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%AE%A4%E8%AF%86/:1:2","tags":null,"title":"Java中HashMap和synchronized的更多认识","uri":"/program/java%E4%B8%ADhashmap%E5%92%8Csynchronized%E7%9A%84%E6%9B%B4%E5%A4%9A%E8%AE%A4%E8%AF%86/"},{"categories":null,"content":"笔者评论 笔者感觉这本书可读可不读， 有价值的内容并不是特别多， 尤其是对于寻找交易方式的人来说。 书中的主要内容 不要被恐惧和贪婪过度影响 一定要设置止损线 使用计算机程序测试历史数据以获取一些想法 书中的部分内容是过时的， 没有效果的。 部分内容则是片面的。 ","date":"2022-12-06","objectID":"/2022/%E7%9F%AD%E7%BA%BF%E4%BA%A4%E6%98%93%E7%A7%98%E8%AF%80-%E4%B9%A6%E6%91%98/:1:0","tags":null,"title":"短线交易秘诀 - 书摘","uri":"/2022/%E7%9F%AD%E7%BA%BF%E4%BA%A4%E6%98%93%E7%A7%98%E8%AF%80-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"其他 这些是笔者的感想。 当你发现了一种联系，知道的人不多，但是很有效的时候就是赚钱的时候。 其实知道的人多不多并不是很重要，重要的是有效。 但是，我猜测一个东西知道的人越多，效果越差 但仅仅是笔者的猜测。 在股票市场上， 短期低点和短期高点似乎都没有多少效果。。 短期高点和短期低点是书中的一种识别出现的模式 因为我随便找了两只股票， 就发现了不少相连在一起的低点和高点。 确实， 低点会向着高点摆动， 但是如果摆动的距离是如此之短的话， 那么就没有太大的实用价值了。 并且， 如果一个价格形态， 有时候有用， 有时候没用， 就会非常尴尬。 可能需要使用一些附加的过滤器来使用这个价格形 态。 ","date":"2022-12-06","objectID":"/2022/%E7%9F%AD%E7%BA%BF%E4%BA%A4%E6%98%93%E7%A7%98%E8%AF%80-%E4%B9%A6%E6%91%98/:1:1","tags":null,"title":"短线交易秘诀 - 书摘","uri":"/2022/%E7%9F%AD%E7%BA%BF%E4%BA%A4%E6%98%93%E7%A7%98%E8%AF%80-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"更新 2022年12月20日 笔者前段时间使用计算机程序进行了一些分析，笔者发现，这些分析往往是没有什么作用的。 问题的主要关键是 在某一个时期有效的策略在另外一个时期可能完全没效果，甚至是亏钱的。 使用过去投射到未来的方法在这里并不好用。 在某只股票上有效的策略在另外一只股票上并没有什么效果， 甚至是亏钱的。 比如， 使用 双 MA 策略进行的交易，当收盘价格向上穿越上层的 MA 线，次日入场做多， 当收盘价格下跌跌破下层的 MA 先， 次日入场做空。 当收盘价格回到 两个 MA 中间，或者穿越到相反的位置，就次日平仓。 在部分波动比较大的股票上，这个简单的策略， 参数可以给 5SMA，10SMA, 就会赚到巨大的收益， 比如 GME 股票， 2020-1-1 到2022-12-31 这3念时间， 可以获取到10倍的收益。 但是问题在于，我们一般情况下并不能确定一只股票未来的行情是会剧烈波动还是在窄幅盘整。而且一只过去剧烈 波动的股票，在未来是否还会剧烈波动是无法确定的。 当然，可能存在一些笔者漏掉的策略，但是这个想必并不容易寻找。 ","date":"2022-12-06","objectID":"/2022/%E7%9F%AD%E7%BA%BF%E4%BA%A4%E6%98%93%E7%A7%98%E8%AF%80-%E4%B9%A6%E6%91%98/:1:2","tags":null,"title":"短线交易秘诀 - 书摘","uri":"/2022/%E7%9F%AD%E7%BA%BF%E4%BA%A4%E6%98%93%E7%A7%98%E8%AF%80-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"主要内容 这是你成为一名更优秀的商品交易者的第一课。价值，就像美女一样，正所谓情人眼里出西施。作为一名交易者，永远不要猜测价值到底是多少，价值就是市场愿意支付的价格 我得出了两个重要的结论。第一，价值无常。正因为价值的无常，当你交易期货或者股票的时候，任何事情都有可能发生。第二条尤为重要。这是因为市场的趋势和方向是你主要关注的，但是懂得如何运用你的资源才是最需要优先考虑的 严肃的交易者会在他们的交易系统里充分考虑并防范这种推迟。没有比资金管理更有必要学会的规则 你越早地学会处理失败，你就能越早地在这一行里开始积累财富 尽管你我都不能洞悉未来，特别是价格运动，但是我们可以学会控制我们的损失。根据数学理论，这是确定的，是奠定成功的基础，每一笔交易都是这样 投机的艺术不仅要求有观察能力，更主要的是讲究保存实力。 [ 我认为我现在所做的交易会是一笔亏损的交易……而且亏损会很大。 ] 认为下一两笔交易能让你的账户翻身或者小赚一笔的极端乐观想法是最危险的。 “这些损失”都不是自己找上门来的，是我自己坚信当前的交易会是一笔成功的交易，从而没有遵守游戏规则。 对未来行情乐观的想法会让我们承担不必要的风险 直到今天，我还是不相信这些负责纠正错误的官老爷。他们不会，至少是不会及时地出手帮助你和我的 投机的第二课，是要仔细地选择你的搭档和生意伙伴 我从杰克那儿学到的第二件事就是，强者是不会看得起弱者的。 他们总是教导我，上进才能过上更优越的生活，上大学就是通向优越生活的大门 我相信成功的投机者心中都有三个动机：强烈的挣大钱的愿望；渴望或是向往在别人面前展示自己；内心对境遇的不满 “儿子，生活给你的都是你投入生活中去的东西。” 交易获利基本上有两种方法：用小的头寸捕捉到一次大的价格波动；或者用大的头寸捕捉一次小的价格波动。 这里，我必须告诫你要运用智慧，别被这些图表形态干扰 大部分时间，商品价格像是个喝醉了的水手，徘徊在街头，既不知道要去哪儿，也不知道去过哪儿 如果任何一个交易日的最低价，前后交易日的低点都比它高，那么这就是短期的低点 市场短期高点刚好相反 市场从短期高点摆动到短期低点 我们叫做内移交易日（孕线）。之所以这么叫是因为当日的交易价格发生在前一日的价格区间内 为了要辨别出短期摆动点，我们只能忽略这些内移交易日以及它们可能构成的短期关键点 第二种称做外移交易日（抱线 / 吞没形态）。这种交易日很容易看到，它有高于前日的最高价，也有低于前日的最低价！ 想想看，如果任何一天的前后都有较低的高点，我们能把它定义为短期高点的话（价格内移日不算），那么我们可以再向前迈一大步，把前后都出现较低短期高点的短期高点定义成中期高点。现在系好安全带，因为我们还要再进一步：任何中期高点，只要前后两侧的中期高点都较低的话，我们就说它是个长期的高点。 当价格上涨超过前一天的高点，而前一天的最低价又比更前一天最低价还低的时候，那么这就是个短期低点所在的位置 理解价格以摆动或摆动序列的方式运动对你们而言至关重要，这是一切的开始 当市场处于下行趋势，且某日的价格超过了最低日的高点，则视为短期下行趋势结束 在价格上升中，当最高日的低点向下被突破时，则意味着短期上升趋势的结束 市场并不总能运行到你设定的目标，这就是为什么你还要学会使用跟踪止损，它太重要了。你可以把前一个中期高点与目前中期低点之间的价格距离加到前一个中期高点上，算出我们的价格目标或者说价格的潜在涨幅。 问题在于必须确定你找到的短期高点和低点是否与中期值一致。 毕竟我们是短线交易者，短线交易的目的是获得利润而不是左右市场，让它向不会发展的方向运行。 这不是大豆或者英镑的问题，问题是基于时间的研究根本站不住脚。在投机中完全依赖时间只能导致贫穷 我的建议是放弃时间周期，这只不过是华尔街的幻想。 我识别并且系统地整理出三种周期，现在我把它们称为： ① 小价格区间 / 大价格区间； ② 在区间内波动； ③ 收盘价与开盘价。 在所有的时间、市场内，区间都从小范围向大范围波动——这一点非常关键。 [ 周期在全年内不断地循环往复；大区间与小区间相互追随。这是短期交易的基本规则。 ] 市场一定会跟随天然的周期：价格窄幅运动后一定会有大幅波动 他们通常错误地认为当前大的价格变化会持续 [ 小区间产生大区间，大区间产生小区间。 ] 大区间上涨的日子通常都是低开、高收；大区间下跌的日子都是高开、低收 如果你认为逮到了一个潜在的大幅波动日——就像抓住了一条老虎的尾巴，同时价格深深地跌破了开盘价，那么在宽幅波动后价格收涨的概率就大大降低了 它们再一次告诉我们开盘之后价格向下波动越大，开盘价与收盘价之间获利的机会就越少 基本概念是价格从低点向高点移动时，收盘价在每日波幅的范围内会发生变化 [ 市场以日间波幅低点形成底部，而以日间波幅高点收盘形成顶部。 ] Jack 每天至少跟我们说一遍：“千万不要接正在往下落的匕首，”然后他会补充说，“等到它落地，不再抖动时再捡起来。这是我 50 年来看到别人输钱所得到的教训。 （ 1 ）绝大部分市场高点，会出现在以当日最高价收盘的日子；（ 2 ）绝大部分市场低点，会出现在以当日最低价收盘的日子。 市场不会因为遭遇卖压而见顶；相反，市场会因为不再有人追涨而见顶。底部的形成刚好相反。但所有人都卖出以后，我们可以从市场收盘在最低价看到这一时刻，那么价格向上反弹就成了最有可能的价格运动方向。 短线交易的诀窍是：你选择交易的时间周期越短，赚的钱越少。 [ 获利需要靠时间来积累。 ] 我的大幅赢利就是其他交易者的大幅亏损，或者反过来。但是市场依旧；短线交易者从市场里拿走大幅利润的唯一办法就是持有大额头寸 趋势是一切获利的根本。没有趋势就没有获利。趋势是时间的函数 交易的唯一控制手段是建立止损点，也就是在某点退出交易，或者退出所有的交易 输家往往无法持有一个获利的仓位太久，他们会因为赢了一把就过度兴奋，过早获利了结退场 交易者的成功是一样的，成为赢家是需要时间的 ① 短线振荡很难预测； ② 我们必须控制损失； ③ 作为短线交易者，只有价格朝着对我们有利的方向巨幅波动，才可能获利； ④ 时间是我们的朋友，因为我们需要时间来创造收益。 （ 1 ）我们只能在宽幅振荡日赚钱；（ 2 ）宽幅振荡日通常在上涨时收于最高点或接近最高点，而在下跌时收于最低点或接近最低点。 你无法用一套交易系统或者机械的方式在短线交易中获利 只有耐心持有才会为我们带来利润，而不是我们一直想象的反复买入卖出。 持有时间越短，获利机会越少。请务必记住这一规则！ 一旦贪欲占了上风，想要快速获利时（或交易超时时），我必将为其付出惨痛代价。 一旦价格开始移动，将会朝着那个方向持续运动下去 我使用每日价格波动范围————最高价和收盘价之间的差值。 这个数值代表了市场每日波动的情况。当波幅超过近期波幅的时候，说明趋势发生了变化。 就是这么简单，波幅上涨，并且远远超过了昨日的波幅，就表明当前市场方向发生了变化。 我的结论是，最适合加减某个波动扩张值的价格点是第二天的开盘价 测试市场潜在波动率倍数的第三条途径是观察过去几天的价格波动。 使用交易信号过滤器就是对市场提要求，提要求就意味着你不会每天都交易 市场交易的方式永远在变化着，但对正确的交易而言，规则保持不变。这两者我们都要领悟。 最后，多年的交易经验告诉我，那些接近信息的人通常会在信息公布前建立好自己的仓位 （ 1 ）价格形态；（ 2 ）基于价格形态的指标；（ 3 ）价格的趋势或动能。第四点，也是看起来不那么普遍的，也是我最倚重的分析工具之一，就是一个市场对另一个市场产生的关系 最后，也是第五点，绝大多数情况下从众的结果被证实是错误的，而与群体反向操作的结果大多都是正确的 市场唯一能够确定的是事情在发生变化。 作为本书的读者，你们不仅要学会我的基本工具，更重要的是学会保持警惕，留意市场的最新动向 在这个行业中，行得通的理论不会一直行得通，这就是我那么羡慕芭蕾舞蹈演员的原因，他们脚尖着地，却能屹立不倒 那就是永远不要沉迷于某笔交易中，要放弃糟糕的交易，保留盈利的交易，管理好自己的金钱和交易 控制亏损还是成功交易者与失败交易者的分水岭 在最佳周交易日开盘价上加上前一日价格波幅的一个百分比，在这个价位以上买进。我们盯住最佳周交易日，在开盘后价格上涨到一定比例后买进。我们的离场策略很简单；持有交易直到收盘，然后获利了结或止损了结。（还有更好的退出技巧，稍后介绍。） 交易者获利的关键并不是看你交易得有多频繁，毕竟任何一个傻子都可以每天做交易。像我一样的老手都知道赢钱是看你会多久不交易，对交易条件有多挑剔，只有这样才能将交易变成一个成功的事业 有些时机会比其他时候好，但只有毫无经验的交易者才会盲目地利用这些机会交易。我的策略是找到规律，比如周交易日或月交易日，将其与其他发现的破绽结合起来，想尽办法使我出手时有足够多的胜算 我的观点是，历史是未来最可能出现的情况的一个参考，因此历史是一个大致的指引，一个我们应该认真考虑的发展趋势轮廓。 不可否认，市场可能上扬，出错的可能性从没消失过，因此我一直坚持用止损 [ 我发现所有最好的形态共有的一个因素：利用代表市场极端情绪的形态可以在价格运行反方向中建立可靠的交易。 ] 但是“老千”拉里（ Larry ）还是倾向于有更多的信号以确认其交易机会是精益求精的 但是在其背后，我要寻找的真相便是某种视觉形态，它在情绪上诱骗大众在错误的时间买入或卖出，而该时机对我而言却是正确的时机 计划好自己的交易，不要偏离计划，不要让情绪在错误的时间把自己推上悬崖 “攻击日买入结构”是指某个交易日，收盘价低于前一交易日的最低价，对图","date":"2022-12-06","objectID":"/2022/%E7%9F%AD%E7%BA%BF%E4%BA%A4%E6%98%93%E7%A7%98%E8%AF%80-%E4%B9%A6%E6%91%98/:2:0","tags":null,"title":"短线交易秘诀 - 书摘","uri":"/2022/%E7%9F%AD%E7%BA%BF%E4%BA%A4%E6%98%93%E7%A7%98%E8%AF%80-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"笔者评论 本书介绍了一些技术分析的手段， 并提供了一些技术分析之所以有效的原因。 主要涉及的内容大概是 图表形态： 头肩顶， 头肩底， 旗型， 三角旗型， 对称三角形， 上升三角形， 下降三角形等。 技术指标： 包括移动平均线， 能量潮， V.A, 摆动指数RSI等 。 艾略特波浪理论 点数图 如何测算目标价格。 资金管理方面。 笔者建议，将全部的技术指标，图标形态 都视为警告信号， 不能完全确信， 要尽可能多的考虑入场和出场时机。 ","date":"2022-11-27","objectID":"/2022/%E6%9C%9F%E8%B4%A7%E5%B8%82%E5%9C%BA%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90-%E4%B9%A6%E6%91%98/:1:0","tags":null,"title":"期货市场技术分析   书摘","uri":"/2022/%E6%9C%9F%E8%B4%A7%E5%B8%82%E5%9C%BA%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"主要内容 技术分析是以预测市场价格变化的未来趋势为目的，以图表为主要手段对市场行为进行的研究 技术分析有三个基本假定或者说前提条件 : 1. 市场行为包容消化一切。 2. 价格以趋势方式演变 3. 厉史会重演。 实际上图表分析师只不过是通过研究价格图表及大量的辅助技术指标，让市场自己揭示它最可能的走势，而并不是分析师凭他的精明“征服”了市场 我们把决策过程分为前后两个阶段；先分析市场，而后选择出入市时机 对期货商而言，时机决定一切 请记住，唯有供求规律才能决定牛市或熊市的发生、发展 许多学者没有能力揭示价格形态，可这并不能证明价格形态不存在 道氏理论的基本原则 平均价格包容消化一切因素 市场具有三种趋势 道氏把趋势分成三类——主要趋势、次要趋势和短暂趋势。 大趋势可分为三个阶段 各种平均价格必须相互验证 交易量必须验证趋势。 唯有发生了确凿无疑的反转信号之后，我们才能判断一个既定的趋势已经终结 持仓兴趣是买盘或卖盘单边的总数，而不是双方之和 在技术分析这种市场研究方法中，趋势的概念绝对是核心内容 图表分析师所使用的全部工具，诸如支撑和阻挡水平、价格形态、移动平均线、趋势线等等，其唯一的目的就是辅助我们估量市场趋势，从而顺应着趋势的方向做交易 所谓市场趋势，正是由这些波峰和波谷依次上升或下降的方向所构成的 大多数技术工具和系统在本质上都是顺应趋势的，其主要设计意图在于追随上升或下降的市场。当市场进入这种持平的或者说“没有趋势”的阶段时，它们通常表现拙劣，甚至根本不起作用 我们反复强调，每个趋势都是其更长期一级趋势的组成部分，同时它自身也是由更短期的趋势所构成 我们把谷，或者说“向上反弹低点”，称为支撑，用某个价格水平或者图表上某个区域来表示 阻挡，也以某个价格水平或图表区域来表示。与支撑相反，在其上方，卖方压力挡住了买方的推进，于是价格由升转跌。 一旦在上升趋势中市场不能越过前一个高点，或者在下降趋势中市场无力跌破前一个低谷支撑，便发出了现行趋势即将有变的第一个警告信号。 只要支撑或阻挡水平被足够大的价格变化切实地击破了，它们就互换角色，演变成自身原先的反面 支撑或阻挡区的重要程度可以由以下三个方面决定：市场在该处所经历的时间、交易量、以及交易活动的发生时间距当前的远近。 支撑水平被市场穿越到一定程度之后，就转化为阻挡水平，反之亦然 不过请切记，仅当市场从支撑或阻挡水平穿越得足够远、致使市场参与者确信自己判断错误的情况下，两者才能互换角色。市场穿越得越远，人们便越信服自己的新认识 趋势线 为了验证其有效性，必须看到价格第三次触及该线，并从它上面再次反弹出去 首先倒底由什么因素来决定一条趋势线的重要程度 ? 答案包含两个方面——它未被触及的时间越长，所经过试探的次数越多，则越重要 在线图上作趋势线时，应当把它描画在全部价格范围之下或之上。 正如其它许多市场分析领域一样，碰上这种模棱两可的情形时，分析者只有靠自己的经验和主观判断来定夺 3％穿越原则 3 ％原则和 2 天原则不仅适用于考察重要趋势线的突破，也同样可以应用于鉴别市场对重要支撑和阻挡水平的突破。 一旦趋势线被突破了，那么价格离开趋势线的目标距离，通常同趋势反转以前价格在趋势线另一边曾经达到的竖直距离相等 下面讲扇形原理。这是趋势线另一种颇有意思的用法 ( 见图 4 ． 11a 到 c) 。有时候，当上升趋势线被突破后，价格先是有所下跌，然后再度上弹，回到原上升趋势线的下边 ( 该线此时已成为阻挡线了 ) 第三条趋势线若再次被突破，通常就意味着价格将下跌了。请切记，第三条趋势线被突破是趋势反转的有效信号。 一般来说，倾斜角度约为 45° 的趋势线最有意义。 如果趋势线过于陡峭( 如图4 ．12 中1 线所示) ，那么通常表明价格上升得太快，因而难以持久。 要是趋势线距离当前价格变化过远的话，则它对追踪当前趋势的变化帮助不大 在有些情况下，价格趋势整个地局限于两条平行线之间—其中一条为基本的趋势线，另一条便是管道线 重要趋势线被突破后，表明现行趋势发生了重大变故。但是上升管道线的突破恰好具有相反的意义 如果价格显著地越过了上升趋势的管道线，则通常表明趋势增强 在趋势线技术中，管道线是第二位的。不过管道线确实也很有用，值得揽入我们的工具囊中。 确切地说，在很大的程度上， 50% 回撤是市场的一种倾向性，而不是一条精确、严格的规则 在一个强劲趋势的调整过程中，市场通常至少回撤到前一个运动的三分之一的位置 反转日发生在市场顶部或者底部。顶部反转日有个通行的定义 : 在上升趋势中，某日价格达到了新的高位，但当天收市价格却低于前一日收市价。 当日的高点和低点均超过了前一天，形成了所谓的“扩张日”。反转日倒也不一定非是扩张日不可，但是如果它同时也是扩张日，那么其分量就更重了 要知道，我们必须从全面的技术角度去考察市场。 在下降趋势中，对应情况是当日的最高价格低于前一日的最低价。向上跳空表明市场坚挺，而向下跳空则通常是市场疲软的标志 跳空一般可分为四种类型—普通跳空，突破跳空，中继跳空 ( 或测量跳空 ) ，以及衰竭跳空 突破跳空通常发生在重要的价格运动完成之后，或者新的重要运动发生之初 当新的市场运动发生、发展过一段之后，大约在整个运动的中间阶段，价格将再度跳跃前进，形成一个跳空或一列跳空，称为中继跳空 岛行反转 有时候，在向上衰竭跳空出现后，价格在其上方小范围地盘桓数日乃至一个星期，然后再度跳空而下。 事实上，趋势在发生重要变异之前，通常需要一段酝酿的时间 价格形态是股票或期货价格图上的特定图案或花样，它们具有预测性价值，我们可以把它们分门别类。形态具有两个类别 : 反转型和持续型 关键是，必须在形态形成的过程中尽早判别出其所属类型 交易量在所有价格形态中，都起到重要的验证作用 在单独地剖析各个主要反转形态之前，我们先交待所有反转形态所共有的几个基本要领。 在市场上事先确有趋势存在，是所有反转形态存在的前提。 现行趋势即将反转的第一个信号，经常是重要的趋势线被突破。 形态的规模越大，则随之而来的市场动作越大。 顶部形态所经历的时间通常短于底部形态，但其波动性较强。 底部形态的价格范围通常较小，但其酝酿时间较长。 交易量在验证向上突破信号的可靠性方面，更具参考价值。 正因为是反转形态所以事先必须有趋势可反 主要趋势线被突破，并不一定意味着趋势的反转。 然而，在底部反转过程中，交易量的相应扩张，却是绝对必需的 头肩顶成立的决定性因素是，收市价格明确地突破到颈线之下。在顶部形态完成后的初始阶段，当市场向下突破时交易量是否急剧扩张并不是至关重要的 我们来归纳一下形成头肩顶的各个要素。 事先的上升趋势。 左肩 ( 点 A) 伴随着较重的交易量，且之后市场向下调整到点 B 以较轻的交易量上冲到新高点 ( 点 C) 。 随后的下跌低于前一个峰 (A 点处 ) ，且接近前一个向上反弹低点 ( 点 D) 。 第三轮上冲 ( 点 E) 具有显著减轻的交易量，且无力达到头顶的高度 ( 点 C 处 ) 。 收市价低于颈线。 反扑回颈线 ( 点 G) ，然后下跌至新低点 在我们预计价格目标的时候，还应当考虑到其余许多因素 稍有差别的一点是，在底部，当颈线被向上突破后，市场更惯于反扑 市场具有“因自重而下跌”的倾向性，因此在底部，当市场力图发动一轮牛市的时候，必得具有较多的交易量才行，也就是说，必须具有显著增强的买进推力。 这一点是头肩底同头肩顶最大的分别 . 在底部，强劲的交易量绝对是完成形态的关键组成部分 那么只要随后有任何一个收市价格返回到须线上方，都是严重的警讯，表明此次突破可能是无效信号 其一，没有哪个图表形态百发百中。它们在大多数时间是成功的，但并不是永远如此。其二，技术型交易商必须永远警惕自己分析中的错误信号 在期货市场，致胜的关键之一，就是要尽快摆脱亏损的交易头寸 在三重顶中，交易量往往随着相继的峰而递减，而在向下突破时则应增加。三重顶只有在沿着两个中间低点的支撑水平被向下突破后，才得以完成 各种市场分析的领域都一样，现实情况通常都是理想模型的某种变体 他面对的是百分比概率和可能性，错误信号的出现是免不了的，这是交易现实的客观规律。 请记着，在顶部，价格必须真正跌破前一个向上反弹的低点，才能表明双重顶成立 最后，形态的规模始终是很重要的一个方面。双峰之间持续的时间越长、形态的高度越大，则即将来临的反转的潜力越大。这一点对所有的图表形态而言，都是成立的 首先，事先必须有趋势存在。趋势以 V 形反转的现象，极经常地出现在市场持续上涨，一路很少调整或只有微小调整的情况下 有些时候，这种反转的唯一有效信号是，市场对其非常陡峭的趋势线的突破 当然，话说回来，没有人敢说发财是件如履平地的容易事 本章我们讨论了五种最常用的主要反转形态—头肩形、双重顶和底、三重顶和底、圆形以及 V 形 三角形可分为三类—对称三角形、上升三角形和下降三角形 对称三角形 ( 绕线筒 ) 通常属于持续型形态 如果价格始终局限于三角形内，并超出了上述四分之三的范围，那么，这个三角形就开始丧失其潜力，这通常意味着价格将持久地漂泊下去，直到顶点以外。 这种交易量的收缩倾向，在所有的调整性形态中都普遍存在。但当趋势线被穿越从而形态完成时，交易量应该明显地增加 当上升趋势恢复时，交易量的相应增加都是至关紧要的 上升三角形 其中上边趋势线持平，而下边线则上升。本形态显示，买方比卖方更为积极主动。它属于看涨形态 上升三角形看涨，下降三角形看跌 下降三角形仅仅是上升三角形的镜像，一般认为，它属于看跌形态。 上边线下降，下边线水平 . 这种形态说明，卖方比买方更为积极主动。","date":"2022-11-27","objectID":"/2022/%E6%9C%9F%E8%B4%A7%E5%B8%82%E5%9C%BA%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90-%E4%B9%A6%E6%91%98/:2:0","tags":null,"title":"期货市场技术分析   书摘","uri":"/2022/%E6%9C%9F%E8%B4%A7%E5%B8%82%E5%9C%BA%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"基本内容 先从 github 上下载库的源码。 切换分支到 releases/v3.7 切换到自己需要的分支即可 命令参考： git clone https://github.com/mongodb/mongo-cxx-driver.git cd mongo-cxx-driver git checkout releases/v3.7 使用命令 cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=/opt/mongo -DCMAKE_INSTALL_RPATH=/opt/mongo .. 进行配置 这个命令将会把 mongo-cxx-driver 安装到 /opt/mongo 目录里面。 成功配置后使用 make 命令进行编译 编译成功之后使用 sudo make install 进行安装。 命令参考： cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=/opt/mongo -DCMAKE_INSTALL_RPATH=/opt/mongo .. make sudo make install 随后，需要手动把 mongo-cxx-driver 的编译结果添加到 cmake 里。 CMakeLists.txt 文件内容参考 SET(CMAKE_PREFIX_PATH \"/opt/mongo/lib/cmake/\") SET(EXTRA_LIBS mongo::bsoncxx_shared mongo::mongocxx_shared ) target_link_libraries(target PRIVATE ${EXTRA_LIBS}) ","date":"2022-11-20","objectID":"/program/arch-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85-mongo-cxx-driver-%E7%9A%84%E8%AE%B0%E5%BD%95/:1:0","tags":null,"title":"Arch 编译安装 Mongo Cxx Driver 的记录","uri":"/program/arch-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85-mongo-cxx-driver-%E7%9A%84%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"参考链接 https://mongocxx.org/mongocxx-v3/installation/linux/ ","date":"2022-11-20","objectID":"/program/arch-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85-mongo-cxx-driver-%E7%9A%84%E8%AE%B0%E5%BD%95/:2:0","tags":null,"title":"Arch 编译安装 Mongo Cxx Driver 的记录","uri":"/program/arch-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85-mongo-cxx-driver-%E7%9A%84%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"笔者评论 本书大多讲述了一些关于生活的指导性方针， 解决问题的几个思路。 对于如何选股，以及如何赚钱并没有太多描述。 摘要： 把手头的事情做好，把拥有的客户照顾好，其他人自然会来找你 反过来想，总是反过来想 ","date":"2022-11-20","objectID":"/2022/%E7%A9%B7%E6%9F%A5%E7%90%86%E5%AE%9D%E5%85%B8-%E4%B9%A6%E6%91%98/:1:0","tags":null,"title":"穷查理宝典   书摘","uri":"/2022/%E7%A9%B7%E6%9F%A5%E7%90%86%E5%AE%9D%E5%85%B8-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"主要内容 把手头的事情做好，把拥有的客户照顾好，其他人自然会来找你 当你为自己表现得很好而感到满意时，你会在未来做得更好 人死后只有两种可能： 1. 你将在阴间过上更好的、永恒的生活； 2. 就算得不到这样的结果，你也将不再保留任何人间痛苦 年轻人最大的希望应该是不要未死先老 耐心是最伟大的美德 当面临要么改变想法、要么证明无需这么做的选择时，绝大多数人都会忙于寻找证据 如果你不明白有舍才有得的道理，如果你以为鱼与熊掌可以兼得，那么你就太傻了 查理认为未雨绸缪、富有耐心、律己严厉和不偏不倚是最基本的指导原则 循序渐进，耐心。 查理一般会先注意应该避免什么，也就是说，先弄清楚应该别做什么事情，然后才会考虑接下来要采取的行动 就短线投资而言，市场是一台投票机器。但就长线投资而言，它是一台称重机器 关于投资，我们有三个选项：可以投资，不能投资，太难理解 尽管在芒格和巴菲特的世界里，糟糕的结果是可以接受的（因为有些结果并不在他们的掌握之中），但准备不足和仓促决策是不可原谅的，因为这些因素是可以控制的 你若想在任何领域拥有竞争力，就必须熟练地掌握该领域的方方面面，不管你是否喜欢这么做，这是人类大脑的深层结构决定的 要朝前想、往后想——反过来想，总是反过来想 人的任务不是去看清远处模糊的东西，而是去做好身边清楚的事情 专注——别把事情搞复杂，记住你原来要做的事 抓住猫尾巴，把猫倒提起来的人，将会学到他在别的地方学不到的教训 获得痛苦生活的几种方法 使用化学物质改变感觉 嫉妒 怨恨 芒格的方法 第一，要反复无常，不要虔诚地做你正在做的事 我为痛苦生活开出的第二味药是，尽可能从你们自身的经验获得知识，尽量别从其他人成功或失败的经验中广泛地吸取教训，不管他们是古人还是今人。这味药肯定能保证你们过上痛苦的生活，取得二流的成就。 我为你们的痛苦生活开出的第三味药是，当你们在人生的战场上遭遇第一、第二或者第三次严重的失败时，就请意志消沉，从此一蹶不振吧 我所开的最后一味药是，请忽略小时候人们告诉我的那个乡下人故事。曾经有个乡下人说：“要是知道我会死在哪里就好啦，那我将永远不去那个地方。” 卡森采用的研究方法是把问题反过来想。就是说要解出 X ，得先研究如何才能得到非 X 。 在座各位，愿你们在漫长的人生中日日以避免失败为目标而成长。 她说你们必须先吃完胡萝卜，然后才准吃甜点。 你必须说明何人因何故在何时何地做了何事 一个使用工具的人应该了解它的局限 我发现把自由的市场经济——或者部分自由的市场经济——当做某种生态系统是很有用的思维方式 所以缩小规模、加强专业化程度能够给你带来巨大的优势。大未必就是好 他们并没有进行第二步分析——也就是弄清楚有多少钱会落在你手里，多少钱会流向消费者 当冲浪者顺利冲上浪尖，并停留在那里，他能够冲很长很长一段时间。但如果他没冲上去，就会被海浪吞没。 聪明人在发现这样的机会之后会狠狠地下注。他们碰到好机会就下重注，其他时间则按兵不动。就是这么简单 期望别太高。　拥有幽默感。　让自己置身于朋友和家人的爱之中。 在任何行业取得成功的第一步是对该行业产生兴趣。 严重的意识形态是最能扭曲人类认知的因素之一 所以我们成功的诀窍是去做一些简单的事情，而不是去解决难题 谦虚使人进步 实际上，你应该弄清楚你知道什么，不知道什么。在生活中，还有什么比这个更有用的呢？ 在大多数情况下，要说服一个人，从这个人的利益出发是最有效的 后果引发的行为、后果的性质决定了有机体在未来重复该行为的倾向 许多工作只要能够让你赚钱，就是体面的工作 第一个有用的观念是，简化任务的最佳方法一般是先解决那些答案显而易见的大问题。 第二个有用的观念跟伽利略的论断如出一辙。伽利略说，惟有数学才能揭示科学的真实面貌，因为数学似乎是上帝的语言 第三个有用的观念是，光是正面思考问题是不够的，你必须进行反面思考 第四个有用的观念是，最好的、最具有实践性的智慧是基本的学术智慧。但有一个极其重要的前提：你必须以跨学科的方式思考 第五个有用的观念是，真正的大效应，也就是效应，通常在几种因素的共同作用下才会出现 在巴甫洛夫条件反射中，光靠联想就能产生强大的效应 没有获得成功的人会否认别人的帮助。明智而自信的做法是，对这种帮助表达感激 如果你们想要改变别人的想法，要诉诸利益，而非诉诸理性 如果一件事情无法永远延续下去，它最后就会停下来 过于追求公平，会给社会制度带来严重的功能障碍 粗略的正确好过精准的错误 要得到你想要的某样东西，最可靠的办法是让你自己配得起它。 正确的爱应该以仰慕为基础，而且我们应该去爱那些对我们有教育意义的先贤 懒惰和言而无信是显然要避免的 我觉得我没资格拥有一种观点，除非我能比我的对手更好地反驳我的立场 “未必要有希望才能够坚持。” 有一种叫做“自我服务偏好”的心理因素也经常导致人们做傻事。你们认为“自我”有资格去做它想做的事情 自怜总是会产生负面的影响，它是一种错误的思维方式 另外一种应该避免的事情是受到变态的激励机制的驱动。 别根据你的愿望来要求现实，应该依据现实来确定你的愿望。 困扰人们的并非事物，而是他们对事物的看法。 “‘那我就自己来吧。’小红母鸡说。” 人类的大脑天生就有一种尽快作出决定，以此消除怀疑的倾向。 如果你觉得骂人是很好的主意，你可以留到明天再骂 有坏消息要立刻向我们汇报。只有好消息是我们可以等待的。 “托尔斯泰效应”的后半部分，也就是人们不去改变自己，而是为自己那些可以改变的糟糕表现寻找借口，是极其重要的。 如果有个人即将得到某样他非常渴望的东西，而这样东西却在最后一刻飞走了，那么他的反应就会像这件东西他已经拥有了很久却突然被夺走一样 因此，若是人们能够更加理性地思考，在潜意识层面上更少受到被剥夺超级反应倾向的驱使，许多已经发生的悲剧是完全可以避免的。 人们在感到困惑或者有压力的时候，尤其是在既困惑又有压力的时候，最容易受社会认同倾向影响 学会如何在其他人犯错的时候别以他们为榜样，因为很少有比这个更值得掌握的技能。 了解心理操纵伎俩并非就是一种完美的防御措施 在前后对比度细微的变化误导之下，人们经常无法认识到通往终点的趋势。 轻度的压力能够轻微地改善人们的表现，比如说在考试中；而沉重的压力则会引发彻底失调。 所以人类的大脑会高估容易得到的东西的重要性，因而展现出易得性—错误衡量倾向。避免受易得性—错误衡量倾向影响的主要对策通常是按程序办事，包括使用几乎总是很有帮助的检查清单 别只是因为一样事实或者一种观念容易得到，就觉得它更为重要 以下是这些倾向： 一、奖励和惩罚超级反应倾向 二、喜欢 / 热爱倾向 三、讨厌 / 憎恨倾向 四、避免怀疑倾向 五、避免不一致性倾向 六、好奇心倾向 七、康德式公平倾向 八、艳羡 / 妒忌倾向 九、回馈倾向 十、受简单联想影响的倾向 十一、简单的、避免痛苦的心理否认 十二、自视过高的倾向 十三、过度乐观倾向 十四、被剥夺超级反应倾向 十五、社会认同倾向 十六、对比错误反应倾向 十七、压力影响倾向 十八、错误衡量易得性倾向 十九、不用就忘倾向 二十、化学物质错误影响倾向 二十一、衰老—错误影响倾向 二十二、权威—错误影响倾向 二十三、废话倾向 二十四、重视理由倾向 二十五、 lollapalooza 倾向——数种心理倾向共同作用造成极端后果的倾向 查理 · 芒格的推荐书目： 略 ","date":"2022-11-20","objectID":"/2022/%E7%A9%B7%E6%9F%A5%E7%90%86%E5%AE%9D%E5%85%B8-%E4%B9%A6%E6%91%98/:2:0","tags":null,"title":"穷查理宝典   书摘","uri":"/2022/%E7%A9%B7%E6%9F%A5%E7%90%86%E5%AE%9D%E5%85%B8-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"检视阅读 / 略读 ","date":"2022-11-06","objectID":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/:1:0","tags":null,"title":"如何阅读一本书   书摘","uri":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"方法1 读书名， 以及序 读目录 读附录 读书皮 （ 外包装的新皮） 挑几个和主题息息相关的篇章来看 打开书， 东翻翻，西翻翻， 念个一两段，有时候可以几页 但不要太多。不要忽略最后的两三页 ","date":"2022-11-06","objectID":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/:1:1","tags":null,"title":"如何阅读一本书   书摘","uri":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"方法二 粗浅的阅读 头一次面对一本难度的书的时候，从头到尾读一遍，碰到不懂的地方不要停下来查询或者思索。 ","date":"2022-11-06","objectID":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/:1:2","tags":null,"title":"如何阅读一本书   书摘","uri":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"结构笔记 在略读的时候可以尝试问一下这个问题： 这是一本什么样子的书？ 它在谈什么？ 并把答案记录成笔记， 以便后面再翻阅。 ","date":"2022-11-06","objectID":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/:1:3","tags":null,"title":"如何阅读一本书   书摘","uri":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"提出 并回答问题 如何在阅读的时候保持主动呢？ 提出问题， 你应该提出并回答下面的几个问题 整体来说，这本书到底在讲什么 作者细说了什么，怎么说的 这本书说的有道理吗？ 是全部有道理，还是部分有道理？ 这本书跟你有什么关系？ 如果这本书给了你一些资讯， 你一定要问问这些资讯有什么意义 ","date":"2022-11-06","objectID":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/:2:0","tags":null,"title":"如何阅读一本书   书摘","uri":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"分析阅读 规则一， 分类。 小说类和论述型。 论述类又分为理论和实用型，就像是纯科学和应用科学。 从另外一个角度来看，论述型还可以分为 科学，哲学，历史等。 为什么要分类呢？ 因为每类书读起来的方式都不太一样。 书本和读者的关系就像是老师和学生。 不同科目的老师的教学方式都不太一样。 规则二，使用一句话或者几句话来描述书的内容。 并且需要自己探索出书内容的架构。 规则三， 详细考虑书中各个部分，它们自己的架构是什么。 规则三是规则二的基础，先明白了书中各个部分的纲要，才能更好的理解整本书的纲要。 在做规则三的时候并不一定需要根据目录分部分，可以根据自己的理解来。 这一部分可以做的很详尽，也可以做的简单一点。 规则5 找出重要的单字，并从这些单字中获取作者想表达的东西。与作者达成共识 规则6 将一本书中最重要的句子圈起来， 找出其中的主旨。 用自己的语言说出作者这句话想表达的意思 文字≠知识或者思想。 规则7 从相关文句的关联中， 设法架构出一本书的基本论述。 另外一个说法： 如果可以，找出数种说明重要论述的段落。 规则8 找出作者的解答 规则9 在你说出“我同意”，“我不同意”，或者“我暂缓评论”之前， 你一定要能肯定的说“我了解了”。 规则10 当你不同意作者的观点时，要理性的表达自己的意见， 不要无理的辩驳或者争论。 规则11 将知识上的不同意见看作是大体上可以解决的问题。 站在对面评论一本书的时候，可以考虑下面几个重点。 你的知识不足 你的知识有误 你的说法不和逻辑 你的分析并不完整 在阅读了一些知识之后， 可以询问自己两个问题： 这是真实的吗 这是有意义的吗 在阅读实用性的书籍时， 上述规则需要有所改变 规则4调整为： “找出作者想要你做什么” 规则8调整为： “了解他要你这么做的目的。” ","date":"2022-11-06","objectID":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/:3:0","tags":null,"title":"如何阅读一本书   书摘","uri":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"阅读小说类的书籍 快读， 如果读的慢的话， 会忘记一些情节。 ","date":"2022-11-06","objectID":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/:3:1","tags":null,"title":"如何阅读一本书   书摘","uri":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"主题阅读 分为5个步骤， 注意这是需要大致按顺序执行的步骤， 而非规则。 步骤1 找到相关的章节。 在主题阅读中， 你关心的是你的主题，而非单本的书籍。 步骤2 带引作者与你达成共识。 步骤3 理清问题 步骤4 界定议题 步骤5 分析讨论 ","date":"2022-11-06","objectID":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/:4:0","tags":null,"title":"如何阅读一本书   书摘","uri":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"其他 主动阅读能使心智保持活力与成长。 ","date":"2022-11-06","objectID":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/:5:0","tags":null,"title":"如何阅读一本书   书摘","uri":"/2022/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6-%E4%B9%A6%E6%91%98/"},{"categories":null,"content":"图片预警！（文件尺寸较大） ","date":"2022-10-23","objectID":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/:0:0","tags":null,"title":"Manjaro使用了一段时间的体验","uri":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"安装 笔者使用的是manjaro-KDE ， 是从官方网站下载的包。 安装过程很简单， 基本上就是下一步下一步，如果自己不懂分区的话，就选择自动分区即可。 因为笔者希望这块硬盘也分配一些空间给windows使用， 所以是手动分区的。 手动分区也很简单， 基本上就是分成下面的形式。 下面是笔者使用的方式 一个 /boot/efi 大约500M 打上 boot的flag. 这个是引导分区， 如果没有这个的话， 安装程序会提示你的。 一个/ 分区， 大约200G， 是系统根目录分区。 一个 /home 分区， 大约500G， 是家目录的分区。 ","date":"2022-10-23","objectID":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/:1:0","tags":null,"title":"Manjaro使用了一段时间的体验","uri":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"截图 右键，在新标签页中打开图片可以查看大图。 ","date":"2022-10-23","objectID":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/:2:0","tags":null,"title":"Manjaro使用了一段时间的体验","uri":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"碰到的问题与其他 ","date":"2022-10-23","objectID":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/:3:0","tags":null,"title":"Manjaro使用了一段时间的体验","uri":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"Unity相关问题 因为笔者的显示器是4K的， 而在高分辨率下， Unity中的字和窗口内容都很小。 可以使用下面的内容 放大2倍 但是不能放大1.5倍。 这就导致Unity的窗口会变得很大。 总之效果不是很好。 export GDK_SCALE=2 export GDK_DPI_SCALE=0.5 此外， steam-vr是无法运行在 Linux上面的。 ","date":"2022-10-23","objectID":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/:3:1","tags":null,"title":"Manjaro使用了一段时间的体验","uri":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"使用manjaro的初衷 笔者刚开始是选择的黑苹果， 但是因为黑苹果更新比较麻烦， 而苹果系统总是弹窗让我更新， 所以想换Linux试一试。 其实也有喜新厌旧的成分在里面。 ","date":"2022-10-23","objectID":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/:3:2","tags":null,"title":"Manjaro使用了一段时间的体验","uri":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"终端 笔者使用的是 fish， 使用 https://github.com/oh-my-fish/oh-my-fish 进行管理的。 主题是bobthefish, 运行终端是KConsole, KDE附带的组件。 ","date":"2022-10-23","objectID":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/:3:3","tags":null,"title":"Manjaro使用了一段时间的体验","uri":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"浏览器 Chrome 和 Firefox 都可以使用， 笔者没感觉到和别的平台有太大区别。 ","date":"2022-10-23","objectID":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/:3:4","tags":null,"title":"Manjaro使用了一段时间的体验","uri":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"其他 KDE的可定制程度较高。 笔者的顶部栏和底部栏都是自己定制的。 文件管理器的ICON 也是自己找的 中文输入法虽然有， 但是词库感觉比较怪异， 不是那么方便。 ","date":"2022-10-23","objectID":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/:3:5","tags":null,"title":"Manjaro使用了一段时间的体验","uri":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"KDE-Connect 在手机上安装了这个应用之后就可以和电脑链接了。 可以在电脑上查看手机的短信，也可以发送短信。 可以在电脑上查看手机的通知。 还可以互相发送文件，以及发送粘贴板。 由于笔者没有使用腾讯类的软件， 所以这个工具还算好用。 ","date":"2022-10-23","objectID":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/:3:6","tags":null,"title":"Manjaro使用了一段时间的体验","uri":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"软件相关 MarkText 这是一个 markdown 写作工具， 笔者在manjaro 上发现， 这个应用程序在某些情况下会崩溃。 vs-code 安装命令： yay -S visual-studio-code-bin 更新使用相同的命令，需要手动更新 chrome 安装命令： yay -S google-chrome 更新使用相同的命令，需要手动更新 java 安装jdk11的命令: sudo pacman -S jre11-openjdk-headless jre11-openjdk jdk11-openjdk openjdk11-doc openjdk11-src 来源： https://linuxconfig.org/how-to-install-java-on-manjaro-linux 注意， doc 和 src 包需要单独安装， 否则在开发的时候会发现jdk的类没有源码。 其他 vscode 和 chrome 在系统 更新的时候并不会自动更新， 所以需要手动运行命令。 ","date":"2022-10-23","objectID":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/:3:7","tags":null,"title":"Manjaro使用了一段时间的体验","uri":"/periphery/manjaro%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"本文介绍的是安装客户端。 笔者最近从黑苹果切换到了 manjaro-KDE ，所以使用的是linux的桌面版。 笔者urback的server是使用 openmediavault带的插件进行安装的。 urbackup官方给的 客户端安装 方式是这个 UrBackup - Download UrBackup for Windows, GNU/Linux or FreeBSD 因为笔者的server版本比较老旧， 所以客户端的版本也需要老旧一点。 否则可能无法正常工作。 笔者的server是 1.4.11版本的， 所以笔者找了一个 1.4.11版本的客户端。 地址是： AUR (en) - urbackup-client 在安装使用之后， 笔者的客户端总是会自动崩溃。 在使用命令urbackupclientbackend -v debug 之后， 笔者发现是在加密的部分出错了。 在一番折腾之后， 笔者发现自己编译urbackup的客户端可以解决问题。 先从官网下载源码。 https://hndl.urbackup.org/Client/2.5.20/urbackup-client-2.5.20.tar.gz 这个地址可以下载2.5.20版本的源码， 把所有的2.5.20 替换成1.4.11 就可以下载1.4.11版本的源码。 下载了源码之后， 进行解压。 使用命令/configure --prefix='/usr' --sbindir='/usr/local/sbin/' --localstatedir='/var' --sysconfdir='/etc' --enable-headless --enable-embedded-cryptopp 进行配置。 之后使用 make命令进行编译， 可以使用 make -j 4 加速编译。 成功编译之后可以使用 sudo make install 命令进行安装。 在应用程序安装好了之后可以使用命令 sudo cp urbackupclientbackend-debian.service /usr/lib/systemd/system/urbackupclientbackend.service 安装service 文件。 安装service文件之后， 可以使用命令 sudo systemctl daemon-reload 重载系统的service 。 之后可以使用命令 sudo systemctl enable urbackupclientbackend 使urbackup开机启动。 urbackup的默认配置文件在 /etc/default/urbackupclient 修改文件的RESTORE选项为server-confirms 即可在server 的web界面进行文件的恢复操作。 RESTORE=\"server-confirms\" 成功安装之后， 需要使用命令 sudo urbackupclientctl add-backupdir [path] 来添加需要备份的目录 ","date":"2022-09-25","objectID":"/periphery/%E5%9C%A8manjaro%E4%B8%AD%E4%BD%BF%E7%94%A8urbackup/:0:0","tags":null,"title":"在manjaro中使用urbackup","uri":"/periphery/%E5%9C%A8manjaro%E4%B8%AD%E4%BD%BF%E7%94%A8urbackup/"},{"categories":null,"content":"无形的攻击是很难防备的，元午如果做一名暗杀者的话， 应该是很有前途的。 元午很少有机会和别人交流异能相关的事情， 更别说碰到一名异能者了。 元午 请李永言和水桥晴雪来他家玩的原因当然有部分是因为他和李永言一起玩游戏玩了太久了， 而且元午的朋友并不是很多。 还有很大一部分的原因是因为水桥晴雪可以 使用异能。 元午的爷爷曾经说 可以使用异能的人类将来很可能变成主流，所以如果能和异能者交朋友的话， 那是一件很不错的事情。 元午展示完自己的异能之后，突然开口道：“水桥妹妹，要不我们俩比划比划？ ” 李永言听到之后吓了一跳，急忙说道：“这不太好吧，你的异能是 杀伤性的异能，水桥的也是，如果有人受伤了，就不好了” 水桥晴雪点了点头，没有多说什么。 元午露出了有点遗憾的表情，说道：“那好吧，以后有机会再比划。” 元午提着木剑走向剩下的几个石块，嗖，嗖，嗖分别出上了一剑。 相同的结果出现了， 那些石块都被整齐的切开了。 元午做完这些之后，看向水桥晴雪，开口问道：“水桥妹妹，你能操控火球飞出去吗？” “嗯，可以的”水桥晴雪回答道。 元午在提问之前就已经猜到了，他在看到了李永言拍摄的照片之后就猜测有这一能力，现在提问只是为了确认一下。 “那能否请你帮我个小忙？” “具体是做些什么呢？” “发射出几个火球就可以了” “嗯。。” 水桥晴雪沉吟了一会儿之后，就答应了下来。水桥晴雪在心里想道：现在毕竟是在人家借住，这种小事能帮还是帮一下比较好。 “雅姐，你帮我拿几个靶子过来，顺便准备一些灭火器” 。 一名一直站在一旁的女佣听到元午的话 之后，就答应道：“好的，少爷。” 在雅姐离开之后， 李永言一屁股坐到了地板， 他有点累了。 看到李永言坐下之后，水桥晴雪也跟着坐下了。 “地上，挺脏的。。” 元午 看到他们的行为之后，开口说道。 “这儿不是每天都有人打扫吗？” 李永言问道。 “那倒也是。” 说完之后，元午也跟着坐下了。 元午平时练完剑就离开这里了，他会回到自己的房间休息， 像这样坐在这里的情况是非常少的。 在一阵沉默之后，李永言开口道：“小午，你是什么时候觉醒异能的？” “75年把，应该是”元午回答道。 “三年了啊，你每天都会练习异能吗？” 李永言继续问道， 而水桥晴雪则只是坐在一边听着。 “那倒不会，我只是偶尔练习一下。 我平时基本会练习不使用异能” “不使用异能？” “是啊，我基本上天天都会练剑，和我的剑术老师对练的时候，如果我使用了异能，那就是作弊，而且可能会伤害到老师，所以我都刻意的不使用异能。” “原来如此” “练剑好玩吗？” “好玩！ 虽然有时候会有点腻，但是大多时间还是很好玩的。” “嗯” “言哥，你平时都在做些什么呢？” “续零啊， 你不是知道吗？” “除了续零之外呢？” “做面包啊，我是开面包店的。” “嗯，店里怎么样，顾客多吗？” “一般般把， 开的是一家小店。” 就在元午想继续说些什么的时候， 雅姐带着几个壮汉进来了， 靶子都太重了，单靠雅姐肯定搬不过来， 所以雅姐找了一些帮手。 “少爷，东西拿来了。” 雅姐看到元午看向她， 她便开口道。 “好的， 放在椅子那边， 依次排好， 每个间隔一米左右就可以了。 ” 元午看到东西来了，便吩咐道。 东西既然来了， 三人就都站了起来。 元午在站起来之后拍了拍屁股，想要打掉一些尘土。 元午本来想让这些男佣拿好灭火器等待着的， 但是这样会泄露水桥晴雪的异能秘密， 所以就让他们都离开了。 “雅姐，你先去休息把， 待会有事我再叫你” “好的，少爷” 一听到元午让自己去休息， 雅姐便离开了。 在目送雅姐离开之后， 元午说道 ”言哥，麻烦你拿好灭火器准备灭火。“ “好的” 李永言拿起一个灭火器之后， 接着说道：“等会儿啊，让我先看看这玩意怎么使用。” “拔掉保险销， 一手拿着喷管， 另外一手在想喷的时候握住开启压把就可以了。” 元午知道该怎么使用这个，于是说出了这个简短的使用方法 。 “拔掉保险销” 李永言重复着元午刚刚说过的话。 然后伸出手拔掉了保险销。 在拿好了灭火器之后， 李永言说道：“等会儿啊，我先试试怎么用的。” 他走近靶子之后，把喷枪对准了靶子， 然后握住了压把。 呲，呲，呲。 灭火器里面喷出了一些不知名物体。 看到这个状况，李永言后退了几步之后说道：“好了，你们开始把。 ” ","date":"2022-06-02","objectID":"/non-menu/story-mirror/24.-%E5%92%8C%E4%B8%99%E5%8D%88%E6%A1%91%E7%9A%84%E9%97%B2%E8%81%8A/:0:0","tags":null,"title":"24. 和丙午桑的闲聊","uri":"/non-menu/story-mirror/24.-%E5%92%8C%E4%B8%99%E5%8D%88%E6%A1%91%E7%9A%84%E9%97%B2%E8%81%8A/"},{"categories":null,"content":"水桥晴雪已经连续睡了将近一天一夜，胃里早就没有了东西，她现在可以说是完完全全的饥肠辘辘。 不过水桥晴雪个子并不高，也不胖，所以就算是很饥饿，也只是吃了4个肉包子，一碗豆浆，之后她便饱了。 在水桥晴雪吃饭的时候，元午也下来了。 元午从电梯出来之后， 走到餐厅，看到水桥晴雪正在喝着豆浆， 便微笑着打了声招呼：“早上好呀，水桥妹妹” 水桥晴雪吞咽掉口中的豆浆之后， 回道： “唔，你好” 水桥晴雪现在嘴唇上和周边粘着白色的豆浆，这让元午觉得水桥晴雪很可爱。 元午随意的拉开了一个座位之后做了下来。 元午并不是一个挑食的人，所以他要了和水桥晴雪一样的内容。 四个肉包子，一碗豆浆，吃完之后，元午感觉自己还是有点饿，于是又要了一根油条。 水桥晴雪吃完饭之后， 擦了擦嘴， 就坐在椅子上， 并没有回到自己的房间里面。 元午看到水桥晴雪吃完了早饭，便开始和水桥晴雪闲聊。 元午首先开口道：“水桥妹妹，你是什么时候觉醒异能的？” 水桥晴雪刚刚完全沉浸在自己的胡思乱想中 ， 听到有话语声之后便看向元午，只是她并没有听清元午再说什么，于是问道：“啊？你刚说啥？” 元午也不生气，只是又重复了一遍刚刚的问话。 “应该是几年前把，具体我也记不清了” 水桥晴雪回答道。 “嗯，我是大约3年前觉醒的， 75年把，应该是。” 元午为了拉进与水桥晴雪的关系，主动的报出了自己的信息。 “。。你也是异能者？” “是啊，等我吃完饭之后就带你去看看” “好啊。 不过你把这么重要的信息告诉我真的好吗？ ” 元午对此到不以为意，他淡淡的说道 “我早就被记录在案了， 所以没关系的” “那实验室的人没有抓你吗？” “他们不敢的” “为啥？” “因为我爷爷是一个很厉害的人物” 哦，原来是有靠山啊，水桥晴雪在心里想道。 又闲聊了几句之后，元午便带着水桥晴雪去了三楼的剑术道场，去看看他的异能。 到了三楼之后， 元午让佣人去叫一下李永言下来， 元午打算正好给他们两个人都展示一下看看。 李永言现在正在调试设备呢，元午送过来的白夜是一台全新未拆封的设备，所以李永言要进行一些登录，设置，软件安装等操作。 他们俩吃饭也没有花太多的时间，李永言现在设备还没有调试好，他就听到有人在敲门。 李永言得知元午要表演一下自己的异能，他表示自己非常有兴趣， 便放下了白夜，跑去了三楼，去观看元午的异能。 元午让佣人找来了几块石头， 每块石头差不多是砖头大小。 这些石头被放到几个没有靠背的椅子上， 整齐的在3楼摆好。 看到李永言来了之后，元午便停下和水桥晴雪的闲聊。 他开口道：“言哥，我打算让你们观看一下我的异能”。 “嗯，我听那个阿姨说了。” 李永言知道自己此行的目的，所以一点也惊讶。 元午递出一柄木剑给李永言，说道：“言哥，你试试砍一砍那边的石头。” 李永言扭头瞄向元午看向的方向，他看到了几个石头。 虽然不知道元午这是何意， 但是觉得这样做也没有什么危险， 所以李永言便走向石头，随后轻轻的砍了砍石头。 石头安然无恙， 什么奇怪的事情都没有发现， 李永言不解的看向元午。 元午开口解释道：“我这么做是为了证明这些石头不是道具” 元午说完之后向着李永言伸手， 示意要回木剑。 李永言愣了一下之后才明白了元午的意思，便把木剑递回给了元午。 元午随手一挥，木剑直接砍入石头之中，木剑和石块的撞击产生了巨大的声响。 这声响让李永言大脑一懵，双眼直接眯了起来。 等待李永言回过神来的时候，元午已经把木剑抽了回去。 李永言看着化作两块的石头，以及石块上整齐的切口，一时无言，不知道该说什么了。 元午看到李永言惊讶的模样，很是满意， 于是开口解释道：“这是我的异能之一，锐利。 我可以劈开很多东西。” 说完之后，元午瞄了眼水桥晴雪。 水桥晴雪因为站的位置稍远，所以对声音的反应不是很大。 而且她自身也有异能，所以对这个结果也没有很大的惊异。 元午接着说道：“现在站远一点” 李永言没有接口，只是默默的后退了几步。 元午看到李永言退开之后，便轻微的拉开了与另一块石头的距离， 随后他有一次随手一挥。 李永言感觉一道气流飞快的划过。 砰！ 一声比刚刚更大的声响划过。 石头和放置石头的椅子都飞了出去，像是被巨力打飞了一样。 椅子已经被切开，石头上则是留着一道切口。 看到这个威力，水桥晴雪这时是有些惊讶了， 这个异能的优势不在于攻击力太强，而在于他是无形的。 看到水桥晴雪的表情，元午微微一笑开口道：“这是我的另外一个异能，剑气”7 ","date":"2022-06-02","objectID":"/non-menu/story-mirror/23.-%E9%94%90%E5%88%A9%E4%B8%8E%E5%89%91%E6%B0%94/:0:0","tags":null,"title":"23. 锐利与剑气","uri":"/non-menu/story-mirror/23.-%E9%94%90%E5%88%A9%E4%B8%8E%E5%89%91%E6%B0%94/"},{"categories":null,"content":"凌晨3.40分，李永言醒了过来。 他睁开了双眼 ，看了看陌生的天花板。 此时，他才意识到自己真的已经离开了家，现在正在别人家里借住。 虽然元午说住多久都可以，但是一直打扰别人也不是一件很好的事情。 如果能安顿好水桥晴雪，那么自己应该就可以回家了。 虽然回到家之后可能会被盘问，但是自己就说不知道，估计警察也没有什么好办法。 平时的他现在已经起床洗漱，然后要去面包店开始做面包了。 但是现在在元午家里，他并不用这么做。 元午昨天晚上说要送一台白夜到李永言的房间里， 但是现在却没有看到， 元午可能忘记了把。 干点什么好呢， 看看电视？ 李永言想道自己已经很久很久没有看过电视了， 于是便打开了电视的遥控器， 音量调的稍微低了一些。 胡乱的看了几个台之后， 李永言觉得电视太无聊了， 于是就又关上了电视。 李永言重新躺好， 然后闭上了眼睛，想要再睡一会。 可是他的大脑里总是乱七八糟的很多东西，完全睡不着了。 李永言翻身侧躺了一会之后， 又翻身向着另外一个方向侧躺。在重复了四五次之后， 他发现自己实在睡不着。 于是，他又打开了电视。。。 早上7点半，李永言听到屋外有人活动的声响，便起床洗漱。 在洗漱完毕之后他走出了房门。 李永言开动房门的声响早就惊动了在过道上的女佣， 女佣看到李永言之后，便提着一台白夜过来了。女佣走到李永言的面前，开口道：“李先生， 这是少爷昨天让我给您的白夜。 昨晚我过来的时候，敲了您的房门，但是您并没有应答，我猜您可能睡着了，就没有继续打扰了。” “哦好，我一般确实比较早睡觉。”李永言接了白夜之后，转身进屋，把白夜放到了床边。 “您现在是否需要打扫一下房屋？” 女佣问道。 “哦，好” 李永言并没有过这种待遇，但是有人愿意打扫自己的屋子的话，还是很方便的。 李永言现在住的屋子是类似酒店宾馆式的，洗漱用品大多是一次性的。 所以再用完之后需要重新补充。 “2楼餐厅已经准备好早餐了” 女佣进了李永言的房间后， 善意的提示他现在可以吃早饭了。 “好的” 李永言乘坐电梯来到了2楼的餐厅处。 此时，已经有一个佣人在餐厅处等待，佣人有一张专门的椅子可以坐下。 这样他们就不用全天站立了。 现在坐在这张椅子上的是一个男佣。 这个男佣看到李永言过来之后，便起身打了下招呼：“李先生，您好。 请问您要吃早餐吗？” “好的，有什么早餐？” “油条，包子，豆浆，三明治” “给我来2个肉包子，1个素包子，1碗豆浆把。” 李永言平时吃包子的次数并不多，这次他打算尝尝看。 “好的，我这就去拿。” 李永言选择了一个靠近桌子部位的座位，拉开椅子，坐了下来。 几分钟之后，那个男佣就带着李永言要求的早餐过来了。 因为食物的量不多， 所以李永言很快就吃完了早餐。 李永言吃完了之后，那个男佣便走过来收拾盘子。 就在这时， 李永言好奇的问道：“这栋楼里面没有其他人吗？” “其他人，是指？” “元午的家人之类的” “这栋楼里面基本上只住着老爷和小少爷，其他人只有在一些节日附近才会过来。” “哦” 李永言表示了解了，随后李永言问道： “那位老爷，是元午的爷爷吗？” “是的” 李永言点了点头， 没有再多说什么。 又坐了一会，并没有任何人下来， 李永言便起身回房间了。 李永言打算回房间去玩玩续零了。他一边盘算着上了游戏要干嘛干嘛，一边乘坐电梯。 就在电梯门打开的时候， 一道香风撞进了李永言的怀里，把李永言撞的后退了两步， 而李永言的眼前则映出一个坐在地上的身影。 原来是水桥晴雪撞进了李永言的怀里， 她刚刚醒来没多久， 便洗漱之后出门了。 由于睡了很久，现在水桥晴雪感觉自己很是饥饿。 在听说2楼有吃的时候，她便迫不及待的冲向了这边的电梯， 而李永言则在走神想续零的事情。 这让两人撞了个满怀之后， 水桥晴雪跌坐到了地上。 李永言在反应过来之后，急忙的把水桥晴雪拉了起来。 水桥晴雪起身之后， 怕了怕屁股上的尘土。 李永言开口道歉道：“不好意思，你有没有事？” “哪里哪里，我才应该道歉， 是我撞了你” 水桥晴雪则比较礼貌的说是自己的问题。 “我要去2楼吃早饭， 你要一起吗？” 水桥晴雪邀请李永言一起去吃早饭。 李永言则回答道：“我刚刚吃完。” “是吗，那真是遗憾” 李永言走出电梯之后， 水桥晴雪便进入电梯去了2楼。 ","date":"2022-06-01","objectID":"/non-menu/story-mirror/22.-%E4%BD%93%E9%AA%8C%E6%9C%89%E9%92%B1%E4%BA%BA%E7%9A%84%E7%94%9F%E6%B4%BB/:0:0","tags":null,"title":"22. 体验有钱人的生活","uri":"/non-menu/story-mirror/22.-%E4%BD%93%E9%AA%8C%E6%9C%89%E9%92%B1%E4%BA%BA%E7%9A%84%E7%94%9F%E6%B4%BB/"},{"categories":null,"content":"现在已经快晚上八点了， 按照李永言之前的作息现在都要睡觉了， 今天因为才刚醒没多久，所以也不想睡觉，就打算来看看元午在干什么。 元午察觉有目光在盯着自己，于是转头看了过去，发现李永言正在盯着他。 看到李永言之后，元午便咧嘴一笑，然后开口道：“来，言哥，这边坐。” 语毕，元午就径直走向一张座椅上。 李永言自然不会反对这样的提议，就走了过去，与元午挨边坐下了。 这里的椅子都是单人沙发椅，坐上去很舒服。 看到李永言坐下之后，元午开口道：“早上的事情把你吓到了把，我爷爷并没有恶意，不要把这件事放在心上” 。 李永言看到元午满是歉意的表情就说道：“没事，你也不用在意。” “嗯” 元午嗯了一声表示了解，然后他接着说道：“如果你没有发我那些照片 ，也就不会发生早上的事情了。” “嗯？ 怎么说？” 李永言诧异的问道。 “其实， 我也是一名异能者。”元午说了一个令李永言目瞪口呆的炸弹。 “啥？ 真的假的？” 李永言很是惊讶，没想到自己和一个异能者一起玩游戏玩了那么久，也没有想道自己距离异能者居然这么近。 “当然是真的，这有什么好骗你的？” 元午答道。 “唔， 这 。。。” 李永言一下子语塞住了。 ”我的异能是剑术相关的，等明天给你演示一下， 你就知道啦“ 元午说道。 “好” 李永言答应道， 接着他又说道：“你把这件事告诉我没关系吗？ 你们异能者不都是要躲起来吗？” “绝大部分异能者是需要躲起来的，不过我不用， 因为我是元家人” “元家人？” “对， 我们现在在的这栋楼是在元街1号，F1区的位置。我爷爷是退休干部，就算是异能者也无所谓的。” “哦。。 元家，我还真没听说过” “我们家都比较 低调，没听说过是很正常的事情。” “嗯” 李永言嗯了一声之后，两人都不再说话。 沉默了两分钟之后， 元午再次开口道：“我让人准备了一台白夜，晚点送到你房间里面” “好” “对了， 你在我家想住多久就住多久。” 元午看向李永言说道。 “那怎么行， 我不能在你家白吃白喝呀” “没事，没事。 多养两个人对我家来说完全不是问题” 元午说完之后不给李永言反驳的机会， 就把话题给转移了 。 “那300金币的事情真的让人无语啊” “是啊，太让人生气了，这官方瞎搞， 下次这类活动我都不打算参加了。” 李永言一听到元午说起那300金币的事情， 马上就跟着转移话题了。 “嗯， 下次要好好确认清楚先。 ” “是啊”， 李永言挠了挠头之后说道：“你在现实中剑术也很厉害吗？” “那当然， 游戏里很多操作我都是照搬的现实剑术” 元午说完之后，就有点技痒难耐，已经很久没有观众看他耍剑了，他想露两手给李永言看看。 于是，元午便站了起来， 走到了道场的中间位置。 李永言看到元午站起来之后， 自己也跟着站了起来。 李永言走到道场的边边之后便站立在那儿。 李永言知道元午在游戏里面剑耍的很厉害，所以对元午的现实剑术也比较好奇。而元午看到李永言好奇的表情，决定自己要耍一套帅一点的剑招。 元午现在手上拿着一把木剑，他先是横斩，然后上挑，然后右手回拉，之后刺出。 这几个动作结束之后， 元午开始了新的动作展示， 并且不光使用上半身， 连下半身也用上了。 两三分钟之后，元午收招表示结束了。 李永言感觉元午的剑还不错，意犹未尽的转身回到座位上。 等元午把木剑放好，回到座位之后，两人又是一阵闲聊。 内容主要是现实中使用剑招和游戏里使用剑招的区别是什么。 元午说游戏里使用剑招更加自在， 由于没有了重力的限制，可以做很多花哨的动作，这些都是现实中做不出来的。 当然，因为是异能者，元午也很喜欢现实的剑术，所以游戏下线之后他大多的时间也用在练剑上了。 等到差不多9点多的时候， 李永言表示自己要睡觉了，便告辞离开了。 李永言回到了4楼， 他走到自己的房门前，就在他准备打开门进去的时候，他突然想了解一下水桥晴雪状态。 李永言便关上了自己的门，去敲了敲水桥晴雪的房门。 咚，咚，咚。 连敲了三下，之后是一阵寂静， 水桥晴雪并没有给出任何反应。 咚，咚，咚。 李永言又敲了三下， 但是水桥晴雪依然没有任何反应。 李永言想道：可能还在睡觉把，明天再了解把。 ","date":"2022-05-29","objectID":"/non-menu/story-mirror/21.-%E4%B8%99%E5%8D%88%E6%A1%91%E5%B1%85%E7%84%B6%E4%B9%9F%E6%98%AF%E5%BC%82%E8%83%BD%E8%80%85/:0:0","tags":null,"title":"21. 丙午桑居然也是异能者","uri":"/non-menu/story-mirror/21.-%E4%B8%99%E5%8D%88%E6%A1%91%E5%B1%85%E7%84%B6%E4%B9%9F%E6%98%AF%E5%BC%82%E8%83%BD%E8%80%85/"},{"categories":null,"content":"李永言一直睡到了下午7点多才醒来，昨天晚上他虽然没有参加战斗， 但是精神一直很紧张，也消耗了很多的身体能量。 李永言起床洗漱之后离开了房间， 回到了二楼之后， 李永言并没有发现元午， 只有一个佣人在二楼等待。 那个佣人看到李永言之后，便开口说道：“您好，请问要用餐吗？” 李永言这个时候确实也饿了，便答应道：“好，麻烦你了”。 “不麻烦，不麻烦” 佣人说完之后就离开了屋子。 李永言走到上午坐过的位子坐了下来， 静静的等待着饭菜。 在等待的过程中，李永言的思维开始发散了起来。 大约3个月之前的时候， 元午邀请过李永言来他家做客， 不过李永言那时候比较害羞，所以就没有面基。 李永言知道元午很富有，但是却没有料到他家里这么豪华，四楼的客房大约有10间，电梯的楼层显示有七层楼。 二楼的餐厅有80~100平方的样子， 厨房可能更大。 想完元午的事情，李永言开始回想昨天晚上的异能 大战， 水桥晴雪一个人打了对面四五个人，很是勇猛。水桥晴雪的黑色火焰无人能敌， 如果不是这黑色的火焰，估计已经被抓走了。 那个使用寒冰的妹子长的还挺好看的，黑长直的头发，五官也很匀称。 由于距离比较远，不能辨别出她的声音是否好听。 没想到捕获小队里面还有这样的人，真的是人不可貌相啊。 发生了很多大的声响，邻居应该也感觉到不对劲了把， 不知道他们有没有看到这些异能人士，也不知道他们有没有报警。 如果水桥晴雪被抓走了， 自己可能也会被抓走 进行一些研究。 就算自己说自己是一个普通人，对方可能也根本不会相信。 “您好，一份七分熟的牛排，一块羊排，一碗白粥，请慢用” 女佣的声音将李永言拉回了现实。 “哦， 好” 李永言应了一声。 李永言平时的伙食大多是其他种类的，这类食物吃的机会不是很多， 虽然不是常吃的食物，但李永言也没有表现出什么。 他打算尝尝看这些食物。 唔，还挺好吃的。 李永言吃了一小块牛排之后，在心里暗道。 既然觉得好吃，那就多吃点。这么想了的李永言切了一块大一些的牛排，放入了口中，咀嚼了几下之后，吞入了腹中。 牛排是煎出来的，羊排则是烤出来的，并且两种肉本身的特色也不一样。 牛排吃了小半之后， 李永言又把目标放到了羊排上。 羊排肉多骨少，李永言切下了一小块羊排 ， 放入了口中，仔细的品尝了一下。 这块肉外焦里嫩，很是美味。富人家的厨子做出来的菜就是好吃啊。 李永言又腾腾腾的连吃三小块羊肉，吃完之后，他喝了一小口白粥。 白粥的味道，和李永言记忆中的差不太多，虽然他已经很久没有喝过白粥了。 品尝完食物的 味道之后，李永言便加快了用餐的速度。 整个二楼空荡荡的，只有李永言的咀嚼声和刀叉碰到盘子的声音。 女佣上完菜之后则是站到了一旁，等待着吩咐。 大概几分钟之后，李永言吃完了饭。 女佣看到李永言用餐完毕之后，便询问道 ：“李先生，是否需要点餐后甜点？” “甜点？ 不用把” “好的，那水果呢？” “有橘子吗？🍊” “有的， 我这就给您拿过来。” “好的 ” 女佣收好盘子，便带着餐具去了厨房， 一小会之后她带着3个橘子回来了。 橘子被整齐的放在了盘子里，女佣使用右手端着盘子进来了。 放下盘子之后，女佣说道：“请用”。 说完之后比她便退到一边站着等待了。 橘子都是中等个头的大小， 李永言感觉自己能吃的下一个，所以拿起了 一个橘子，慢慢的剥开了皮。 李永言将 剥好的橘子放入了口中，轻轻一咬，橘子就爆汁了， 汁水非常浓厚，味道是略甜的感觉， 不酸。这个橘子很是合李永言的胃口。 他三下五除二把剩余的橘子都吃光了。 吃完了一个橘子之后，李永言感觉自己的饱食度已经满了，无法继续进食了，所以停下了手。李永言也是第一次来到元午的家里，现在吃完饭之后，他也不知道该干什么好了。 女佣看到 李永言停手之后，便开口询问道：“请问您吃饱了吗？” “嗯，吃饱了“ ”元午少爷现在在3楼，您要去找他吗？“ “嗯，好” 李永言 应了 一声之后便走向了电梯。 到达了3楼之后， 李永言一眼就看到了元午， 元午现在正在练剑呢， 他拿着一把木剑在唰唰的耍着。3楼电梯正对着一个较大的剑术道场。 ","date":"2022-05-26","objectID":"/non-menu/story-mirror/20.-%E5%8F%88%E4%B8%80%E9%A4%90/:0:0","tags":null,"title":"20. 又一餐","uri":"/non-menu/story-mirror/20.-%E5%8F%88%E4%B8%80%E9%A4%90/"},{"categories":null,"content":"李永言和水桥晴雪在半路的时候进入了一个货车的车厢里，随行的人员说这是为了躲避监控，两人确实需要防止被追踪， 躲在车厢里面确实可以防止被摄像头拍到，所以两人就同意了这个做法。 F 区除了 F5区没有监控之外，其他的区都是具有监控的。 到了丙午桑的家里， 两人出了货车车厢之后都吓了一跳， 因为此时有一队武装人员正在持枪对准他们。 李永言下意识的感觉自己被丙午桑出卖了。 事实上，丙午桑并没有出卖李永言，这些人都是丙午桑的护卫而已。 丙午桑看到李永言之后就开口道：“言哥，你别害怕，这些人没有什么恶意的。” 听到熟悉的声音之后，李永言辨认出了一个开口的人，那个人大约180厘米的身高， 中等身材，属于不胖不瘦的那种。 丙午桑说完话之后，就走到了李永言和水桥晴雪的面前。 丙午桑仔细的打量着水桥晴雪一小会儿之后，开口说道：“你就是会放火的那个女孩？” 李永言知道水桥晴雪 有一点怕生， 对方现在有大约10个人都在持枪对准自己， 李永言怕水桥晴雪会激怒对方，到时候自己可没好果子吃。 于是，李永言开口了：“对， 她叫水桥晴雪。” 丙午桑说道：“你现在可以使用异能给我看看吗”。 水桥晴雪狐疑的看着丙午桑，并不能确定丙午桑让她使出异能是何用意。 丙午桑看到水桥晴雪的表情，便开口解释道 ：“不是为了研究你， 只是想确认一下你确实会使用异能。” 听到这话， 水桥晴雪稍微放松了一点。 她和李永言对视了一眼之后， 水桥晴雪随手生成了一簇火焰出来。 火焰在水桥晴雪的手上不断的跳动着。 丙午桑看到之后啧啧称奇， 随后用手轻微的靠近了一下火焰， 感受到火焰的温度之后， 便把手收回来了。 丙午桑接着开口道：“你们都看见了，这是一位货真价实的异能者， 去和爷爷报告去吧。” 这些武装人员听到丙午桑的话之后，只留下了2个人，其他人都离开了。 这留下来的两个人也都把枪收了起来。 威胁解除， 李永言也慢慢放松了下来。 丙午桑开口说道：“言哥， 你也别怪我， 爷爷是一个小心谨慎的人。 ” 丙午桑接着说道：“正式介绍一下，我叫元午。” “李永言” 李永言也自我介绍了一下， 随后两人握了握手以示友好。 丙午桑接着伸出手，看向水桥晴雪。 水桥晴雪则笨拙的和丙午桑小小的握了下手。 正事弄好了，丙午桑接着说道：“你们现在舟车劳顿，应该很累了把。 我在2楼准备好了饭菜，吃一下再去休息把？” 李永言感觉了一下， 自己确实有点饿了，于是看向水桥晴雪，而水桥晴雪此时也在看他。 两人相视一笑之后，李永言说：“好， 听你安排。” 三个人，外加两个警备人员，此时在负二楼的停车场里面。 丙午桑带头走向电梯， 李永言和水桥晴雪则跟着他， 而两个警备人员则吊在最后的位置。 几人来到2楼，几个转弯之后到达了一张大餐桌前面。 丙午桑很随意的拉开一个椅子，边坐边说道：“随便坐，像在自己家里一样就可以。” 李永言和水桥晴雪两人坐到丙午桑的对面。 丙午桑看到两人都入座之后，便从桌子下面拿出了一个遥控器，按了一下上面的按钮。 由于视线有阻挡，李永言并没有看到丙午桑是从哪里掏出来遥控器的。 大于2分钟之后， 一个佣人推了一辆餐车进来。 在佣人上菜的时候，丙午桑一边介绍着菜式。 “去头清蒸鲈鱼半条” “红烧狮子头2个” “鸡肉小炒一份” “番茄蛋汤一碗” “白米饭一碗” “不够吃可以加饭，加菜当然也可以。” 丙午桑说完之后就开动了。 为了让两人放心， 丙午桑吃的是和他们两个一样的饭菜。 本来的话， 丙午桑早上是不会吃这么油腻的东西，只是为了照顾两人，才选择了这样的菜式。 丙午桑报的菜单是每个人都有一份的，各个菜是独立装盘的。 李永言很是饥饿，所以吃的很快， 狼吞虎咽的。 不过李永言属于偏瘦的那种体型， 所以将全部的东西吃完之后，基本上就撑了。 李永言并不是没有考虑下毒的可能性，只是觉得对方完全没有必要这样做，如果对方要下手的话，自己早就挂了很多回了。 水桥晴雪本来还没有什么感觉， 但是看到这些菜饭端上来之后，就感觉十分的饥饿。 想必是昨晚的大战消耗了太多的能量，现在十分需要补充能量。 水桥晴雪也没有客气，腾腾腾的干了两碗饭才算结束。 两人吃完之后，丙午桑便带着他们去了房间。 客房在4楼， 水桥晴雪住在401， 而李永言则睡在隔壁402房间里。 水桥晴雪和李永言都深感劳累， 水桥晴雪趴到床上没有 多久就睡着了。 李永言则是先洗了个澡之后，再入睡的。 丙午桑看到他们两个人都安顿好了之后，便回到自己的房间， 拿起了白夜，开始玩续零了。 ","date":"2022-05-23","objectID":"/non-menu/story-mirror/19.-%E5%88%B0%E4%B8%99%E5%8D%88%E6%A1%91%E5%AE%B6%E9%87%8C%E5%81%9A%E5%AE%A2/:0:0","tags":null,"title":"19. 到丙午桑家里做客","uri":"/non-menu/story-mirror/19.-%E5%88%B0%E4%B8%99%E5%8D%88%E6%A1%91%E5%AE%B6%E9%87%8C%E5%81%9A%E5%AE%A2/"},{"categories":null,"content":"两人走到了 F4区的湖边，发现有一条打着灯的小船在湖边等待， 李永言走过去之后，那人掏出手机，打开一张照片，对比了一下之后便对李永言说上船把。 两人上了小船，小船驶向了一辆大船，换上了 大船之后， 又换到货车车厢里面， 一番折腾之后，李永言和水桥晴雪才到了丙午桑的家。 在 F3区实验室的一间办公室里面，夏叶正在编写着行动报告， 现在已经将近凌晨一点钟了，夏叶浑身大面积的轻度烧伤，头发也被点燃了不少。 夏叶是火系捕获小队的队长 ，经常碰到烧伤的情况， 所以现在也没有感觉到很疼痛。 夏叶提交的行动报告内容是： 行动代号： 雪冰 行动时间： 2078年3月23日， 星期三， 23点 行动状态： 失败 参与人员： 夏叶，竹乐，程义，杞寒烟，青蝶 损坏物品： 一间民住房 行动过程： 在处理好水源之后，夏叶直接进行正面攻击， 目标 具有强烈的反抗意识， 不接受捕获。 夏叶只好下手与目标进行对抗，在使用 车轮战的战术之后，青蝶出面，成功的压制了目标的异能。 但是目标可以使用出一种黑色的火焰，该火焰的温度极高，无人可以正面抗衡。 在夏叶提交了任务报告之后， 他的 telegram聊天工具弹出了一个提醒，汤总队长让夏叶到他的办公室一趟。 夏叶离开自己的工位，走到了汤总队长的办公室门前， 敲了敲门。 “请进” 汤总队长深沉的声音传了过来。 夏叶打开门走了进行，开口打了声招呼：“总队长” “嗯”汤总队长嗯了一声，算是回应。 之后，他便开口道：“夏叶，这次行动我全程看了视频。失败也是没办法的事情， 不过我还是想听听你的说法” “嗯？ 关于哪个的说法？” “黑色的火焰” “嗯，正如我在报告中提到的，该火焰温度极高，基本上无法正面抗衡。 我们捕获小队的基本方针是消耗，打车轮战。 等目标的异能消耗完毕，变成普通人的时候，就可以进行捕获了。 但是这黑色的火焰，我们完全耗不过。” “嗯，你觉得再加几个人能不能对付得了她？” “很难说，现在的情报太少了。 青蝶的异能对黑色火焰也没有办法，与青蝶类似的异能应该也没有什么办法。” “嗯”汤总队长轻嗯了一声，表示知道了。 这时，汤总队长的电话铃声响起了， 汤总队长拿起电话，没有说话。 电话那头响起了声音：“总队长，目标离开了住所，上了F4区的一艘小船，我没有办法继续追踪了。” 汤总队长辨认出这是元咏志的声音，在夏叶的行动失败之后， 汤总队长便马上让元咏志出发，去监控屋子了。 “好，收队把。” 对于捕获失败，追踪失败，汤总队长并没有多说什么，这基本上都是因为对方太厉害了，也是没有办法的事情。 “夏叶，你先回去休息把， 已经不早了。” “好” 在夏叶离开了办公室 之后， 汤总队长拿起电话，拨了内线号码100 ， 响了几声之后并没有人接通。 于是，汤总队长便留了个言： “将北方街16号，若水街22号都查封了” 李永言和水桥晴雪上了船之后还是很紧张。 李永言虽然在游戏中和丙午桑关系甚好，但是他并没有去过丙午桑的家里，此时也是非常紧张的。 现在只能万事依赖水桥晴雪了， 她的异能是保护自己和她的最好手段了。 李永言并不知道水桥晴雪的异能已经消耗的所剩无几，除了黑色火焰之外， 她的普通火焰也就剩下3个火球左右的量了。 水桥晴雪此时是比较依赖李永言的，她现在相信李永言 做出了一个正确的决定。 李永言认为呆在家里不是一个很好的选择，明天他们可能就会卷土重来， 那时还水桥晴雪还能不能抵挡住他们是一个问题。还有另外一个问题就是，现在这几个人的战斗就已经把自己家的大门给打烂了， 而且不少电器也都被破坏了。 电器可以重新购买，所以现在的损失也还好。 但是如果明天来了更多的人，把自己的屋子打碎了的话， 那就不好了。 修缮房屋可是一笔很大的支出。 李永言并不担心有人偷偷的溜进自己的房屋进行行窃，因为这个国家的国民素质还是挺高的，更重要的事情是，这个国家的福利很好， 基本上没有人需要行窃。 在一番费劲的折腾之后，李永言都快心生退意了，终于，他和水桥晴雪来到了丙午桑的家里。 ","date":"2022-05-12","objectID":"/non-menu/story-mirror/18.-%E4%BB%BB%E5%8A%A1%E6%8A%A5%E5%91%8A-%E9%9B%AA%E5%86%B0/:0:0","tags":null,"title":"18. 任务报告： 雪冰","uri":"/non-menu/story-mirror/18.-%E4%BB%BB%E5%8A%A1%E6%8A%A5%E5%91%8A-%E9%9B%AA%E5%86%B0/"},{"categories":null,"content":"水桥晴雪刚想抬步回屋休息一下，就感觉自己对身体失去了控制，一下软到在地，陷入了昏迷。 李永言在卧室里几乎看到了外面的一切， 他看到现在水桥晴雪栽倒之后， 并没有急着出去，而是静静的等待几分钟之后，发现那群人确实离开了之后，才打开门出去。 客厅已经一片狼藉，电视机被砸坏了，笔记本电脑摔成了两截，整个屋里湿漉漉的，部分墙壁还有火燎的痕迹。 消防车被毁坏了，那群人也走了，现在的外面已经没有了灯光。 李永言家里并没有手电筒，所以使用了手机的手电筒功能， 这个比原生手电筒的灯光要弱一些。 李永言走到了外面， 看到了两辆已经损坏的消防车，消防泵已经不再向上喷水， 不知道是水已经空了，还是更远的开关被关掉了。李永言还看到一些冰渣，断裂的冰柱，想必这些冰到了早上也全部都会化成水把。 李永言把水桥晴雪抱进了屋里的沙发上，水桥晴雪现在已经昏迷， 丝毫没有意识的样子。 她的全身现在很烫，李永言不知道原因是什么，所以就拿了条毛巾，湿水后放到了水桥晴雪的额头上。 处理好水桥晴雪之后， 李永言坐到椅子上，开始思量后续的生活方案。实验室的人已经发现了这里，今天他们虽然撤退了，但明天很可能还会有人过来。现在需要转移一下位置，最好能找一个他们没有发现的地方，躲一段时间。 或者自己丢下水桥晴雪不管， 让实验室的人抓走她？ 只要说出自己是被胁迫的，就算被抓了，应该也判不了多久把。 但是实验室的人似乎都不算好人啊，在水桥晴雪失去反抗能力的时候，还虐待她。 当水桥晴雪重新拿到掌控权的时候，也没有过度伤害对方。 要不然，先试着保护一下这个女孩再说 ？ 那就试着逃跑一下把， 如果被抓住也是没办法的事情， 李永言打定了主意，那开始考虑躲哪里比较好。 旅馆肯定是不行的，刚刚跟过来的人是有消防员的，这说明政府很可能是支持他们的， 如果去旅馆的话，一定会被查到，面包店也同理。 思来想去，李永言觉得只有一个地方可以尝试一下了，否则只能去旅馆或者在家里等死了。 李永言掏出手机， 打开聊天软件，找到丙午桑之后，开始了对话：“小午，我记得你家挺大的？” 过了一会，丙午桑发来了回复：“是的啊，等会儿啊言哥，我在刷 BOSS” 李永言瞄了一眼时间，现在已经将近12点了，没想到这家伙还在玩续零， 他也是重度的网瘾少年啊。 5分钟过后， 丙午桑发来了消息：“怎么了言哥，要来我家玩吗？” 李永言回复道：“我确实想去你家玩几天，还会有另外一个人同行， 不知道方便不方便？” “另外一个人？ 男的女的？” “女的” “哈？度蜜月吗？” “不是，说来话长。 在说之前， 我先问你 一个问题， 你相信这个世界上有人可以空手放出火焰吗？” “当然不信啦” “我以前也不信，直到我碰到这个小妹妹。” 说完李永言拍了几张照片发给了丙午桑。 丙午桑看了之后回复道：“这些都是真的吗？” “当然了，就在我家这里发生的，你也看到了，我家的大门都被打飞了” “这，我要问下我爷爷， 言哥你等会啊。” 又过了十分钟之后，丙午桑回复道：“爷爷说可以过来玩， 我记得你住在 F5区来着？” “是的，F5区北方街16号” 丙午桑说道：“你们走到F4区的湖边， 会有人把你们接走。” “好，我们现在就出发。” 李永言看了看水桥晴雪，觉得有点头痛， 李永言是一个偏中等的体型，抱起一个女孩子走几步是完全没有问题的，只是从李永言的家到 F4区的湖边距离很远， 李永言感觉自己撑不住，如果水桥晴雪能醒来就好了。 就在李永言这么想的时候，水桥晴雪悠悠醒来了。 水桥晴雪恢复意识之后，猛然睁开了双眼， 环顾四周之后，看到李永言在身边， 而且身边还是熟悉的场景，便慢慢的放下了心。 “他们都走了”李永言开口道。 “抱歉， 把你的家弄的很乱”水桥晴雪开口道歉道。 “没事，家具坏了可以再买。 我家已经暴露了， 我要带你去我的一个朋友那边” “朋友？ 可靠吗？” “不知道，应该可靠把。 呆在我家的话， 他们下次估计会带更多的人手。” “嗯，也是。” 水桥晴雪又躺回了沙发：“你为什么要帮我？” “你不是给我下了诅咒吗？” “啊，那个啊，那个是。。 逗你玩的”水桥晴雪说完轻笑了起来。 “居然是假的，我还担心了好几天。。” 休息了几分钟，李永言开口说道：“走把，我们要出发了” ","date":"2022-05-11","objectID":"/non-menu/story-mirror/17.-%E5%AF%BB%E6%89%BE%E6%96%B0%E7%9A%84%E4%BC%91%E6%81%AF%E7%82%B9/:0:0","tags":null,"title":"17. 寻找新的休息点","uri":"/non-menu/story-mirror/17.-%E5%AF%BB%E6%89%BE%E6%96%B0%E7%9A%84%E4%BC%91%E6%81%AF%E7%82%B9/"},{"categories":null,"content":"听到夏叶的冷哼声，水桥晴雪知道自己不能再心软了，这个人是下了决心要捕获自己。 水桥晴雪凝结出一发黑色火球， 将它缓慢的推向消防车。 正在密切关注战场的消防队员看到这一幕，纷纷急忙的逃出了消防车， 紧紧的远离了消防车。 夏叶看到水桥晴雪攻击了消防车之后， 也不明白为什么她要这么做。 不过消防车有爆炸的风险， 所以夏叶也是快步远离了消防车。 现在消防泵被之前被水桥晴雪破坏了， 水流不断从消防泵中激射出来， 就算消防车毁坏了，还是能操作水资源， 所以夏叶没打算保护这辆消防车。 由于无人保护，火球很轻易的击中了消防车。 水桥晴雪瞄准的是消防车的燃油箱，被火球击中之后，消防车直接砰的一声炸了。 一股大的气流席卷而出，吹得水桥晴雪头发乱飞。 所有人都与那辆消防车保持了距离，所以没有人受到伤害。 水桥晴雪在心里想道：这是最后一次警告， 如果他们执意要捕获自己，那么只能给他们点颜色看看了。 消防车被炸的升空10厘米，然后又重重的落下，发出了另外一次砰的响声。 消防车车上的大灯现在也灭掉了，另外一辆离得稍远一点的消防车开着大灯照向这边。 现在可以很明显的感觉到光线已经不足了。 竹乐和程义气喘吁吁的到达了这边的现场， 他们在稍远的地方也注意到了消防车的爆炸，他们也是一阵的惊吓。但是为了保住工作，即使被吓着了，也要硬着头皮过来看看到底是什么情况。 “队长，现在是什么情况” 程义跑到夏叶身边之后开口问道。 水桥晴雪只是冷冷的看着，并没有再接着动手。 “目标能够使用一种威力奇大的黑色火焰，一定要小心躲避这种火焰。 青蝶的异能对目标无效。” 夏叶简单的说了一下目前的情况。 随后，夏叶对竹乐说：“小乐， 你去把杞寒烟叫过来，我们要一起动手。” 竹乐奥了一声之后就快步离开了， 杞寒烟正在稍远一点的地方休息。 虽然她听到了消防车爆炸的声音，但是她还是没打算过去， 她觉得有点太危险了。 听到竹乐说队长叫她过去， 她只好不情不愿的到达了现场。 夏叶看到竹乐和杞寒烟到了之后，便吩咐到：“小乐，你和程义一组从右边攻击， 我在中间， 杞寒烟你在左边攻击。” “收到” 几人异口同声的回答道。 水桥晴雪实在不愿伤害他人， 但是对方如此逼迫，也只好应战了。 夏叶随手一招， 消防泵上的水就像是受到引导一样流向了夏叶所在的位置。夏叶这次没有操作出水球， 而是直接让巨大的水流冲向水桥晴雪。 竹乐凝结出一个巨大的水球， 由程义操作水球，使之砸向水桥晴雪。 由于消防泵的水流被夏叶使用了， 杞寒烟只要吩咐另外一辆消防车， 让他们送水过来。 在送水的期间，杞寒烟只能等待。 两股水流向着水桥晴雪激射而来，水桥晴雪右手一挥，黑色火焰上升，形成了一面火墙。水流进入火墙之后便变成了水蒸气，没有一丝水流可以穿越火墙。 现在的光线比较昏暗，并不能很明显的看到水蒸气。 空气中不断的传出呲呲声，说明对抗十分的激烈。 就这么僵持了十多秒之后，夏叶停下了攻击，因为他的能量快耗尽了。 竹乐和程义的联手进攻还在持续，水桥晴雪将火墙收起了一部分。 完好的那辆消防车现在给杞寒烟供水， 杞寒烟发动异能，生成了几个冰锥，投射了过去。 注意到冰锥的水桥晴雪，随手一挥 ，黑色箭矢出现，对准冰锥也投射了过去。 冰锥完全无法抵挡火焰箭矢，一个照面就变成了水蒸气， 箭矢还在继续向前飞去。 杞寒烟急忙像旁边躲闪而去， 这黑色的火焰实在太厉害了，杞寒烟深感完全不是对手。 有一只箭矢击中了这辆消防车的燃油箱，杞寒烟注意到这个事情的时候已经有点晚了，匆忙之下，仅仅生成了一个冰面挡在自己的身前。 由于靠的很近，杞寒烟被爆炸的气流正面击中，冰面只抵消了一小部分的动能。 杞寒烟被击晕了。 消防车爆炸的声音很响，夏叶 ，竹乐，程义的目光都被吸引了去。 “杞寒烟！” 夏叶看到杞寒烟被炸飞之后陷入了昏迷，急得大声呼喊她的名字。 陷入昏迷的杞寒烟根本听不到夏叶的呼喊声。 水桥晴雪感觉自己的普通火焰又回来了，于是直接再次点燃了夏叶的衣服。 夏叶这次痛的嗷嗷乱叫， 程义急忙的给夏叶灭火。 夏叶现在几乎完全没有了能量， 使不出异能来了，只能依赖程义的水资源灭火。 “队长，撤退吗？” 竹乐感觉这次任务肯定是失败了， 所以开口询问道。 就在竹乐询问的时候，水桥晴雪丢了几个火球过来， 普通的火球具有耀眼的光芒，和黑色火焰不一样。 看到火球过来，程义急忙使出水墙挡住火球。 “好，撤退把。”夏叶不甘心的说道。 目前自己这边失去了两个战力，而且这黑色 火焰怎么都料理不了，再打下去可能要交代在这里。 竹乐扶起夏叶，程义凝结水墙挡在中间，3人不断后退。 水桥晴雪看到他们撤退后便没有出手阻拦， 程义抱起杞寒烟后，四人便撤退了。 ","date":"2022-05-11","objectID":"/non-menu/story-mirror/16.-%E4%BB%96%E4%BB%AC%E6%92%A4%E9%80%80%E4%BA%86/:0:0","tags":null,"title":"16. 他们撤退了","uri":"/non-menu/story-mirror/16.-%E4%BB%96%E4%BB%AC%E6%92%A4%E9%80%80%E4%BA%86/"},{"categories":null,"content":"水桥晴雪现在肚子挨了一发水桥，一次踢击，头部挨了一次踢击，全身极其疼痛。 捕获人员正在走向水桥晴雪，而就在此时，水桥晴雪身上突然散逸出淡淡的黑色的火焰， 这些火焰好像不受水桥晴雪操控，它们只是自然的散发出来，向着四周弥漫开来。 一名捕获人员停下了脚步，迟疑的说道：“是不是有什么东西出现了？” 他的其他同伴听到他的话，也停下了脚步。 仔细的观察着水桥晴雪， 现在黑色的火焰越来越明显了，他们几人知道事情可能还没有结束，便全部都后退了而去。 夏叶听到话语之后也在观察水桥晴雪， 他看到这异象之后问道：“这是怎么回事，你不是把她的异能给消除了吗？” 青蝶不满的回答道：“我刚刚确实打中她了，不然她也不会变成现在这个样子。 至于这些黑色的火焰，我也不知道是什么” 夏叶皱了皱眉头，事情好像往不妙的方向发展了。 不过等一会儿竹乐和程义应该就会过来，我们几个人联手应该拿的下她。 夏叶没有继续深思，而是控水形成了一个水球，向着黑色火焰丢去。 水球距离黑色火焰的位置越来越近，水球并无异象，只是水球碰撞到了黑色火焰之后，接触的部分直接转换成大量水蒸气，水蒸气也是一会就消失不见了。 似乎这黑色的火焰比先前的火焰要厉害更多，应该是温度要高很多， 不然也不能那么快的就把水球变成水蒸气了。 黑色的火焰蔓延到一定的范围之后便停止了，水桥晴雪仍然躺在地上，捂着肚子， 她似乎没有发现现在的状况。 夏叶转换了一下思维，他决定直接攻击水桥晴雪，无视这些黑色火焰。 夏叶凝结了一个水球，以一个不算很快的速度射向水桥晴雪。 水球经过了黑色火焰的上空时，水球并没有什么变化， 等到快要击中水桥晴雪的时候，黑色火焰突然升腾而起，一下子包裹住了水球， 水球瞬间变成了大量的水蒸气，之后消失不见。 青蝶也尝试了一下攻击，一发人返再次击中了水桥晴雪的身体， 黑色火焰对人返的能量并没有任何阻拦，只是人返打中水桥晴雪的时候，黑色火焰也并无变化。 青蝶现在也有点纳闷了， 不知道到底是怎么了。 “现在该怎么办？”青蝶开口问道。 “让我想想”夏叶一时间也不知道怎么办才好， 这黑色的火焰着实棘手。 就在夏叶进行思考的时候，水桥晴雪的疼痛减弱了很多， 她现在站起来了。水桥晴雪虽然不知道自己是怎么获得这些黑色火焰的，但是她明显感觉和这些黑色火焰很亲密，可以指挥它们。 水桥晴雪现在无法使用普通的火焰了，人返的能量抑制效果还在，所以她打算使用黑色火焰攻击试试看，而且她也想知道黑色火焰的威力如何。 水桥晴雪凝结出一只黑色的箭矢，使之射向夏叶。 夏叶看到黑色箭矢的时候就感觉到不妙，于是凝结了三道水墙以保护自己。 箭矢的威力十分巨大，更准确的说是温度十分的高，它一下就洞穿了三个水墙，到达了夏叶面前。 夏叶看到箭矢穿过第一个水墙的时候，就侧蹲了下来，堪堪躲过了箭矢。 箭矢射到了夏叶身后的消防车身上，由于能量的消耗，箭矢只在消防车上面留下了一个黑色的痕迹，并没有洞穿过去。 青蝶看到这个场面吓坏了，这黑色的火焰温度奇高，如果射到自己身上，恐怕一下就殒命在此了。青蝶不像夏叶可以操作水资源，她的异能在这种情况下，可以说是一点儿作用都没有，于是青蝶直接开溜了。 水桥晴雪看到这个效果，微微一笑之后便恢复了平静。 水桥晴雪并没有杀过人，也无意杀人，她只是想要一个平静的生活而已。 目前黑色火焰的威力太大了，如果打到人身上，估计打到的部位会直接化成灰烬。所以目前的状况有些难以处理。 杀了夏叶，有违水桥晴雪的道德观，不杀夏叶，今天可能哪也去不了了。 水桥晴雪尝试性的开口道：“现在离开，我会当做什么也没有发生过。” 夏叶听了之后直接咧嘴一笑：“你以为你胜券在握了， 是吗？” 水桥晴雪听了之后有点失望，但自己的生命更为重要，如果误伤了他也是没有办法的事情。水桥晴雪警告道：“我小的时候， 还没有被实验室抓走的时候，我妈妈曾经教导过我，每个人都需要对自己的行为负责。想必你已经做好心理准备了。” 夏叶冷哼了一声作为回应。 这次捕获到水桥晴雪的位置实在是运气，如果让水桥晴雪溜走了，她肯定会有所防备，那样就很难再次捉到她了。 杞寒烟应该已经休息完毕了，待会了程义和竹乐也会过来，我们4个人联手，应该打的过她把。 ","date":"2022-05-10","objectID":"/non-menu/story-mirror/15.-%E9%BB%91%E8%89%B2%E7%9A%84%E7%81%AB%E7%84%B0/:0:0","tags":null,"title":"15. 黑色的火焰","uri":"/non-menu/story-mirror/15.-%E9%BB%91%E8%89%B2%E7%9A%84%E7%81%AB%E7%84%B0/"},{"categories":null,"content":"水桥晴雪向右侧跑动躲过了这次攻击，冰柱撞击到地面之后产生了大量的冰渣，有少许冰渣打到了水桥晴雪的裤子上。 夏叶此时已经更换好了衣服，更换的是消防员备用的衣服。 然而他全身皮肤受到高温刺激，已经有了少许烧伤的痕迹，现在全身的皮肤还隐隐作痛。 他已经将自己的全身都打湿了，这样确实令他好受了一些 ，但还是会时不时的疼痛一下。 夏叶叫上青蝶一同到达了李永言家的大门口，夏叶对青蝶说：“现在应该耗的差不多了，你看准机会便可以动手了，记得不要 打到自己 人”。 “知道了” 青蝶回答道。 “队长，换人换人 ” 杞寒烟看到夏叶过来之后，大声喊道。 凝结 大冰柱，并丢出去消耗了杞寒烟大量的 能量，杞寒烟认为她只是在打工而已，没必要把自己折腾的很累。所以开口像夏叶进行求助。 夏叶看到现场一大堆碎冰和好几个半截的冰柱 ，便接口道：“好， 你先去休息休息把。” 夏叶现在根本没有心情和水桥晴雪废话，直接操作消防泵上方的水资源，凝结成了几个水球，向着水桥晴雪扔去。 夏叶现在的能量消耗也不少，他现在的想法就是使用水球骚扰水桥晴雪，让青蝶找机会封住水桥晴雪的 异能。如果自己 的能量消耗 殆尽之后还没有捕获水桥晴雪，那便只能叫 竹乐和程义到正面来了。 水桥晴雪的能量目前也消耗了不少 ，她自己也觉得有点不对劲，按照以前 的时候，她现在应该已经没有能量了才是。 现在却感觉能量虽有所使用，但是余量也很多。 水桥晴雪看到水球飞来，直接几个火球丢了过去。 准头还算可以，所有的火球都成功的撞击到了水球，一大片水蒸气升腾而起。 水桥晴雪刚刚躲避杞寒烟的冰柱时使用大量的体力，所以现在有点累了，就懒得躲水球了，而是选择直接硬拼。 夏叶看到水球被拼掉也没有太多反应，继续凝结水球丢过去，夏叶心里想的是纠缠住水桥晴雪就好了。 水桥晴雪在青蝶出来的时候就注意到她了，只不过现在腾不出手，只能先无视她。 杞寒烟这会已经到指挥室休息了，正在观战。 水桥晴雪还是选择了硬拼，同时 生成了几只箭矢射向夏叶， 而夏叶也使用了老办法，水墙。 就在两人都没有注意的时候， 青蝶伸开双手摆放在胸前， 左手大拇指靠近右手大拇指，左手食指靠近右手食指，中间形成了一个三角形△空隙。 “人返”青蝶在心里默念道。 一道能量从缝隙中直穿而出，打到了水桥晴雪身上。 水桥晴雪此时的注意力基本都放在夏叶身上，没有注意到青蝶。 而且青蝶发出的这道能量无形无味，基本上算是隐形的，很难注意到。 夏叶又是几个水球丢了过去， 现在的水桥晴雪已经无法使用火焰了。 还没明白到底怎么回事的水桥晴雪被水球击中，全身都被打湿了。 看到这种状况，夏叶知道是青蝶发动了异能， 于是赞叹道“干得好，青蝶”。 青蝶点了点头算是回应了。青蝶不是直属于夏叶的小队成员， 而是在常规捕获小队， 现在只是空降过来进行支援的。 水桥晴雪自然也听到了夏叶的话语，知道现在的问题出在了这个叫做青蝶的女人身上。 不知道这个女人使用了什么方法， 自己使用不出异能了。 水桥晴雪感觉自己的能量还有剩余，只是火焰不听使唤，无法召唤出来，也无法操控火焰了。 夏叶凝结了一发强力水球打在了水桥晴雪的肚子上，水桥晴雪还有点发愣，躲闪不及被击中了。水桥晴雪被水球的动力带着后退了几步。 肚子的位置传来巨大的疼痛，水桥晴雪痛的只得蹲下身体，紧紧的抱住肚子。 夏叶走过来，一脚踢在了水桥晴雪的头上，将水桥晴雪踢倒在地。 无法使用异能的水桥晴雪只是一个16岁的小女孩而已，她基本上无法反抗大约30岁的夏叶。 “刚刚不是挺狂的吗，现在怎么起不来了” 夏叶 开始了冷嘲热讽，身体某处又传来了一阵隐痛，皮肤应该被烧伤不少， 不知道什么时候能恢复。 夏叶又是一脚踢到水桥晴雪的肚子上， 水桥晴雪痛的一声大喊。 李永言在卧室里已经把现在的状况尽收眼底，只是他认为自己现在什么也做不了。作为一个普通人，去挑战一个可以操作水资源的异能人士，实在不是明智之举。 而且他现在自己也吓得不清，他也是第一次碰到这种场面。 夏叶感觉差不多了，便吩咐道“安装上遥控炸弹，只要她发动异能就炸她。” “是”几个没有异能的捕获人员走到前面，准备给水桥晴雪安上遥控炸弹。 青蝶的异能并不是永久的让异能消失，只能短暂的让一个人使用不出异能，所以需要些防范措施，让水桥晴雪可以听话。 夏叶拿出对讲机说道：“小乐，程义，到前面来把，已经成功捕获目标了。” “好的，队长” ","date":"2022-05-10","objectID":"/non-menu/story-mirror/14.-%E5%A5%B9%E8%A6%81%E8%A2%AB%E6%8D%95%E8%8E%B7%E4%BA%86/:0:0","tags":null,"title":"14. 她要被捕获了","uri":"/non-menu/story-mirror/14.-%E5%A5%B9%E8%A6%81%E8%A2%AB%E6%8D%95%E8%8E%B7%E4%BA%86/"},{"categories":null,"content":"杞寒烟面对这些箭矢的时候，选择了和夏叶类似的套路。 先将水凝成一个巨大的冰面， 然后挡在自己的身前。 咚，咚，咚！ 三声响声。火焰箭矢在打在了冰面上，随后消失不见。 少量的冰融化成了水，滴滴答答的流到了地上。 虽然这次也没有取得成果，但水桥晴雪还是决定再尝试几次。她左手向前伸直且四指并拢并张开，右手像捏了一支箭一样，从左手拇指与食指的空隙中拉出。她松开右手拇指与食指，又是3只火焰箭矢，从她的左手间隙中射出， 这次三支箭矢呈一条线射出。 咚咚咚，又是三声响声，杞寒烟的冰面被火焰灼烧出了一个小洞，只不过最后一直箭矢也没有穿越过去。 在面对水流的时候，这个方法很难取得成效， 因为水会流动，但是冰却不会流动，所以还是取得了一定的成果。 看到这个小洞之后， 杞寒烟立马放弃了这块冰面，并打算如果水桥晴雪 再次使用箭矢的话， 就重新弄一块冰面。 水桥晴雪看到冰面被丢掉之后就向前走了两步。 而杞寒烟看到水桥晴雪向前走了两步之后，就选择了后退两步。 虽然杞寒烟并没有完全看到水桥晴雪是怎么把夏叶的衣服给点燃的，但是想必离她远点应该可以防止这个问题。 杞寒烟和夏叶不太一样的地方在于，杞寒烟对陌生人没有太多话语，所以她和水桥晴雪没有说一句话。水桥晴雪对实验室的人都极其反感，所以也没有说半个字。 水桥晴雪本来是打算点燃杞寒烟的衣服的，看到杞寒烟后退两步，水桥晴雪就知道自己的计划落空了，只能暗道可惜。 “用水喷她”杞寒烟向着消防员吩咐道。 消防员听到吩咐之后自然不敢怠慢， 迅速调整了出水口，使之对准水桥晴雪。 现在在室外，没有多少可以用于抵挡水的东西，水桥晴雪没有办法，只能后撤。 消防栓的水压很高，可以喷射出很远的距离，而且水速也不低。水桥晴雪一时间没有及时退出去， 被淋成了一个落汤鸡。 杞寒烟直接抬手对准水桥晴雪，一道无形无味的能量发射了出去，打在了水桥晴雪的身上。 水桥晴雪直接全身结上了冰，变成了一个冰雕。 “好耶！”一个消防员看到这个情况，很高兴的呼喊了起来。 “别大意，继续放水。” 杞寒烟则是非常冷静，因为对方的属性是火，谁知道能不能冰封住她， 被训了的消防员迅速冷静了下来，仔细的像水桥晴雪身上喷水。 砰的一声，水桥晴雪身上的冰伴随着大量的水蒸气炸开了。一大块碎冰直接砸破了李永言卧室的玻璃，把李永言吓了一大跳，急忙往后面躲躲。 李永言并没有开灯，所以他的卧室里面是一片漆黑。 外面的人很难注意到屋里还有一个人。 而外面消防车是开了大灯的，所以外面一片大亮，李永言在卧室里面可以清晰的看到外面发生了什么。 看到水桥晴雪成功从结冰状态中恢复了过来，杞寒烟一点惊讶也没有。杞寒烟在捕获部队已经呆了3年了，捕获火系人员的时候，也见识过这种现象好几次了。 想要捕获水桥晴雪，杞寒烟考虑的方案就是车轮战进行消耗，耗尽水桥晴雪的异能。所以她看到冰封无效之后，也没有过多的失望。只是开启了下一次的攻击， 杞寒烟随手凝成几个冰锥，向着水桥晴雪激射了过去。 水桥晴雪采取了和上次一样的策略，只不过上次是向左边跑，这次是选择了向右边跑。 就在这时，水桥晴雪注意到了一直在放水的消防栓，于是她又拉出三支箭矢，射向了消防栓。 杞寒烟一下子没有反应过来，让水桥晴雪得手了。消防栓直接炸裂 ，水向着天上喷去。而呲水枪一下就萎了，软绵绵的流出一大滩水之后就断水了。 现在也不是不能使用异能了，只是相对来说变得更耗费能量了而已，所以杞寒烟也没有多少惊慌。 杞寒烟想道： 既然如此，那就换一种进攻的方式把。 杞寒烟直接使水柱凝结成一个巨大的冰柱， 随后操控到身边。她像使用棍子一样抡起了冰柱，向着水桥晴雪横扫了过去，这种大面积攻击很是难躲。 水桥晴雪左右手连续拍出3个火球，这些火球 都击中了冰柱的中间段，直接把冰柱打成了两截。 尾端失去能量供给一下子就甩了出去。 杞寒烟接着凝成了新的冰柱，这次她没有选择横扫， 而是选择把冰柱拉到了空中，向着水桥晴雪射了过去。面对这样的直冲攻击，刚刚那样的火球就没办法破解了。 ","date":"2022-05-08","objectID":"/non-menu/story-mirror/13.-%E7%81%AB%E7%84%B0%E4%B8%8E%E5%AF%92%E5%86%B0/:0:0","tags":null,"title":"13. 火焰与寒冰","uri":"/non-menu/story-mirror/13.-%E7%81%AB%E7%84%B0%E4%B8%8E%E5%AF%92%E5%86%B0/"},{"categories":null,"content":"水阻太大，水桥晴雪生成的箭矢无法穿过，只会生成大量的水蒸气， 这是一种消耗行为。 水桥晴雪又放出了几只箭矢，纷纷栽在了水门上， 夏叶释放的水门覆盖了整个玄关的区域。 没有任何空隙可以让箭矢穿越。 水门十分透彻，就像玻璃一样，完全不会阻碍视线。 夏叶觉得自己赢定了，这简直是小事一桩。 因为如果事情一直这样发展的话，水桥晴雪会因为能量耗尽而无法使出火焰，无法使出火焰的水桥晴雪就完全是一个普通人，捕获一个普通人的话， 就十分简单了。自己这边的话，就算自己异能耗尽，也可以让程义过来替补自己。 此时的李永言正在卧室的一个角落里面蹲着， 夏叶的声音虽然不高，但是李永言还是听到了，现在他已经搞明白了，是实验室的人来抓捕水桥晴雪了。 但是自己不会异能，想帮助水桥晴雪也没有什么办法。 外面又是每隔一小段时间就是巨大的声响，吓得李永言也不敢出去，只能远远的蹲在卧室的角落。 又挡住了水桥晴雪几次攻击之后， 夏叶决定自己也要攻击试试看。 下了决定，夏叶就开始动手了，几个小水球从 水门中分离出来，嗖的一声射向水桥晴雪。 水桥晴雪在实验室的时候，进行过不少战斗实验，所以她也具备了一定的战斗经验。看到分离出来的小水球，水桥晴雪就知道夏叶要做什么了。 水桥晴雪往自己的左下方向一蹲，就避过了水球。 这几个小水球，有的击中了墙壁，有的击中了电视。李永言的家在这一站之后能保留多少是一个未知数了。 看着被打坏的电视，水桥晴雪突然想道纯火焰很难穿过水门，但是家具的话应该可以较为简单的穿过去。 于是她便拿起之前丢在旁边的笔记本电脑， 用力的丢了过去。 笔记本电脑像是丢到了河面一样，溅起很多水花，随后穿越水门，一下砸到了夏叶的脑袋上。夏叶没有想过水桥晴雪居然不用异能， 而是直接丢物品过来， 由于一时间没有反应过来，所以被砸中了。 “啊！” 笔记本电脑直中夏叶的额头，这令夏叶感觉到十分的疼痛和恼怒。在夏叶吃痛的时候，水门因为没有了能量的支撑，所以自然溃散成了一大堆水，落到了 地面上。 水桥晴雪看到了机会，于是发动异能点燃了夏叶的衣服。夏叶全身的衣物瞬间就都被点燃了。外面的消防队员看到自己的队长变成了一个火人，便使用呲水枪给队长灭火。 夏叶全身被火焰包裹，身体受到高温熏烤，他感觉十分疼痛，便下意识的冲出了屋子。 到了屋外之后就操作水资源将自己身上的火都给灭掉了。 “寒烟！”夏叶大声的叫了杞寒烟的名字，让她前来助战。 夏叶虽然及时的灭了火，但是皮肤还在隐隐作痛，头发也被烧掉了不少，现在发型凌乱，衣衫破败，全身隐痛。 夏叶一边操作水资源 给自己的身体来一个水敷，一边向着消防车那边走去。 看到杞寒烟出来的时候，夏叶吩咐道“你来替我一下” “奥” 杞寒烟应了一声便忍住笑意快步向前走去，夏叶此时的样子和平时的样子具有巨大的反差，让杞寒烟感觉好笑， 但是出于职场礼仪又不能笑出来， 只得忍笑前进。 杞寒烟抬手一招，便把消防车喷出来的水凝结成了小冰锥，这些冰锥漂浮在半空中，等待着调遣。 水桥晴雪看到夏叶跑出屋之后， 便考虑要不要追出去， 因为客厅没有后门，只有一个前门能出屋，所以水桥晴雪 思量了一会之后就从正门出去了。 从正门出去的水桥晴雪看到了杞寒烟和冰锥，也没有多说什么， 便准备迎击。 杞寒烟随手一挥，冰锥便向着水桥晴雪射去。 还是那个问题，水桥晴雪的火焰并不能产生太大的阻力，面对水的时候都防不住，更不要说冰锥了。 所以水桥晴雪的选择只有一个，那就是向旁边闪避。 砰，砰，砰。 冰锥撞击到墙上发出了清脆的声响。 水桥晴雪抬手在空中一滑，3支火焰箭矢生成了出来， 分散后，水桥晴雪让它们射向了杞寒烟。 夏叶已经抵挡过好几次这招了，但是杞寒烟却没有抵挡过， 所以水桥晴雪想试试看。 之前听到李永言说 警察的事情的时候，她就有点 预感可能会遭到袭击，所以也没有出门，尽量保持了低调， 但是没想到还是被发现了，而且对方直接来了一个奇袭。 每个人每天能使出的异能是有极限的，今天可能是一个持久战，所以箭矢这种火焰含量小，威力还可以的能力是一个优先的选择。 李永言刚刚感觉到外面有光，便探出头看了看窗外，正好看到了身上还在燃烧的夏叶， 之后便一直盯着窗外。 虽然他前些天受到水桥晴雪威胁的时候就看到了异能，但是现在一时间看到这么多的异能， 还是感觉很惊讶。李永言的脑袋已经有点转不过来了。 ","date":"2022-05-07","objectID":"/non-menu/story-mirror/12.-%E7%81%AB%E7%84%B0%E4%B8%8E%E6%B0%B4%E6%B5%81/:0:0","tags":null,"title":"12. 火焰与水流","uri":"/non-menu/story-mirror/12.-%E7%81%AB%E7%84%B0%E4%B8%8E%E6%B0%B4%E6%B5%81/"},{"categories":null,"content":"竹乐的异能是凝水，也可以叫做造水， 可以在空气中制造出水。 程义的异能是控水， 就是可以操控水资源，竹乐和程义是比较好的一个搭配，两人经常组队出任务。 程义只能控水， 无法控血，具体原因目前没有人知道。 杞寒烟的异能是冰系的，主要是结冰与控冰。 夏叶的能力也是控水， 和程义的异能类似。 因为北方街距离 F4区域的湖比较近，所以能较好的借水， 这可以在一定程度上减轻竹乐的负担。 既然要伪装成火灾，夏叶也打算借此调用几辆消防车，这样可以使用更多的水资源了。 汤总队长当然同意了夏叶的计划。 次日晚上10点半， 一行5人，来到了李永言家的附近。 此时的李永言已经进入了梦乡，李永言的呼吸道比较健康，所以没有打呼噜的现象。李永言正在做着莫名其妙几乎不会记得的美梦，他不知道自己的家已经被盯上了，而且对方马上就要爆破自己了。 水桥晴雪现在正在刷剧呢，前两天地图看完之后，被一部电视剧的广告吸引住了，所以打开看了看，居然看上瘾了。 在被抓到实验室之前，水桥晴雪也是比较爱看电视剧的， 现在有机会可以刷剧，她自然没有错过。 夏叶到了现场之后吩咐人手的配给， 夏叶和消防车🚒一起，站在前门准备攻击， 竹乐和程义在对面的地方， 防备着23号实验体逃跑。 杞寒烟和青蝶则处于待机状态， 和随行的警察一起。 这些警察与田康这类的警察不太一样，这些警察都签有保密协议， 他们知道实验室的存在，也知道异能人士的存在， 但是他们自身都不具备异能。 属于这类行动的辅助人员， 如果有人发现了这些的状况， 他们就会上前把人群赶走。 10点58分的时候，所有事情都已经准备完毕。夏叶拿起无线对讲机说道：“我来打头阵，你们注意一下，不要把实验体放跑了。” 夏叶让消防车接上消防栓，并打开水管。 水管打开之后， 源源不断的水流了出来。 夏叶并没有让这些水浪费掉， 而是发动了异能， 把所有的水聚集到了空中。 夏叶从大水球中剥离出一个小水球出来，他右手食指中指伸直，另外三指合拢，指向北方街16号的大门，轻吐了一个去字。 小水球便以一个十分快速的速度撞击到了大门之上。 砰的一声，大门被冲击力击飞，大门属于普通的防盗门形式，此时被水球的巨力带飞，中间水球的撞击处已经出现了一个大大的深坑。大门被正对着的墙壁抵住了，墙上瞬间布满裂痕。 水桥晴雪被这两声巨大的声响一下吓住了，幸好沙发不是正对着大门，不然的话，她可能直接就没了。 李永言也被惊醒了。 水桥晴雪意识到自己能被发现了， 而李永言则是不明白发生了什么事情。 大门被撞开之后， 夏叶紧跟着就重进了屋内，瞄了眼大门，夏叶对水球的威力还是挺满意的。 就是这个月的奖金到底有没有现在是个问题了。 夏叶开口说道：“23号实验体，你已经被捕了。” 水桥晴雪冷哼了一声，没有接话。 夏叶接着说道：“我劝你不要拒捕，上面只说了要活着带你回去，却没说一定要完整的你。” 本来不明状况的李永言现在也明白了， 别人这是发现了水桥晴雪，要强行抓她回去。 李永言没有冒失的打开卧室门过去， 而是悄悄的走到了窗口旁边，准备看看窗外是什么情况。 周围的邻居也都被惊醒了， 纷纷打开窗户四处观看， 他们听不到夏叶说的话， 自然不知道发生了什么。 水桥晴雪不想失去好不容易得到的自由，而且她很讨厌实验室的那个地方。 所以她只有一个选项，那就是反抗。 水桥晴雪随手把笔记本电脑丢到一边，随手搓了个火球，就向着夏叶所在的地方丢去。 夏叶见状，直接一个小水球进行对抗。砰的一声闷响， 两个小球都消失不见，取而代之的是一大团水蒸气，还有小部分落下的水珠。 火系捕获小队的成员大多是使用水系，冰系异能的人， 这是因为这两种异能对抗火焰的时候很好用。 “如果你只有这点能力的话，恐怕今天是逃不出去了。” 夏叶随口说道。 “废话真多” 水桥晴雪反击的说道。 水桥晴雪的能力，简单来说就是🔥火焰生成，和火焰操控两种。 水桥晴雪抬手在空中一滑，瞬间生成了3支箭矢，这三支箭矢从不同的角度射向夏叶。 夏叶现在站在大门附近，即玄关的地方。 所以他拉伸水球，形成了一个水门， 箭矢穿入水门之后就消失不见了， 随之而来是另一片大量的水蒸气。 “放水” 夏叶大声喊道。 门外的消防车开始像屋内喷水， 夏叶只有控水能力， 所以需要不断的补充水资源。 ","date":"2022-05-06","objectID":"/non-menu/story-mirror/11.-%E6%89%BE%E4%B8%8A%E9%97%A8%E6%9D%A5%E4%BA%86/:0:0","tags":null,"title":"11. 找上门来了","uri":"/non-menu/story-mirror/11.-%E6%89%BE%E4%B8%8A%E9%97%A8%E6%9D%A5%E4%BA%86/"},{"categories":null,"content":"在田康的队长继续向上报告了此事之后的次日，一个陌生的男子在北方街晃荡了一圈之后离开了。 F3区某间办公室内，这名陌生的男子正在做着报告。 男子： “萧队长，我确认过了，是23号实验体无误。” 萧队长点了点头，说道：“好，干的不错。 你先去休息把，捕获的事情交给其他部队就好了。 ” 男子告辞后离开了这间办公室。 萧队长用手轻轻的双击了一下桌面的左下角，随后桌子的左下角显示出了一个拨号键盘的界面。萧队长按了号码 010， 几秒钟之后，一个男子的声音传来：“素华，有什么发现了吗？” 萧队长的全名叫做萧素华，是一个身高167公分的偏胖男子。萧素华听到声音之后，接话道：“总队长，发现了23号实验体，目前位置在北方街16号。” 总队长听了之后很是高兴，急忙吩咐道：“快派人去监视她，不要让她跑了。” 23号实验体，即水桥晴雪，那天在实验室里面闹得可不轻，实验室的总负责人对23号实验体非常感兴趣，已经催促了总队长好几次，让他快速的寻找到23号实验体。 现在确实有了消息，总队长感觉很高兴。 “好” 萧素华也没有废话，只说了一个字进行回应。 挂断了与总队长的通话之后， 萧素华又按下了号码312，这次没有通话，不过一会儿之后，之前离开办公室的那名男子又近来了。 那名男子说道：“队长，有什么吩咐？” 萧素华说道：“阿志啊，你现在去23号实验体的所在位置，监视她一下，不要让她跑了。如果有什么动静，第一时间呼叫我。” 阿志听了之后说道：“不是说 捕获交给其他部队来做吗？” “是啊，捕获 由其他部队进行，你不要和她交手， 如果她发现了你，就赶快逃跑。你只是负责捕获前的侦查工作。” 阿志听到之后， 也没有什么不满，只是换一个地方划水，应该还好把。 阿志说了一声了解之后，就驱车前往北方街了。 阿志全名元咏志，是侦查小队的一名队员，萧素华是侦查小队的队长。 元咏志的异能是侦查型的，他不需要进入屋子，就能确认屋子里面的人的相貌，还能微微的感受到屋内人的异能能量大小。 不过，他的异能也是存在范围限制的，所以他需要在李永言家的附近才能使用。 总队长正在考虑捕获计划，23号实验体逃离的那天，他正在度假，不在实验室内部， 当他赶回实验室的时候，23号实验体早就不知所踪。 那天的时候，火系防务部队的人手也不足，因为实验室一直以来都很和平，所以驻扎的防务人员也不是很多。 为了确保这次不会失手，让23号实验体再次逃离，总队长决定让火系防务部队8成的人手都前去参与捕获。 并且安排1名常规防务部队的人前去辅助。 考虑好了行动计划之后，下一步就是安排人员了。 总队长在双击桌面左下角，呼出拨号键盘之后，按下了401的号码。 “总队长，队长现在不在，外出去买奶茶了” 一个男子的声音响起了。 “小乐啊，等他回来了让他马上过来见我。” 总队长听后吩咐道。 “好” 大约半个小时过去了之后， 一名男子打开了总队长办公室的门， 问道：“汤总队长，找我啥事啊？” “23号实验体的位置发现了，我希望这次能把她给捕获了。” “23号实验体啊，我看了那天的视频，这个人不好对付啊。” “正因为她不好对付，才要捕获她，上面对她很感兴趣。”解释了一下，汤总队长继续道“你们小队现在有几人在待机？” “竹乐，程义， 杞寒烟， 3个人把。 加上我是4个” “好，夏叶你也过去，现场的指挥由你负责，另外，我会让青蝶跟着你们一起行动。” “哈？ 让青蝶去的话，她一个人不就能搞定了吗？” 夏叶听了之后，不是很开心的回答道。 “多一个人多一份保险，小心驶得万年船“汤队长安慰道。 ”行动的话，就选择明天晚上11点把，本次行动代号雪冰。 人员的准备等工作由你负责， 我会让警察待命，也会封锁媒体，你们尽量把这次行动伪装成一次火灾的意外事故。“ 夏叶离开了办公室之后， 开始思量更详细的进攻计划。 青蝶的能力是异能的能量消除和封印。 如果被青蝶的能量打中1次的话，会几分钟内无法使用异能。如果无法使用异能的话，就会变成一个普通人。 如果目标变成了普通人的话， 就很简单了。 青蝶称呼她自己的异能叫做人返， 即变回人类的意思。这些大多是夏叶听说的，夏叶没有见到过青蝶几次。 ","date":"2022-05-06","objectID":"/non-menu/story-mirror/10.-%E6%8D%95%E8%8E%B7%E8%AE%A1%E5%88%92%E7%A7%98%E5%AF%86%E8%BF%9B%E8%A1%8C%E4%B8%AD/:0:0","tags":null,"title":"10. 捕获计划秘密进行中","uri":"/non-menu/story-mirror/10.-%E6%8D%95%E8%8E%B7%E8%AE%A1%E5%88%92%E7%A7%98%E5%AF%86%E8%BF%9B%E8%A1%8C%E4%B8%AD/"},{"categories":null,"content":"“北方街16号，我们汇报一下就下班把。” 田康看到李永言打开门进屋之后，便对矮胖警察说道。两人平时的时候5点半就下班了，现在六点四十了，已经加班1个小时了，田康觉得差不多了。 两人走路回到了车里，之后开车回到警局做了报告，便各自回家了。 李永言回到家里的时候，水桥晴雪正在躺在沙发上使用笔记本电脑💻。她最近对当前地区的地图比较感兴趣。之前虽然说了2个月就离开， 但是她其实一点计划也没有。 水桥晴雪并不知道自己是如何逃出实验室的，也不知道其他人有没有逃出来，现在孤身一人，对未来有些迷茫。对于来自普通人的伤害，她可以使用异能进行回击，所以她不担心受到伤害。 只是她需要生活，而且需要注意不能被实验室的人发现，需要躲藏。 在李永言家里度过的一周中， 她和李永言的相处还算良好，李永言每天都会带些面包给她吃。两人没有什么机会聊天， 李永言凌晨3点多的时候就会起床离开家里， 到了晚上5点多才回来，大多数时间都是水桥晴雪一个人呆在家里。 除了平板电脑之外，李永言家里还有一个笔记本电脑， 相对于平板电脑来说，笔记本在打字的时候更方便。所以水桥晴雪在看地图的时候，笔记本电脑用的多。 虽然看了地图也不一定能记住，但是水桥晴雪觉得看了还是有点用的，能记住多少便是多少把。 等2个月之后离开的时候，记住了地图可以在一定程度上避免成为无头苍蝇。 “我回来了”李永言开口给水桥晴雪打了个招呼。 水桥晴雪现在是睡在客厅里的，客厅和大门是相连的，所以李永言进入家里之后就能看到水桥晴雪。李永言本来是想给水桥晴雪买一个床的， 但是家里没有什么地方放置， 于是买了两个和沙发等高的大椅子，这样拼凑成一个小床。 “哦” 水桥晴雪哦了一声表示听到了。 李永言打算像往常一样，打完招呼就回屋睡觉去了。 而就在李永言打开自己卧室的门之后，水桥晴雪开口说道：“你刚刚有没有被人跟踪？” 李永言愣了一下之后开始回想回来的路上，回答道“应该没有把，我没注意。。” 毕竟李永言一路上都在想那3000金币的事情，根本没注意身后。 “嗯。。” 水桥晴雪抓了抓头发之后，轻哼了一声表示知道了。随后，她问道：“你为啥没有告诉警察，你见过我？” 李永言略微思考了之后说道：“我也不知道。” 可能是从这几天的相处中，李永言感觉水桥晴雪不是坏人，只是一个邻家小妹妹把。 略微沉默了一会之后， 李永言说道：“对了，今天忘记给你带面包了，把我前几天给你的身份卡拿出来一下， 我给你转500元， 明天你就叫外卖把。 ” 水桥晴雪听了之后就把身份卡拿出来递给了李永言， 之后李永言很利索的划了500元过去。 “外卖会从那个盒子进行投递，不需要开门” 李永言指了指大门旁边的小盒子，说道。 李永言接着补充道，“我们的地址是北方街16号”。 说完他把身份卡还给了水桥晴雪之后，就抬步走进卧室了。 水桥晴雪接回身份卡之后，哦了一声之后表示知道了。 水桥晴雪躺回了沙发，继续查阅着地图，并且会时不时的抓抓自己的头发，在李永言的家里呆了几天之后，水桥晴雪越来越懒惰了，今天连头发也没有清洗，头发现在乱糟糟的。 李永言的家位于 F5区北方街16号，距离 F4区很近。 F4区是一个很大很大的人工淡水湖。 据说这些淡水是从海水中提取的，湖底先是使用了钢筋混凝土封闭四周， 以隔绝海水。 之后对湖里的水进行淡化处理。 前两天，水桥晴雪和李永言去散步的地方，就是 F4区的湖的旁边。 F5区的另外一边是大海，F5区和 F1区是接壤的。 F4区是整个 F区的中心区域。 F5区是注重隐私的区域， 所以当前区域不设置摄像头，除了 F5区之外，这个国家还有其他几个注重隐私的区域。 田康和矮胖警察的队长让他们次日继续监控李永言， 一人监控他家，一人监控面包店。 因为目前李永言的状况是疑似，谁都没法确认他是不是真的认识照片 里面的人，所以需要进行秘密监控。在这个国家，个人的财产是受到宪法保护的，如果没有搜查证的话，屋主可以拒绝警察入内。田康觉得签发搜查令的那伙人肯定不会因为他的感觉就签发搜查令，所以他现在只能秘密取证。 三天之后， 田康提交的报告是： 每天的中午12点，晚上5点有外卖送入该户人家，可以证明屋里有人，但是 屋里的人并没有露头出来，所以无法确认是不是寻找的人。 他们的队长看过报告之后就让他们负责其他事情去了。 ","date":"2022-05-04","objectID":"/non-menu/story-mirror/9.-%E8%A2%AB%E7%9B%91%E6%8E%A7%E4%BA%86/:0:0","tags":null,"title":"9. 被监控了","uri":"/non-menu/story-mirror/9.-%E8%A2%AB%E7%9B%91%E6%8E%A7%E4%BA%86/"},{"categories":null,"content":"两个警察报告了此事之后， 他们的队长让他们监视一下面包店，对事情进行确认。 两人吃了个午饭之后，便换上便服，开着一辆黑色的小轿车，前往若水街。 在面包店的附近停了下来， 两人监测的任务也做过几个，知道自己不能太显眼，不能明摆着告诉对方自己在监控他们。 矮胖警察中午吃了很多，打了一个饱嗝之后，开口说道：“这恐怕是我们区独有的任务了把， 其他区只要看看监控就可以了， 我们还得用肉眼来看。” 田康听了之后，赞同的接话道：“是啊，谁叫我们是隐私区的警察呢。” 矮胖警察又说道：“虽然做什么都麻烦点， 但是我们的薪水还算不错。嗝。” 矮胖警察想起了自己中午吃了2个鸡腿🍗，4个翅中，两碗白米饭，还有不少青菜，五花肉。 便说道：“中午吃饭的这个地方不错，晚上下班之后再去吃一顿把？” 田康瞄了眼矮胖警察的体型，随口说道：“好啊， 不过我得提醒你， 你真该减肥啦。” “老田， 你又不是不知道我，好几次减肥失败了， 我已经认命了。”对于矮胖警察来说，减肥真的是一个极其困难的事情。 两人继续着有一茬，没一茬的闲聊，以打发这无聊的时间。 李永言此时并不知道自己被人监控了， 中午随便吃了几个面包之后就又进入了续零的世界，简直是一个标准的网瘾青年。 在现实世界里面，李永言是一个面包店的老板，每天重复着做面包，包装面包的工作，生活没有什么激情， 也没有什么朋友。 在续零的世界里面，有丙午桑这个好基友，可以分享各种事情，做各种挑战。相对来说，续零的世界比现实世界要有吸引力多了。 李永言玩的是一个法师角色，主要使用的是水系的魔法，还学了一堆乱七八糟花哨的技能，比如生成一个水海豚🐬，该海豚会在3秒后消失，仅观赏使用。还有水海马，水月，都是观赏用技能。 李永言有事没事会用出来玩玩，不少玩家看到之后都会给他点赞，但是那些点赞的玩家很少学习这类技能。 续零没有职业的概念，只有技能的概念， 玩家可以学习任何技能。 学习技能需要花费技能经验。技能经验可以在攻略副本，刷怪，探索世界等行为中获得。 李永言刚开始攻略 副本比较困难的时候，也是会优先学习伤害高，或者防御高的技能上。后面打的副本多了，技能经验用不完之后便喜欢上了这些小技能。 现在李永言的游戏技术越来越纯熟，所以会在连招中加入一些观赏性的技能， 比如先召唤出一只海豚，然后再使用一个高伤类的水系技能。 玩游戏的时候，时间总是过的很快，一下午的时间转眼即逝。 李永言今天玩游戏玩的稍久了一些，下午6点多才从面包店出来，锁上门之后开始走路回家。 由于太过无聊，两个警察选择了轮班监控， 一小时轮换1次，这样确保了每个时间上都有1人会观察李永言是否离开了，以及是否有其他人进入面包店。 矮胖警察发现李永言出来了之后，急忙的拍了拍田康， 开口说道：“老田，老田，那小子出来了。 ” 田康立即停下了刷视频的行为，抬头看向面包店门口。 矮胖警察接着问道：“老田，我们开车跟着他吗？” “不，我们伪装成路人，在他后面吊着就可以了。” 随后，两人下了车，远远的吊在李永言后面， 跟着他。 李永言在路上回想着今天下午发生的事情，李永言和丙午桑接了一个 NPC 发布的任务，那个任务叫他们去清理一窝哥布林，报酬只有10个金币。 但是补贴3000个金币，补贴的金币由游戏运营方出。 这种事情偶尔也有，当运营方想要刺激玩家去做这些任务的时候就会这样做。 两人并没有来到过这个发布任务的 NPC 的村庄，所以需要跑路进行开图。即使是传送到最近的传送点，也需要跑大老远的路才能到那个村庄。这些倒还好，跑跑图而已，就是有点浪费时间。 然而后面发生的事情让李永言感觉到极度无语。任务的说明是清理一堆平凡的哥布林， 结果到了地穴之后， 两人发现存在一只变异哥布林。两人死了好几次才把这只变异哥布林干掉。 任务完成后，两人去找 NPC 结算了任务，一人获得了10个金币。 接着两人去找运营商要补贴， 奇葩的事情来了，运营方把任务撤销了， 说那个是员工的误操作，不是正式的内容。这把李永言气的够呛，后来两人折腾了半天，运营方给了300金币了结了此事。 现在想想，李永言还是觉得有点生气。 ","date":"2022-04-26","objectID":"/non-menu/story-mirror/8.-%E5%BA%A6%E8%BF%87%E4%BA%86%E5%B9%B3%E5%87%A1%E7%9A%84%E4%B8%80%E5%A4%A9/:0:0","tags":null,"title":"8. 度过了平凡的一天","uri":"/non-menu/story-mirror/8.-%E5%BA%A6%E8%BF%87%E4%BA%86%E5%B9%B3%E5%87%A1%E7%9A%84%E4%B8%80%E5%A4%A9/"},{"categories":null,"content":"两个警察，一个矮矮的，胖胖的，肥头大耳的。 另外一个则是瘦高的体型。 瘦高的警察敲了敲大门，之后大声喊道：“有人吗？ 有人吗？？？” 李永言这时肯定是在续零的世界里面游荡啦，他正在和丙午桑进行一个小型副本的攻略，聚精会神的处理着各种各样的操作。 当瘦高警察第二次大喊有没有人的时候， 李永言才听到。 半潜行设备的好处就是对外界具有一定的感知能力， 而且容易退出。 李永言和丙午桑交代了一下之后就走到店的前半部，看看是谁在呼喊。 李永言看到矮胖警察的第一感觉就是： 这家伙肯定是一个美食达人。🍗🍗 那个瘦高的警察很主动的拿出了自己的证件， 并且进行了自我结束：“我姓田， 你叫我田警官就可以了。” 李永言瞄了一眼证件：“姓名： 田康” ， 李永言紧接着说道：“有什么事情吗， 田警官。” 这名叫做田康的警察接话道：“我是 F5区的警察”。 随后拿出一张照片，询问道“你最近有没有见过这个人？” 照片上的人是一个小妹妹，年级和水桥晴雪差不多大的感觉， 李永言很确信自己并没有见过这个人， 于是回答道：“没见过。” 田警官仔细观察了李永言的神色，根据他做警察👮🏻的经验， 他觉得李永言并没有说谎。 田警官随后又拿出了三张照片， 依次递给李永言确认， 李永言表示这些人自己都不认识。 而到了最后一张的时候，李永言的心咯噔了一下，照片上的人显然就是水桥晴雪，只不过发色不太一样。 现在的水桥晴雪是一头黑色的长发， 而照片中的人则是红色的一头长发。 李永言的脸色在微微一变之后，就恢复了常色，并鬼使神差的说自己没有见过照片中的人。 田警官一直在观察李永言的神色，这时一下就感受到了李永言的异样。 李永言自小就很少说谎， 是一个比较诚实的人，所以这里露出了一点马脚。 田警官感觉李永言也许见到过这个人，于是和颜悦色的说道：“如果你见过哪一个，一定要说出来，他们都是十分危险的恐怖分子” “好的，警官。 但是我确实没有见到过他们。” 李永言的心跳在砰砰作响， 可惜的是两位警官听不到。 “嗯，好。 如果你以后见到了他们，记得拨打我们的报警电话， 0778” 田警官听到李永言再次否认， 于是便说道。 语毕，田警官就带着矮胖警官离开了面包店。 李永言不能确认自己有没有露出马脚， 只能有点担心的回到了内屋。 李永言给水桥晴雪发了个消息。 李永言问道：“警察来到店里了，拿出了几张照片，其中一张是你的。 不过头发是红色的。” 水桥晴雪回答道“啊？ ” “他们问我有没有见到过你” “那你怎么回答的？” “我说没有。 你最近不要出门了， 不知道昨天去海边有没有人留意过你。” “好” “头发的颜色不一样，加上有戴着鸭舌帽， 希望没人能认出来把。” “嗯， 我之前的头发确实是红色的，我也不知道为啥变成了黑色” “警察说你们是恐怖分子， 你们做了什么坏事吗？” “大概是逃离的时候发生了些事情把， 不过我不记得了” 两个警察回到警车里面进行着小声的交流。 矮胖警察说道：“这个人估计有鬼， 他可能认识这个红发的小姑娘。” “是呀，我也这么认为” 田康回答道。 矮胖警察继续嘀咕道“可是， 他为什么不承认呢？” “不知道啊，我们只管把这件事报告上去就可以了， 其他事情让长官做决定就好了” “嗯” 矮胖警察应了一声之后， 发动了警车， 两人回到了警察局。 李永言想着这件事情担心无用， 该来的总归会来， 自己撑死算个帮凶，大不了蹲号子。这么想着，就把这件事情放下了， 拿起了白夜，继续去续零的世界探索。 等到李永言再次回到续零的世界的时候， 丙午桑已经单人把这个副本通关了。 李永言说出了经常对丙午桑说的话：“小午啊，你的剑术真的是精湛啊！” “嘿嘿，过奖过奖。” 丙午桑则是如同往常一样谦虚的回答。 “刚刚怎么了， 是客人吗？” 丙午桑随口问道。 “不是，是两个警察。” “警察？ 你不会摊上什么事情了把？” “没有，警察问我有没有见过一些人” “啥？ 他们直接看道路的监控不就好了吗？ 还需要一个个店的询问吗？” “我们 F5区是注重隐私的区域，是没有监控的。” “对哦，我忘了” “嗯，不管了， 我们继续去探索下一个地方把。 ” ","date":"2022-04-17","objectID":"/non-menu/story-mirror/7.-%E8%AD%A6%E5%AF%9F%E9%97%AE%E6%88%91%E6%98%AF%E5%90%A6%E8%A7%81%E8%BF%87%E5%A5%B9/:0:0","tags":null,"title":"7. 警察问我是否见过她","uri":"/non-menu/story-mirror/7.-%E8%AD%A6%E5%AF%9F%E9%97%AE%E6%88%91%E6%98%AF%E5%90%A6%E8%A7%81%E8%BF%87%E5%A5%B9/"},{"categories":null,"content":"次日傍晚， 李永言带着水桥晴雪出来散步了。 自从碰到水桥晴雪已经一周了，身边的事情并没有什么不同，李永言觉得暂时应该是安全的，并且一直呆在家里不出门也不是很好，遂带着水桥晴雪出门散步了。 水桥晴雪本来是不打算出门的， 担心会被实验室的人再次抓走。 而李永言的反驳理由则是已经购置了不少女性的生活用品， 有心人肯定会查到自己， 所以让水桥晴雪伪装成远房亲戚， 这样的话， 偶尔出个门也是 OK 的。 他们来到了 F4区的一个人工湖旁边， 该人工湖十分巨大， 处于 F 区的中心位置，F1,F2,F3,F5区域则是围绕人工湖建立而成的。 与 F5区域接壤的部分是一片巨大的沙滩， 今天是3月18日，星期五。 沙滩的人很多，有些人穿着花花绿绿的泳衣在湖里游泳，有些人则躺在躺椅上看着人群和夕阳。 李永言只是打算带着水桥晴雪走一走， 所以两人都是穿着春季的便装， 没有穿着泳衣。 不打算下水的人基本都是这样的穿着， 所以两人的装扮也不会显得奇异。 两人从西边的沙滩一直走到东边，两人基本上是一路无言， 都只是静静的看着周边的景色。 在李永言还是个孩子的时候， 这边的沙滩来的比较频繁，经常和李永言的父亲一起来这边瞎玩， 在沙滩上建立城堡🏰，在水里游泳，看别人钓鱼🎣。 自从接触到白夜之后， 李永言来这边沙滩的次数就愈来愈少了， 自从5年前，李永言的父亲不知去向之后，李永言就没有再来过这片沙滩了。 当两人走到沙滩的西边的时候，发现一个妹子的脚被玻璃片扎破了，而她的男朋友则在旁边安慰她，在好一顿功夫之后，她的男朋友背着她回家了。 沙滩上的玻璃片，异或可能是海水里面的玻璃片， 总是十分令人讨厌，而水里的根本看不到，则是最为讨厌。 沙滩的躺椅是公用的，如果看到没有人的话， 就可以过去坐下，歇歇脚。 在那对情侣离开之后，李永言问道：“我们去那边坐坐把，走了挺久的了。 ” “好” 水桥晴雪则是淡淡的回答道。 两人来到了两个那对情侣离开的地方，坐下之后又是一阵无言。 现在已经是傍晚时间了，太阳已经变得不是那么耀眼，而是变成了可以直视的，红色的夕阳。夕阳很美，周边的云彩都被染成了红色。 李永言想起了自己小时候，在这片沙滩玩耍的时候，不由的会心一笑。 但是想到现在不知道在哪里的父亲的时候，又变得心情黯淡。 李永言没有和水桥晴雪说过自己家里的事情， 因为他觉得这并不重要， 而且李永言目前只考虑时间到了，让水桥晴雪解除诅咒， 然后回到自己的平凡生活中去。 水桥晴雪则被这里的景色触动， 有点伤神，被抓走之后，在实验室里面的几年，虽然并不算难熬， 但是绝对也称不上好过。 “在实验室里的时候”， 水桥晴雪不由的想找个人吐露一下心声 “我们每天都会被迫使用异能。” “那些人，他们想搞清楚我们的异能究竟是怎么产生的。” “如果不配合他们的研究，就会遭受虐待。 他们会把我们关到小黑屋里面好几天，好几周。” “在那片黑暗的环境里面， 静悄悄的，什么声音都没有，什么景象都没有， 自己好像成了一个瞎子和聋子。” “我并不害怕被他们当成实验体， 但是我害怕一直被当成实验体。 ” “现在，我逃出来了，但是其他人还在忍受着实验。我想帮助他们。” 李永言静静的听着，并没有发表什么意见。 “在实验的时候， 他们会在我们使用异能的时候扫描我们的大脑， 他们认为大脑是异能的主要器官。” “还会让我们使用相斥的异能进行对练， 比如让我和使用水系的异能者相对使用异能。” “他们会招收表现良好的异能者，组成武装镇压部队，如果有人想要逃跑，或则不配合，则会受到镇压部队的惩罚。” 李永言转头看了一眼水桥晴雪，她脸上的表情很是哀伤，像一个看不到希望的人。 “你有没有考虑一直躲下去？” 李永言开口问道。 “他们会找到我的， 我很难一直躲藏下去。 ” 水桥晴雪回答道。 “之前有些人逃出去之后被抓回来， 就会被折磨的很惨。” 又是一阵无言之后，李永言开口道“回家把。” 水桥晴雪则回答道：“好“。 又一天的白天，有两个警察来到了李永言的店里。 ","date":"2022-04-11","objectID":"/non-menu/story-mirror/6.-%E6%88%91%E5%92%8C%E5%A5%B9%E5%8E%BB%E4%BA%86%E6%B9%96%E8%BE%B9/:0:0","tags":null,"title":"6. 我和她去了湖边","uri":"/non-menu/story-mirror/6.-%E6%88%91%E5%92%8C%E5%A5%B9%E5%8E%BB%E4%BA%86%E6%B9%96%E8%BE%B9/"},{"categories":null,"content":"看下面的代码： void uiChangeGraph(std::string_view path) { char tmp[FILENAME_BUF_SIZE]{ 0 }; auto t = currentProject()-\u003eopenGraph(path, tmp); } SightNodeGraph* Project::openGraph(std::string_view path, char* pathWithoutExtOut) { std::string targetPath{path}; std::filesystem::path temp(targetPath); if (temp.has_extension()) { std::string ext = temp.extension().generic_string(); if (ext == \".json\" || ext == \".yaml\") { targetPath = std::string(targetPath, 0, targetPath.rfind('.')); } } if (pathWithoutExtOut) { sprintf(pathWithoutExtOut, \"%s\", targetPath.c_str()); } return currentGraph(); } 这段代码在函数uiChangeGraph结束的时候可能会出现内存错误， 原因是因为 tmp的内存不足，越界了。 增大 tmp 的大小， 或者做长度检测就可以解决问题了。 或者给openGraph函数添加一个长度参数， 然后使用 snprintf()函数。 ","date":"2022-04-02","objectID":"/program/cpp-char-%E6%95%B0%E7%BB%84%E8%B6%8A%E7%95%8C%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:0:0","tags":null,"title":"Cpp Char 数组越界的问题记录","uri":"/program/cpp-char-%E6%95%B0%E7%BB%84%E8%B6%8A%E7%95%8C%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"[噩梦人的梦呓] 本故事里面出现的任何地点，人名均为杜撰， 请不要对号入座。 在最初的惊奇过后， 李永言的生活又恢复了之前的步调。 凌晨起床去面包店做面包， 白天躺在店里玩续零，晚上回家的时候会带一些面包给水桥晴雪， 一次带一天的份量， 简单省事。 除了那天之外，丙午桑又恢复了长期在线的状态，两个人在游戏世界里面一起探索， 打怪，攻略副本，时间总是会溜走。 丙午桑玩的一手好剑，剑术高超，惊奇， 李永言常常会对此产生感叹，甚至怀疑丙午桑在现实世界也是一个用剑高手。 有一次，李永言问起了这个问题， 但是却被丙午桑否认了。 丙午桑的回答很简单：都2077了，谁还用剑啊！ 续零里的地图除了主大陆是游戏公司设计出现的内容， 其他很多大大小小的大陆则是自动生成的。 各种树木，河流，矿业都是自动生成的。 此时的李永言正在和丙午桑一起探索一个矿洞， 这个矿洞里面据说能找到很珍惜的一种矿物，该矿物可以提炼出一种叫做幻露的物质，而幻露是打造高级武器的必要材料。 两人在这个矿洞里面杀了一波又一波的 NPC， 刨了一块又一块的石头。 甚至还和其他玩家对上了好几次，有时候依赖丙午桑的剑术， 两人可以打赢团战，有时候则是被全灭。 这样打了一两个小时之后， 两人才收集了几块矿石。 出货的概率很低，两人都感觉到有些无聊了。 而就在此时，李永言听到了嘟嘟嘟的消息提示音，李永言瞄了眼通知窗口， 是家里的终端机发来的消息。 “有蟑螂！” “快回来！” 蟑螂？ 李永言愣了一下， 那不是一把火的事情吗？ 至于叫我回去吗，难道是变异的蟑螂？ 算了，回家看看把。 李永言回了个消息之后， 和丙午桑说了一句，就下线回家了。 李永言走到店面前方的时候，两个女孩子正在选择面包，她们的年龄和水桥晴雪差不多。 两个女孩子一边叽叽喳喳的在说些什么，一边看看这个面包， 又看看另外几种。 这两个女孩子应该是附近的居民把， 李永言在记忆中依稀见过这两个女孩子几次。 由于长期的缺乏交流，李永言不知道要和顾客说些什么， 便当做没看见快步离开店里了。 到了家， 打开门之后，李永言发现水桥晴雪正裹着一个毯子卷缩在沙发上， 头发上还有不少没消散的泡沫。 看起来是正在洗澡的时候被蟑螂打断了。 “蟑螂在哪呢？” 李永言开口问道。 “浴室” 李永言瞄了眼水桥晴雪， 发现她的身材真的不错，曼妙的曲线很是迷人。李永言急忙压下自己的想法，快步走到浴室， 浴室里面的水蒸气已经就算完全消散， 只有一点残留。 浴室里还弥漫着洗发水的香味，这是水桥晴雪来了之后自己选购的一款， 和李永言平时用的不太一样。 有一股淡淡的薰衣草香味。 李永言在地面上发现了两只蟑螂， 不知道是从哪里出现的。李永言腾腾两脚， 把蟑螂都给踩死了。 “还好，不是变异蟑螂，不然家没了就不好办了。”李永言在心里暗暗想道。 在使用扫帚把蟑螂尸体清扫了之后， 李永言很是不解的询问水桥晴雪：“这不就是普通的蟑螂吗？一把火就可以解决了啊， 至于叫我回家吗？ 我还以为家里出现了变异的蟑螂。。” 水桥晴雪瞪大了眼睛，深深的看了眼李永言说道：“你不知道吗？ 蟑螂是烧不死的！” “哈？？？” 这下李永言有点傻眼了。 “😤哼， 快出去， 我还没洗完澡呢！” 水桥晴雪看蟑螂问题被解决了之后， 就把李永言撵了出去。 李永言哭笑不得的离开了家， 又回到了店里。 到了店里的时候，两个女孩子已经离开了， 店里空空荡荡的一个人也没有。 自动售货机制，无人机送货机制， 让人们几乎可以不出家门就享受到各种各样的服务，所以人们之间的感情，联络都变得越来越淡。 “这个城市，这个时代， 人们大多都是冷漠的。” 李永言突然有感而发，在心里默默想道。 “还好， 续零可以拯救我的灵魂！” 李永言又想道。 ","date":"2022-03-26","objectID":"/non-menu/story-mirror/5.-%E8%9F%91%E8%9E%82%E6%98%AF%E7%83%A7%E4%B8%8D%E6%AD%BB%E7%9A%84/:0:0","tags":null,"title":"5. 蟑螂是烧不死的","uri":"/non-menu/story-mirror/5.-%E8%9F%91%E8%9E%82%E6%98%AF%E7%83%A7%E4%B8%8D%E6%AD%BB%E7%9A%84/"},{"categories":null,"content":"基本内容 ","date":"2022-03-12","objectID":"/caprice/%E7%9D%A1%E7%9C%A0%E7%9B%B8%E5%85%B3%E6%80%A7%E5%8B%83%E8%B5%B7%E7%96%BC%E7%97%9B%E7%B1%BB%E4%BC%BC%E7%97%87%E7%8A%B6%E7%9A%84%E6%81%A2%E5%A4%8D%E8%AE%B0%E5%BD%95/:1:0","tags":null,"title":"睡眠相关性勃起疼痛类似症状的恢复记录","uri":"/caprice/%E7%9D%A1%E7%9C%A0%E7%9B%B8%E5%85%B3%E6%80%A7%E5%8B%83%E8%B5%B7%E7%96%BC%E7%97%9B%E7%B1%BB%E4%BC%BC%E7%97%87%E7%8A%B6%E7%9A%84%E6%81%A2%E5%A4%8D%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"治疗方案 服用改善睡眠质量的药物对笔者有效。 笔者使用的是欧兰宁。 注意， 这不是用药推荐， 拥有症状的读者应该去医院做些检查。 笔者曾经也试过 知柏地黄丸， 最初的时候是有效的， 但是最近服用的时候无效了。 后来， 笔者去了别的医院， 那个医院的医生说用的药太猛了，那个是给老年人用的， 不是给年轻人用的， 所以我停药了。 ","date":"2022-03-12","objectID":"/caprice/%E7%9D%A1%E7%9C%A0%E7%9B%B8%E5%85%B3%E6%80%A7%E5%8B%83%E8%B5%B7%E7%96%BC%E7%97%9B%E7%B1%BB%E4%BC%BC%E7%97%87%E7%8A%B6%E7%9A%84%E6%81%A2%E5%A4%8D%E8%AE%B0%E5%BD%95/:1:1","tags":null,"title":"睡眠相关性勃起疼痛类似症状的恢复记录","uri":"/caprice/%E7%9D%A1%E7%9C%A0%E7%9B%B8%E5%85%B3%E6%80%A7%E5%8B%83%E8%B5%B7%E7%96%BC%E7%97%9B%E7%B1%BB%E4%BC%BC%E7%97%87%E7%8A%B6%E7%9A%84%E6%81%A2%E5%A4%8D%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"症状描述 笔者是一名程序员， 即脑力劳动者。 睡眠相关性勃起疼痛发作的时候会被阴茎胀醒，醒来后会一直感觉阴茎很难受， 无法入睡。 在起身小便之后才可以继续睡着。 夜间会发生好几次， 基本上间隔1.5h 小时左右会出现一次。 在极度疲劳的时候症状会加重，不疲劳的情况下，症状较轻。 如果白天多休息的话， 症状就更轻。 这里说的多休息是指多睡眠， 强迫自己多睡。 指真正的睡眠， 而非胡思乱想状态。 ","date":"2022-03-12","objectID":"/caprice/%E7%9D%A1%E7%9C%A0%E7%9B%B8%E5%85%B3%E6%80%A7%E5%8B%83%E8%B5%B7%E7%96%BC%E7%97%9B%E7%B1%BB%E4%BC%BC%E7%97%87%E7%8A%B6%E7%9A%84%E6%81%A2%E5%A4%8D%E8%AE%B0%E5%BD%95/:1:2","tags":null,"title":"睡眠相关性勃起疼痛类似症状的恢复记录","uri":"/caprice/%E7%9D%A1%E7%9C%A0%E7%9B%B8%E5%85%B3%E6%80%A7%E5%8B%83%E8%B5%B7%E7%96%BC%E7%97%9B%E7%B1%BB%E4%BC%BC%E7%97%87%E7%8A%B6%E7%9A%84%E6%81%A2%E5%A4%8D%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"其他 笔者在医院的时候还做了血常规和睾酮检查， 这两项都没有问题。 笔者此前有过一段时间是处于极度疲劳的状态下， 笔者现在推测笔者自身的状态可能是神经衰弱之类的。 笔者打算，等下次症状复发的时候， 就去神经内科检查看看。 ","date":"2022-03-12","objectID":"/caprice/%E7%9D%A1%E7%9C%A0%E7%9B%B8%E5%85%B3%E6%80%A7%E5%8B%83%E8%B5%B7%E7%96%BC%E7%97%9B%E7%B1%BB%E4%BC%BC%E7%97%87%E7%8A%B6%E7%9A%84%E6%81%A2%E5%A4%8D%E8%AE%B0%E5%BD%95/:1:3","tags":null,"title":"睡眠相关性勃起疼痛类似症状的恢复记录","uri":"/caprice/%E7%9D%A1%E7%9C%A0%E7%9B%B8%E5%85%B3%E6%80%A7%E5%8B%83%E8%B5%B7%E7%96%BC%E7%97%9B%E7%B1%BB%E4%BC%BC%E7%97%87%E7%8A%B6%E7%9A%84%E6%81%A2%E5%A4%8D%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"更新 2022年9月25日星期日 笔者在服用了一些帮助睡眠的药物之后， 睡眠恢复了正常， 所以笔者的主因可能是焦虑。 2022年10月23日星期日 昨天去神经内科拿药， 那个医生和我说，我的症状是精神科，或者心理科才可以看的病，让我去那些科室看。 并且和我说，我用的药太猛了，那个是给老年人用的， 不是给年轻人用的， 所以我打算停药了。 2023年1月21日星期六 12月份和一月份又去医院看了。 医生说可能是因为睡得不熟的原因。 最近俩月稍微出现过一些症状， 不过随后就消失了。 可以考虑的方案是： 多运动 多休息 多放松 多喝水。 一定要放松， 保持心情开朗。 ","date":"2022-03-12","objectID":"/caprice/%E7%9D%A1%E7%9C%A0%E7%9B%B8%E5%85%B3%E6%80%A7%E5%8B%83%E8%B5%B7%E7%96%BC%E7%97%9B%E7%B1%BB%E4%BC%BC%E7%97%87%E7%8A%B6%E7%9A%84%E6%81%A2%E5%A4%8D%E8%AE%B0%E5%BD%95/:2:0","tags":null,"title":"睡眠相关性勃起疼痛类似症状的恢复记录","uri":"/caprice/%E7%9D%A1%E7%9C%A0%E7%9B%B8%E5%85%B3%E6%80%A7%E5%8B%83%E8%B5%B7%E7%96%BC%E7%97%9B%E7%B1%BB%E4%BC%BC%E7%97%87%E7%8A%B6%E7%9A%84%E6%81%A2%E5%A4%8D%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"拓展阅读 http://med.china.com.cn/content/pid/317708/tid/1026 http://121.199.17.194/paper/1485835638694756352?adv ","date":"2022-03-12","objectID":"/caprice/%E7%9D%A1%E7%9C%A0%E7%9B%B8%E5%85%B3%E6%80%A7%E5%8B%83%E8%B5%B7%E7%96%BC%E7%97%9B%E7%B1%BB%E4%BC%BC%E7%97%87%E7%8A%B6%E7%9A%84%E6%81%A2%E5%A4%8D%E8%AE%B0%E5%BD%95/:3:0","tags":null,"title":"睡眠相关性勃起疼痛类似症状的恢复记录","uri":"/caprice/%E7%9D%A1%E7%9C%A0%E7%9B%B8%E5%85%B3%E6%80%A7%E5%8B%83%E8%B5%B7%E7%96%BC%E7%97%9B%E7%B1%BB%E4%BC%BC%E7%97%87%E7%8A%B6%E7%9A%84%E6%81%A2%E5%A4%8D%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"译者序 部分 知行合一： 认真学习， 积极参与， 深刻总结。 即用而学， 学而用。 太极图的六个阶段： 顺时针 1，2，3，4，5，6 。 阳， 阴的顺序。 其中，1-4，2-5，3-6 对应， 第一阶段表示刚开始出现反转信号的时候， 第二阶段则是信号扩大，市场尝试突破， 第三阶段则是持续的大趋势阶段 时间换取价格： 长时间停留在一个价位上不同， 最终也必定会酿成更大的价格运动 价格换取时间： 价格运动越剧烈， 市场未来归入沉寂的时间就越久。 信息量的极限： 使用任何技术指标提取信息都 不会超过该信息所包含的最大信息， 即： 同时使用多个技术指标所获取的信息量不一定和技术指标的数量成正比。 经过检视阅读，我觉得这本书值得一读。 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:1:0","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"蜡烛图部分 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:2:0","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"基本部分 开市价和收市价将组成中间的实体部分， 笔者一直使用绿涨红跌的图示。 则实体部分为绿色的时候表示收盘价高于开盘价， 为红色的时候表示收盘价低于开盘价。 最高价和最低价将使用一根细线表示， 称之为影线， 日本人认为中间的实体部分表示了实质的价格运动， 而影线则是无关紧要的部分。 “反转形态”指“趋势变化形态”， 而非趋势马上反转。 重要原则： 仅当反转信号所指的方向与市场的主要趋势一致的时候，我们才可以根据这个反转信号来开立新头寸。 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:2:1","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"较强的反转信号 锤子线和上吊线 这两个名称是同一种蜡烛图在不同的主要趋势中的不同名称。 蜡烛图： 下影线较长， 实体较小并且在其全天价格区间里面，实体处于顶端的位置上。 蜡烛图的特性： 实体处于价格区间的上端， 实体颜色则无所谓 下影线的长度至少达到实体高度的2倍 应当没有上影线， 即使有，长度也是极短的。 出现在下降趋势中表示下降趋势即将结束， 这种叫做锤子线。 出现在上升趋势中表示上升趋势即将结束，这种叫做上吊线。 注意： 这里说的都是有较大可能性， 而不是一定。 当上吊线出现的时候， 一定要等到其他看跌信号的证实。 上吊线次日的开市价低于 上吊线的实体部分 上吊线次日的开市价高于上吊线的实体部分， 但是收市价低于上吊线的收市价。 市场的收市价向上超过了上吊线的最高点，市场便不太可能下跌了。锤子线也一样。 上吊线的实体与上吊线次日的开市价之间向下的缺口越大，则成为顶部的可能性越大。 只有把价格形态与它之前的价格变化相结合，进行通盘的考虑，才能准确的把握价格形态的意义。 吞没形态 （抱线形态） 主要反转形态， 是由两根颜色相反的蜡烛线实体所构成的。 判断标准： 在吞没形态之前， 市场的趋势必须清晰可见， 哪怕是短期的 必须由2根蜡烛组成， 后一根的实体必须覆盖前一根的实体，但是不必覆盖影线 第二根蜡烛的颜色必须和第一根相反， 除非第一根蜡烛的实体非常非常小。 信号增强条件 第一根蜡烛的实体非常小， 而第二根的实体非常大 吞没形态出现在超长期或非常急剧的市场运动之后。 第二根蜡烛伴有超额的交易量 第二根蜡烛吞没的实体不止一个。 乌云盖顶形态（乌云线形态） 由两根蜡烛组成， 属于顶部反转形态。 第一根是坚挺的上涨实体，第二根的开市价超过了第一根的最高价，但是收市价在最低价附近，并且收市价明显的向下扎入到第一根蜡烛的实体内部。 信号增强条件： 看跌吞没形态比乌云盖顶具有更好的技术含量。 第二根向下穿进第一根的实体内部越深， 则可能性越大。 至少为50%才算可靠。 如果第三根蜡烛的实体是长长的，上涨的，且收市价超过了第二根的最高价，则很可能是新的上涨行情。 发生在超长期的上涨趋势中，第一根是秃头秃脚的，第二根也是秃头秃脚的。 第二根蜡烛的开市价高于某个重要支撑点，但是收市价却低于该点。 开市时成交量极大， 可能会发生胀爆现象。 刺进形态（斩回线形态） 为乌云盖顶的反面， 为底部反转信号。 第一根是下跌实体， 第二根是上涨实体。 信号增强条件与乌云盖顶类似， 不过有点例外： 第二根上涨趋势的蜡烛必须穿过第一根实体的50%以上。 变体： 第二根上涨实体无法穿透第一根的50%时， 会被看做下跌信号。 待入线： 第二根蜡烛的实体部分 摸不到第一根下跌蜡烛的实体 切入线：第二根蜡烛的实体部分 摸到一点第一根下跌蜡烛的实体 插入线：比切入线 更深， 但是低于刺进形态。 只要价格再次跌破第二根蜡烛的最低价，就是新的卖出机会。 但是如果是数天之内形成了两次插入线信号，则视为看涨。 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:2:2","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"星线 星线的特征 实体较小 实体和前面一个较大的实体形成了价格跳空 颜色并不是很重要 实体如果已经缩小为十字线则称之为十字星线。 如果一根长长的蜡烛实体之后是星线， 则是一个警告信号， 说明当前趋势可能要结束了。 启明星形态 为 底部反转形态。 由3根蜡烛组成 第一根是长长的下跌实体 第二根是小小的实体，两根实体之间存在向下的价格跳空 第三根是长长的上涨实体， 实体明显的推进到了第一根的实体内部。 理想的状态是 第二根蜡烛和另外两根的实体均有跳空， 但是后面的价格跳空较为少见。 此项非必要条件。 信号增强条件 理想形态 第三根蜡烛的收市价深深的扎入第一根实体之内 第一根蜡烛的交易量较轻， 第三根蜡烛的交易量较重。 黄昏星形态 与启明星对应， 属顶部反转形态。 黄昏星和启明星可以比喻成交通信号灯， 由绿色转为黄色，接着变成红色。 关键之处在于 第三根蜡烛下跌穿入第一根蜡烛的程度。 此形态也可能出现在窄幅盘整的顶部部分， 等待其他看跌信号确认后也具有重要意义。 十字启明星和十字黄昏星 如果启明星或者黄昏星形态中的第二根蜡烛是一根十字星线，则组成了十字星形态。 相比于常规形态，具有更重要的技术意义。 在上升趋势中，如果如果十字星线之后是一根向上跳空的上涨实体，则十字星线的下跌警告信号将不复存在。 十字星线： 开市价和收市价是相等的。 十字里线： 指十字星线的下影线与前一根蜡烛的上影线没有任何重叠之处。 如果十字里线 后面紧跟着一根向下跳空的下跌实体，且该蜡烛的上影线和十字里线的下影线也没有重叠，则组成弃婴顶部形态。 与弃婴顶部形态对应的则称之为弃婴底部形态。 流星形态与倒锤子形态 流星形态的技术意义不如黄昏星重要， 通常不构成主要反转信号。 流星形态的特征： 该蜡烛线的 上影线较长，实体较小，且处于蜡烛下端。颜色并不重要， 该蜡烛线需要出现在上涨趋势中。理想状态中，该蜡烛线的实体需要和前一根蜡烛线的实体形成价格跳空。 倒锤子形态：与流星形态的蜡烛线特征一致， 但是需要出现在下跌趋势中。 当倒锤子形态出现后， 必须等待下一个时间单位的看涨信号加以验证，这非常重要。 第二根蜡烛的开市价与倒锤子形态蜡烛的实体产生向上的价格跳空，距离越大，信号越强烈。 或者 第二根蜡烛是一根上涨蜡烛，价格均处于较高的水平。 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:2:3","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"较弱的反转信号 孕线形态 特征： 第二根蜡烛具有较小的实体， 且被第一根蜡烛包容进去， 颜色相反并不是必要条件。 两根蜡烛实体的相对大小是比较重要的。 当孕线出现的时候， 市场通常会转向窄幅盘整。 当第二根蜡烛是一根十字蜡烛的时候，称之为十字孕线形态，或呆滞形态，此为较强的反转信号。 十字孕线出现在市场顶部时更有效力。 平头顶部形态和平头底部形态。 在上升的市场中，当几根蜡烛的最高点不相上下的时候， 就形成了一个平头顶部形态， 平头底部形态与之相反。 几根蜡烛 可以是2根， 也可以是多根。 同时，两根蜡烛中间可以存在其他蜡烛 平头形态即可以由实体构成， 也可以由影线，十字线构成。 平头形态和可以其他形态重叠， 比如第二根蜡烛是上吊线，流星线，十字线等， 还比如整个形态既是平头形态，又是乌云盖顶，或者斩回线。 平头形态应该得到其他形态的验证， 如此便成了一种有价值的预测工具。 （即较强的反转信号） 捉腰带线 特征： 具有长长的实体，或者具有极短的方向影线 下降过程中为上涨实体， 上涨过程中为下跌实体 上涨实体， 开市价与最低价相同， 即秃脚的实体。 下跌实体则相反，为秃头的实体。 信号增强条件 实体越长， 信号越强 较长时间的趋势之后出现的，意义也更加重要。 其他 如果下一根蜡烛收市于看跌捉腰带线之上，则意味着上升趋势已经恢复，如果下一根蜡烛收市于看涨捉腰带线之下，则意味着抛售压力重新积聚了起来。 注： 原文中并没有 下一根蜡烛 的字样， 这是笔者猜测之后， 从而添加上去的。 向上跳空二只乌鸦 特征： 由3根左右的蜡烛构成 第一根是长长的上涨实体 第二根是短小的下跌实体， 且与第一根蜡烛的实体之间存在价格跳空 第三根仍然是短小的下跌实体， 并且此实体与第二根蜡烛的实体应该处于差不多的位置， 理想情况下，此蜡烛的开市价应该高于第二根蜡烛， 收市价应该低于第二根蜡烛。 看起来像是栖立在高高树枝上的两只乌鸦。 铺垫形态 此形态和向上跳空两只乌鸦的外形有点类似， 但是发出的信号却不一样。 此形态出现在上涨行情中，是一种看涨的持续形态。 特征： 头三根蜡烛和 向上跳空两只乌鸦的外形类似 第四根是类似的短小下跌实体 第五根是 向上跳空的上涨实体， 向上超过了第四跟蜡烛的上影线， 或者收市价超过了第四跟蜡烛的最高价。 则形成买入信号 中间的下跌实体可以存在2，3，4根蜡烛。 三只乌鸦 特征： 与向上跳空二只乌鸦类似， 但是有三根依次下降的下跌实体。 出现在高价格水平上， 或者出现在经历了充分发展的上涨行情中，就预示着价格即将下跌 三根下跌实体的收市价都应该处于最低点，或者接近最低点 每根蜡烛的开市价都应该处于前一根的实体范围内 第二根和第三根蜡烛的开市价非常接近前一根的收市价的时候，称之为三只乌鸦接力形态， 这是一种比较罕见的形态，这种形态非常疲软。 疲软是书中原文，可能是会产生严重下跌的意思把。 反击线形态（约会线形态） 特征 当两根颜色相反的蜡烛具有相同的收市价或者非常接近收市价的时候，就形成了一个反击线形态。 第一根蜡烛将具有长长的实体，第二根蜡烛的开市价需要沿着既有趋势跳空一大步。 可能会出现在下跌行情或者上涨行情中。 相对来说， 看涨反击线的意义比刺透形态弱一些。 看跌反击线的意义比乌云盖顶弱一些。 每个人对长长的实体这个概念都不一样。 对于所有反转信号来说，表示趋势即将发生变化， 而不是掉头转向。 三山形态和三川形态 长期的顶部反转形态和底部反转形态， 本形态构成了主要的反转过程。 特征： 市场先后三次均从同一个高价位上回落，或者市场对某个高价位向上进行三次尝试，但都失败了，就构成了一个三山形态。 在三山形态的最后一座山的最高点应该出现其他看跌信号， 以对三山形态做确认。 如果中间的山峰高于两侧的，则形成了三尊顶部形态。 三川底部形态是三山形态的反面， 市场先后向下试探某个价格三次，均未能突破，之后市场价格回升， 收市价向上突破了这个形态的最高价，就构成了三川底部形态。 如果三川中间的山峰低于两侧的， 则形成了倒三尊形态。 圆形顶部形态和圆形底部形态 特征： 市场逐步形成一个向上凸起的圆弧状图案，通常出现的是一些较小的实体，当市场向下跳空的时候，就证明圆形顶部形态已经完成 市场逐步呈现出向下凹进的圆弧状图案，然后市场打开一个向上的跳空，就证明圆形底部形态已经完成 圆形底部形态也叫平底锅形态。 塔形顶部形态和塔形底部形态 特征： 市场在上升趋势中，某一个时刻，出现了一个坚挺的白色蜡烛线。 市场线是放缓了上涨的步调，然后蜡烛线的高点开始下降，最后，市场上出现了一根或者数根长长的黑色蜡烛线。 就此，塔形顶部形态就完成了。 塔形底部形态相反。 奇特三川形态：第一根是长长的下跌实体， 第二根是也是一根下跌实体，第二根的收市价高于第一根的收市价， 第三根则是具有很小白色实体的蜡烛线。 塔形形态在开始和结束的时候均有长长的实体， 而圆形形态则需要存在价格跳空。 塔形形态和圆形形态不必严格区分， 都是主要的反转信号。 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:2:4","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"持续形态 窗口 第一根蜡烛的影线和第二根蜡烛的影线没有任何重叠的地方， 这段空白则叫做窗口。 也叫价格跳空 市场参与者应该顺着窗口形成的方向建立头寸，窗口还将演化为支撑或者阻挡。 向上跳空的窗口的第一根蜡烛的上影线被触及的时候说明该窗口被关闭了，反之亦然。 收市价跨越上影线具有更高的意义。 关闭窗口将会消耗大量的动力， 如果关掉窗口之后，仍然具有动力，则趋势可能会反转。 请记住如下概念： 窗口之后发生的市场回撤，将重新返回窗口。 从窄幅盘整中跳起来的窗口和从新高价位上跳起来的窗口值得注意。 如果市场连续出现了3个同一方向的窗口， 那么形成顶部/底部的可能性是非常大的。 特别需要注意第三个窗口之后。 新纪录高点/低点 市场一口气形成了10个逐步升高的新高点或者10个逐步下降的新低点，而没有任何有意义的调整的时候，对待该既有趋势就需要谨慎了。 当连续出现了8个新高而没有发生任何有意义的调整的时候， 这种市场状况可以描述成 胃口已经填满了八成。 向上跳空并列黑白蜡烛线形态 特征： 市场处于上升趋势中，出现了一根向上跳空的上涨蜡烛线 这根蜡烛线后面紧跟着一根下跌蜡烛线，这根下跌蜡烛线的开市价在前一根的实体内部， 收市价在前一根的实体之下。 如果市场回头关闭了窗口，并且抛售压力依然很明显的话， 这个形态的看涨意义就不再存在。 向下跳空并列黑白蜡烛线形态与之类似，不过方向相反 两根蜡烛线的实体应该差不多大。 高价位和低价位跳空突破形态 特征： 在一两个连续急剧上涨的交易日后，产生了一连串的小实体 在这群小实体之后，有一天，市场向上跳空开盘，那么买入的时机就成熟了。 低价位与之相反。 一连串的小实体总个数不应该超过11个。 跳空并列白色蜡烛线形态 特征： 上涨过程中， 出现了一根向上跳空的上涨蜡烛线，随后又是一根上涨蜡烛线。 并且两根的大小相当，开市价也处于差不多的水平。 如果市场收市于上涨蜡烛线的最高点之上，则表示下一波上涨行情即将开始。 向下跳空并列白色蜡烛线形态与之相反。 上升三法和下降三法形态 特征： 第一根蜡烛是一根长长的上涨实体 后面是3~5根依次下降的下跌实体， 所有实体均需要局限于第一根蜡烛的价格内部。 （影线， 此外2根蜡烛也可以，并且不需要全部都是下跌实体） 最后一根蜡烛的开市价需要高于前一根的收市价，并且收市价需要高于第一根蜡烛的收市价， 还需要是一根坚挺的上涨实体。 下降三法与上涨三法在图形是对等的， 不过方向完全相反。 如果第一根蜡烛，最后一根蜡烛的交易量超过了中间那群小蜡烛的交易量，那么该形态的份量就更重了 前进白色三兵形态 特征： 由接连出现的3根上涨蜡烛线组成，它们的收市价依次上升。每根蜡烛的开市价都处于前一根的实体内部，或其附近的位置。 每根蜡烛的收市价都处于最高点，或者接近最高点。 当市场在某个低价位窄幅盘整了一段时间之后，如果出现了这个形态，表示市场即将转强。 如果第二根和第三根， 或者仅有第三根蜡烛线表现出上涨势头减弱的迹象，就构成了一个前方受阻（白色三兵）形态。 表示上涨行情可能会结束。 具体表现为实体一个比一个小，或者有较长的上影线。 如果第二根是长长的上涨实体， 第三根只是一个小小的上涨蜡烛线，就构成了一个（白色三兵）停顿形态。 表示买房的力量已经暂时消耗殆尽。 这个是多头平仓的紧要时机。 停顿形态并不是趋势反转信号，只是说市场需要一段深思熟虑的时间 分手线形态 特征： 市场上涨过程中，先是出现了一根下跌实体，再跟着一根为上涨实体， 两根实体的开市价相同。 第一根应该是稍长的实体， 第二根蜡烛需要是捉腰带线。 下跌过程为相反内容。 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:2:5","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"十字线 特征： 开市价与收市价处于同一水平。 或者非常非常接近的水平。 是一种极为重要的反转信号。 至少有一条影线比较长的称之为 长腿十字线， 没有下影线的称之为 墓碑十字线。 市场顶部的十字线 先出现一根长长的上涨蜡烛线，后面紧跟着一根十字线， 这种状况值得注意。 十字线可以处于前一根蜡烛的实体内部，或者之上。 在市场底部的十字线则没有这么大的意义。 出现在长长白色蜡烛线之后的十字线 紧跟在急剧上涨的行情之后的时候是决定性的反转信号。 长腿十字线和黄包车夫 两条影线都比较长的十字线是一个理想的长腿十字线 当开市价和收市价正好处于全体价格的终点，则称之为黄包车夫。 如果非十字线的蜡烛线具有很长的上影线或者下影线，并且实体较小， 就称之为 风高浪大线， 如果出现了一群，也构成了反转形态。 上吊线和流星线？ 墓碑十字线 上涨行情中， 预示着下跌。 此时，上影线越长，技术意义越重要。 三星形态 非常罕见， 意义极其重大。 由三根十字线，或者近似十字线组成。 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:2:6","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"第二部分 多技术方法共同参考原则 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:3:0","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"多个蜡烛图技术指标共同参考 多个技术指标同时出现的时候 往往能更好的预测市场。 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:3:1","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"蜡烛图与趋势线 支撑线或者阻挡线的潜力强弱 取决于下面几点： 成功经受市场试探的次数 每次试探时候的成交量高低 该直线维持有效时间的长短。 注： 这里说的支撑线或者阻挡线指的是趋势线。 使用两个低点/高点连接的趋势线。 采取保护性止损措施的重要性 我们 应该使用技术分析来测定风险/报偿的比例值。 我们应当在最初建立交易头寸的时候，就设置号止损水平，只有这个时候，我们才是最冷静，客观的。 只有市场的演变复合我们本来预期的条件下，才继续持有当初的交易头寸。哪怕只是未能证实我们的预期 ， 也应该平仓出市。 破低反涨与破高反跌 在窄幅盘整的时候， 有时会出现伪突破的现象， 即突破了边界线， 但是没有守住。 当出现了这种情况的时候， 市场很大概率会把价格推进到相对的边界线位置。 这就叫破低反涨与破高反跌， 名称视趋势变化。 极性转换原则 过去的支撑水平将演化成新的阻挡水平，过去的阻挡水平将演化成新的支撑水平。 信号增强条件 市场对过去的支撑、阻挡水平进行试探的次数 每次试探时的交易量， 持仓量大小。 技术分析估量了交易圈和投资界的人群情绪。 主要原因： 大量的人群在看到头寸亏损的时候并没有平仓， 而是想以最小的代价解决这件事情。这些人的头寸几乎都在是支撑水平附近买入的， 但是市场却下跌了，所以等市场回温的时候， 这些人都将在这个支撑水平附近卖出。 蜡烛图与百分比回撤水平 通常， 市场不会直线上升， 也不会直线下降， 而是进两步，退一步。 常用是回撤水平是50%， 38%， 62% 。 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:3:2","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"蜡烛图与移动平均线 简单移动平均线， 常用的间隔有： 4天，9天，18天， 13周，40周等。 指数加权移动平均线： 最常见的用处之一是应用在 MACD 方法中。 用法 通过比较价格与移动平均线的相对位置，构成一个趋势格标。 利用移动平均线构成支撑水平或者阻挡水平。 跟踪移动平均线的波幅带。 观察移动平均线的斜率。 利用双移动平均线系统来交易。 双移动平均线 超买/超卖指标，也就是摆动指数。 把短期的MA减去长期的 MA 就得到了摆动指数的值。 MA： 移动平均线 摆动指数大幅＞0： 超买， 大幅＜0： 超卖。 观察两个 MA 的交叉点，获得交易信号。 如果3天的 MA向上穿越9点的 MA，则构成看涨信号，称为黄金交叉。 反之则称为死亡交叉。 检测当前收市价与5天 MA 之间的关系。得出一个超买，超卖信号 利用两条 MA 的差作为寻找相互验证，相互背离信号的工具。 市场即可以通过抛售行情，也可以用过窄幅盘整行情来释放其超买状态。 当市场处于超买状态的时候，通常不应当做空。 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:3:3","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"蜡烛图与摆动指数 摆动指数 所谓摆动指数，包括下列各种技术分析工具相对力度指数， 随机指数， 以及动力指数等。 作用： 摆动指数可以用作相互验证，相互背离的指标。 看跌相互背离， 当股价创立新高， 但是摆动指数却没有新高，则意味着市场是疲弱的。 看涨相互背离， 当股价处于新低，但是摆动指数却没有新低的时候，意味着市场的抛售压力正在衰退。 用作超买超卖指标。 当这么使用的时候， 必须谨慎行事。 衡量市场运动的力度。 理论上来说，随着趋势的发展，价格变化速度也应当逐步加快， 如果趋势发展过程中，动力指数变成了水平伸展， 则构成了一个警告信号。 在顺应当前主流趋势方向的条件下， 我们可以采用摆动指数的信号来建立头寸。 趋势上升+看涨摆动信号， 入市做多。 趋势下降+看涨摆动信号， 平回空头头寸。 趋势是主要前提！ 相对力度指数 RSI 构成超买，超卖指标 当RSI 处于取值范围的上边界的时候，则认为是超买状态， 下边界则视为超卖状态。 监测相互背离现象。 价格新高，但是 RSI 却没有新高， 就形成了看跌的背离信号。 如何把误导的技术信号过滤掉？ 使用其他技术分析工具是一个不错的办法。 随机指数 随机指数把最近的收市价格，同一定时间范围内的市场的总的价格范围进行比较， 值在0~100之间。 当值较高时，说明当前价格处于一定时期中，总的价格水平的上端。 实线 %K， 虚线 %D， 一般称作 KDJ 指标。 似乎有一种类似的指标叫 Stoch 当%D 处于25以下，视为超卖， 当这个时候，%K 向上穿过%D 时 视为买入信号。 动力指数 动力指数又称为价格速度指数， 测量的是当前收市价格与一定天数之前的收市价之差。 在上升趋势中，动力指数应该以逐步加快的速度增长。 如果动力指数向下穿越0线就构成了一个看跌信号。 反之亦然。 动力指数也是超买超买指标，动力指数会比价格先达到顶点。动力指数会为市场的超买超卖情况提供一个具体尺度。 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:3:4","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"蜡烛图与持仓量，交易量 一段行情的交易量越重， 这段行情背后的市场力量越强大，只要交易量保持增长，那么价格趋势就会继续发展下去。 如果交易量不增反减，那么去趋势可能就不会继续发展下去。 另外， 还可以用于严重市场的顶部或底部过程。 当市场向下试探某一个支撑水平时，如果交易量减轻，则意味着卖出压力减弱，因此构成了一个看涨信号。 蜡烛图与交易量 当市场以一个较轻的交易量去试探过去高点时，就增加了形成双重顶的可能性。 当市场以一个较轻的交易量去试探某一个支撑水平的时候，就构成了一个看涨信号。 权衡交易量(OBV) 权衡交易量是一种交易量的累计净值， 从一个基准日开始，当某一天的收市价高于前一天的，则将该日的交易量数值加到前一天的 OBV 上。如果低于前一天的收市价， 就从前一天的 OBV 上减去那天的交易量。 如果价格和 OBV 双双上涨， 则可能构成一个看涨信号， 反之亦然。 在低价位的窄幅盘整时， 如果 OBV 开始升高，则可能说明有人在搜集筹码。（看涨） 在高价位的窄幅盘整时， 如果 OBV 开始下跌，则可能说明有人在派发筹码。（看跌） 持仓量 持仓量是所有的敞口多头头寸或者所有的敞口空头头寸单边的总和，而不是它们双边的总和。 持仓量的作用和交易量有些类似。 价格趋势的发展应该伴随着逐步增长的持仓量。我们应该牢记这个重要原则。 在理论上， 一旦旧的头寸平仓完毕，则当前市场运动的驱动力量就将烟消云散。 如果市场处于新高水平时， 持仓量也恰巧达到了一个异乎寻常的高水平， 则说明行情可能要陷入困境了。 随着上涨行情的发展， 很多做多者的止损价也会水涨船高， 万一出现价格下滑， 就容易产生连锁反应， 如同多米诺骨牌一样。 在高水平入场的做多者， 如果碰到了一波大的下跌， 他们可能不会平仓，这种情况下， 他们会抓住一切的上涨行情进行平仓。 阻挡区域 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:3:5","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"蜡烛图与艾略特波浪理论 艾略特波浪理论 价格运动是下述基本过程形成的， 先是五浪上涨，然后跟着调整性的三浪下跌。 1，3，5浪成为主浪（推进浪），2，4成为次浪（调整浪）。 主浪可能是上涨的， 也可能是下跌的。 艾略特波浪理论与蜡烛图 在实际交易中， 最重要的是3浪和5浪， 3浪通常是最强劲的一段行情， 而5浪的顶部，我们必须及时掉头。 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:3:6","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"蜡烛图与市场剖面图 下列几个基本要素构成了市场剖面图的理论基础 所有市场都是以便利和促进交易活动为目的的。 市场有一套自我调节机制，这种机制制约着价格，时间，交易量的相互关系 市场为了便利和促进交易活动， 往往以价格作为探针，尽力招揽卖出者和买入者。 市场参与者对价格探针的反应，为我们判断市场的坚挺程度或者疲弱程度提供了极有价值的线索。 使用一个字母表示半个小时的时间， 通常情况下， 8.00-8.30 成为 A， 8.30-9.00 成为 B，依次类推。 每一个字母称之为一个 TPO（即一个时间一价格机会点） * 感觉好怪异啊。。* 猜测： 在作图中，左侧竖列为价格， 右侧值为字母， 如果这个价格出现在了某一个时段里面， 则把字母加到对应的价格上。 我们把每个交易日的头一个小时形成的价格区间成为初始平衡区。 之后如果形成了新高或者新低，则称之为区间扩展。 如果市场在某一个价值水平上仅有短暂的交易， 说明市场排斥这一价格水平。 所谓价格探针是指市场探求价格区范围的行为。 在前一日价值区下的买进行为称为 回应性买进，卖出行为称之为发起性卖出，反之亦然。 我们应该顺着发起性买进或者发起性卖出进行交易，除非此处的价格很快被市场否定。 仅在上吊线之后再出现一个看跌验证信号的条件下， 上吊线才形成一个看跌信号。 我们希望在上涨行情中看到一系列越来越长的上涨实体。 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:3:7","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"蜡烛图与期权交易 期权交易提供下面几个优势： 忍峙能力： 买入期权的风险只局限于最初支付的期权费 在横向延伸市场状况下的获利能力。 方法是卖出跨市期权或者其他的期权组合。 交易策略的灵活性。 在某些情况下， 期权能够提供更高的资金杠杆率。 期权的基础知识 为了确定一份期货期权合约的理论价格， 我们需要下面几个参数 执行价格 已知 有效期限 已知 基本市场的预测价格 基本市场的波动性 短期利率的水平。 已知 未知的自变量需要预先估计，以计算期权的价格。 在决定期权价格的所有因素中，绝不可以低估波动性的重要性。 在期权交易中， 必须始终将波动性考虑进来。 所谓波动性是指人们预期今后一年之内对应基本市场的价格变化范围。 假设现在的波动率为20%， 标的价格在未来一年内， 有68%的可能局限在（（80% ~ 120% ）*当前价格） 中。 有95%的可能性局限在（（60% ~ 140%）*当前价格） 中。 波动性越大，期权的价格越昂贵。 在期权交易中，必须对未来的市场波动性做出预测。 波动性分为两类： 历史波动性和蕴含波动性。 历史波动性是根据相应基本市场的历史波动水平来计算的。 蕴含波动性是市场对期权有效期内相应的基本合约的波动性的估计。 期权交易与蜡烛图 如果市场具有强力的趋势性，并将波动性水平推到了一个非常高的底部， 当蜡烛图出现反转指标的时候， 我们可以卖出波动性。 期权的价格取决于波动性，所以人们习惯以波动性作为期权交易的形式 这种情况下，最有效的蜡烛图形态是那些标志着熊方，牛方进入休战的形态。 根据作者的经验，也出于其他原因，蜡烛图信号在研究历史波动性方面效果较好。而在研究蕴含波动性上则不如前者。 还可以利用期权交易建立具有高度风险的抄顶或者抄底头寸。 因为期权交易的风险是有限的。 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:3:8","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"利用蜡烛图进行保值交易 在当前市场状况下，应当对风险总额的多大百分比进行保值？ 蜡烛图可以解决这道难题。 不过， 绝不可以把保值头寸视为一种创造利润的市场策略。 “尝试性的底部反转线索。” ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:3:9","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"我是如何应用蜡烛图的 我： 指原书作者。 当市场处于严重超卖情况下的时候， 不宜马上做空。 过去的支撑水平将转换为新的阻挡水平。 炒股最重要的三件事： 趋势，趋势，趋势。 大趋势的重要性要超过单一的蜡烛图信号。 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:3:10","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"笔者的一些其他摘录 市场最重要的三个方面就是： 趋势，趋势，趋势。 在主体趋势是下跌的时候， 如果发现了一个启明星形态， 我们应该考虑的方案是平掉一部分既有空头头寸，而不是买入做多。 蜡烛图信号与任何技术工具一样，必须在当前主要趋势的大前提下进行研究。 我们使用的技巧和程序都是一些分析要领，并不是固定不变的严格规则。 不要在价格形态的演变过程中过早采取行动，只有在形态完成后才能有的放矢。 一定要等价格形态确实已经完成了，或者得到了其他信号的验证之后才能按照其预测意义采取行动。 我们采取的策略越是保守，耐心等待趋势反转的验证信号就越为重要。 至于到底等待多久要看自己是怎么衡量风险与报酬的。 市场永远不会错，这一点是毋庸置疑的。 当我们入市交易的时候，一方面应该树立信心，但是另一方面，也应该始终留有几分余地，考虑到一定的不确定性。 所有的长期趋势都是由短期趋势开头的。 市场上绝无一厢情愿的余地，市场自行其是，既不在意您的想法，也不关心您的头寸。 有一件事比犯错误还要命， 那便是坚持错误。 何不将止损带来的损失看做您投资事业的成本。 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:3:11","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"笔者感悟 ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:4:0","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"一些乱七八糟的想法 完美形态着实可贵， 但是也不要完全的拘于完美形态， 变体也是存在的。 过去的支撑水平将转化为新的阻挡水平，这是一条很有实用价值的交易规则。 如果想研究长期市场，应该选用周蜡烛线， 月蜡烛线。 大家都是墙头草。 先下手为强，后下手遭殃。 交易量是市场的元气？ 价格运动与表盘上的指针类似，只是表象？ ","date":"2022-03-05","objectID":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/:4:1","tags":null,"title":"读书笔记 - 日本蜡烛图技术","uri":"/2022/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%97%A5%E6%9C%AC%E8%9C%A1%E7%83%9B%E5%9B%BE%E6%8A%80%E6%9C%AF/"},{"categories":null,"content":"相对来说， 睡眠质量比睡眠时间更重要。 当夜起次数增多的时候， 即使睡得很久， 第二天也还是没有什么精神。 夜起指因任何原因的夜间醒来 当这种情况出现的时候，我们应该考虑如何才能减少夜起次数， 而不是增加睡眠时间。 据说， 睡眠是90分钟左右为一个周期。 这个周期的最后一个部分是深度睡眠， 深度睡眠对身体的恢复起着极大的作用。 当夜起次数增加的时候，深度睡眠的次数或者时间将会减少， 身体恢复将变慢。 如果出现了1个月以上的连续失眠， 应该寻求医生的帮助。 也许2周以上就应该了。 长久的失眠将会使身体素质下降到一个很低的程度，会变得难以恢复。 ","date":"2022-02-26","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%9D%A1%E7%9C%A0%E6%97%B6%E9%97%B4%E4%B8%8E%E7%9D%A1%E7%9C%A0%E8%B4%A8%E9%87%8F%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:0:0","tags":null,"title":"关于睡眠时间与睡眠质量的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%9D%A1%E7%9C%A0%E6%97%B6%E9%97%B4%E4%B8%8E%E7%9D%A1%E7%9C%A0%E8%B4%A8%E9%87%8F%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"Mac 下的 Ssh Key 无法与 Gogs 匹配的问题记录 在生成了 ssh 密钥，并且添加到了 gogs 里面之后， 笔者发现还是无法使用密钥进行 push。 进行了一番调试之后， 笔者发现问题应该出现在之前残留的配置上。 在文件 ~/.ssh/config 中， 有下面一段内容。 Host * ControlMaster auto ControlPath ~/.ssh/%h-%p-%r ControlPersist yes 在笔者把这段内容删除了之后， 就好了。 这段内容的作用应该是持久化 ssh 链接， 就是在终端进行登录的时候， 无需重复输入密码。 好像不太好用，时间太过久远，记不得了。 ","date":"2022-02-20","objectID":"/periphery/mac-%E4%B8%8B%E7%9A%84-ssh-key-%E6%97%A0%E6%B3%95%E4%B8%8E-gogs-%E5%8C%B9%E9%85%8D%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:0:1","tags":null,"title":"Mac 下的 Ssh Key 无法与 Gogs 匹配的问题记录","uri":"/periphery/mac-%E4%B8%8B%E7%9A%84-ssh-key-%E6%97%A0%E6%B3%95%E4%B8%8E-gogs-%E5%8C%B9%E9%85%8D%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"同一台虚拟机上有两个 git 服务器的时候，怎么应用 ssh key 把当前客户机的 ssh-key 分别添加到目标服务器之后， 链接不同的端口应该就可以了。 如果想对每个服务器使用不同的密钥， 可以参考下面的配置文件。 Host git.debian.mylab AddKeysToAgent yes UseKeychain yes IdentitiesOnly yes IdentityFile ~/.ssh/id_ed25519 Host debian.mylab AddKeysToAgent yes UseKeychain yes IdentitiesOnly yes IdentityFile ~/.ssh/ssh_login_ed25519 这里的两个域名 debian.mylab,git.debian.mylab 都指向了同一个虚拟机。 ","date":"2022-02-20","objectID":"/periphery/mac-%E4%B8%8B%E7%9A%84-ssh-key-%E6%97%A0%E6%B3%95%E4%B8%8E-gogs-%E5%8C%B9%E9%85%8D%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:0:2","tags":null,"title":"Mac 下的 Ssh Key 无法与 Gogs 匹配的问题记录","uri":"/periphery/mac-%E4%B8%8B%E7%9A%84-ssh-key-%E6%97%A0%E6%B3%95%E4%B8%8E-gogs-%E5%8C%B9%E9%85%8D%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"参考阅读 关于在docker中的gitlab添加ssh-key后无法推送的问题 ","date":"2022-02-20","objectID":"/periphery/mac-%E4%B8%8B%E7%9A%84-ssh-key-%E6%97%A0%E6%B3%95%E4%B8%8E-gogs-%E5%8C%B9%E9%85%8D%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:0:3","tags":null,"title":"Mac 下的 Ssh Key 无法与 Gogs 匹配的问题记录","uri":"/periphery/mac-%E4%B8%8B%E7%9A%84-ssh-key-%E6%97%A0%E6%B3%95%E4%B8%8E-gogs-%E5%8C%B9%E9%85%8D%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"本文纯属个人感受产生的推测。 ","date":"2022-02-14","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%AF%8F%E7%A7%8D%E8%A1%8C%E4%B8%BA%E7%9A%84%E7%B2%BE%E5%8A%9B%E6%B6%88%E8%80%97%E5%A4%A7%E5%B0%8F%E7%9A%84%E7%8C%9C%E6%B5%8B/:0:0","tags":null,"title":"关于每种行为的精力消耗大小的猜测","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%AF%8F%E7%A7%8D%E8%A1%8C%E4%B8%BA%E7%9A%84%E7%B2%BE%E5%8A%9B%E6%B6%88%E8%80%97%E5%A4%A7%E5%B0%8F%E7%9A%84%E7%8C%9C%E6%B5%8B/"},{"categories":null,"content":"基本内容 精力消耗从大到小排序， 推测为： 读一些 完全没有了解过的领域的书籍。 也许偏数学类的会消耗更多？ 工作中没有碰到/解决过的问题 工作 读一般类的书籍 读过和没读过的都算 小说，漫画， 影视等 看直播 创作包含在工作范畴里面。 娱乐类的内容会比较容易让人透支精力， 但是工作类的则不容易。 ","date":"2022-02-14","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%AF%8F%E7%A7%8D%E8%A1%8C%E4%B8%BA%E7%9A%84%E7%B2%BE%E5%8A%9B%E6%B6%88%E8%80%97%E5%A4%A7%E5%B0%8F%E7%9A%84%E7%8C%9C%E6%B5%8B/:1:0","tags":null,"title":"关于每种行为的精力消耗大小的猜测","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%AF%8F%E7%A7%8D%E8%A1%8C%E4%B8%BA%E7%9A%84%E7%B2%BE%E5%8A%9B%E6%B6%88%E8%80%97%E5%A4%A7%E5%B0%8F%E7%9A%84%E7%8C%9C%E6%B5%8B/"},{"categories":null,"content":"主要内容 笔者此前在使用 dbg-macro 库的时候碰到了一个奇怪的问题， 就是操作符的重载函数无法被找到。 准确的说是被模板的 SFINAE 原则忽略了。 大致的情况是这样的： 有一个结构体叫做ImVec2，它处于全局命名空间里面。 来自库imgui 操作符的重载函数放在一个叫做sight的命名空间里面。 namespace sight { void test(){ ImVec2 v; std::cout \u003c\u003c v; // ok dbg(v); // fail } } 大致代码如上面所述。 解决办法是把 操作符重载函数和类型放入同一个命名空间， 比如把操作符的重载函数移到全局命名空间里面。 在类型和操作符重载函数在不同的命名空间的时候， ADL 规则是无法生效的。 这里的问题是，似乎模板函数在生成的时候没有搜寻当前的命名空间， 但是正常函数调用的时候却会搜寻。 可能是一个编译器 bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83035. 不过笔者使用的是 clang， 也是存在这个问题的。 ","date":"2022-01-29","objectID":"/program/cpp-%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0%E5%9C%A8%E6%A8%A1%E6%9D%BF%E9%87%8C%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:0","tags":null,"title":"Cpp 操作符重载函数在模板里找不到的问题记录","uri":"/program/cpp-%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0%E5%9C%A8%E6%A8%A1%E6%9D%BF%E9%87%8C%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"dbg(v) 的解释 dbg-macro是一个用于方便输出调试信息的库， 特性大致如下 Easy to read, colorized output (colors auto-disable when the output is not an interactive terminal) Prints file name, line number, function name and the original expression Adds type information for the printed-out value Specialized pretty-printers for containers, pointers, string literals, enums, std::optional, etc. Can be used inside expressions (passing through the original value) The dbg.h header issues a compiler warning when included (so you don’t forget to remove it). Compatible and tested with C++11, C++14 and C++17. dbg是一个宏， 最终拓展开的时候，会调用下面的函数。 namespace detail { template \u003ctypename T\u003e using ostream_operator_t = decltype(std::declval\u003cstd::ostream\u0026\u003e() \u003c\u003c std::declval\u003cT\u003e()); template \u003ctypename T\u003e struct has_ostream_operator : is_detected\u003costream_operator_t, T\u003e {}; } // Specializations of \"pretty_print\" template \u003ctypename T\u003e inline void pretty_print(std::ostream\u0026 stream, const T\u0026 value, std::true_type) { stream \u003c\u003c value; } template \u003ctypename T\u003e inline void pretty_print(std::ostream\u0026, const T\u0026, std::false_type) { static_assert(detail::has_ostream_operator\u003cconst T\u0026\u003e::value, \"Type does not support the \u003c\u003c ostream operator\"); } template \u003ctypename T\u003e inline typename std::enable_if\u003c!detail::is_container\u003cconst T\u0026\u003e::value \u0026\u0026 !std::is_enum\u003cT\u003e::value, bool\u003e::type pretty_print(std::ostream\u0026 stream, const T\u0026 value) { pretty_print(stream, value, typename detail::has_ostream_operator\u003cconst T\u0026\u003e::type{}); return true; } 完成代码可以在这里浏览： https://github.com/sharkdp/dbg-macro/blob/master/dbg.h ","date":"2022-01-29","objectID":"/program/cpp-%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0%E5%9C%A8%E6%A8%A1%E6%9D%BF%E9%87%8C%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:1:1","tags":null,"title":"Cpp 操作符重载函数在模板里找不到的问题记录","uri":"/program/cpp-%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0%E5%9C%A8%E6%A8%A1%E6%9D%BF%E9%87%8C%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"拓展阅读 Issue in dbg: Type does not support the « ostream operator on custom type https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83035 ","date":"2022-01-29","objectID":"/program/cpp-%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0%E5%9C%A8%E6%A8%A1%E6%9D%BF%E9%87%8C%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:2:0","tags":null,"title":"Cpp 操作符重载函数在模板里找不到的问题记录","uri":"/program/cpp-%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0%E5%9C%A8%E6%A8%A1%E6%9D%BF%E9%87%8C%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":" 唯有市场成员具备高度的生产力，并对生命具有长期的控制能力时，货币才有其必要性。就最基本的形式来说，货币只是一种人们普遍需要的商品，因为它被公认为交换的媒介。它就如同腌鱼一样是商品，但它具有耐久性，具有公认的价值，容易分割，而且携带方便。货币可以简化交换的程序，人们无须采用“以物易物”的交换方式。它使经济价值可以计算，人们可以将主观的经济价值转换为数据的形式。它提供一种计量的方法，使人们能以货币的形式储存未消费（unconsumed）的生产。 货币是一种交换的媒介与储存价值的工具，当某人储蓄金钱时，他就持有对未消费（unconsumed）产品或服务的请求权。 源自于《专业投机原理》 ","date":"2022-01-22","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E8%B4%A7%E5%B8%81%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:0:0","tags":null,"title":"关于货币的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E8%B4%A7%E5%B8%81%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"内容 笔者在本篇里只是简单的说说关于金钱的一些看法。 ","date":"2022-01-22","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E8%B4%A7%E5%B8%81%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:1:0","tags":null,"title":"关于货币的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E8%B4%A7%E5%B8%81%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"基本内容 笔者比较认同这句话： 当某人储蓄金钱时，他就持有对未消费（unconsumed）产品或服务的请求权。 直到看了《专业投机原理》这本书的这些内容， 笔者才意识到， 金钱是不具备神圣感的， 我们应该把金钱放在脚下的位置， 而不是头顶。 金钱应该为我们服务， 而不是我们被金钱所奴役。 ","date":"2022-01-22","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E8%B4%A7%E5%B8%81%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:1:1","tags":null,"title":"关于货币的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E8%B4%A7%E5%B8%81%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"关于金钱如何为我们服务 该如何让金钱为我们服务呢？ 答案很简单： 让钱生钱。 笔者认为的途径，大概有下面几个 股票，基金 投资给别人 投资给自己 投资不动产 上述所有行为在不负责任的情况下都具有超高的风险性，即使负起该有的责任，也具备较高的风险性。 风险性意味着资金减少的可能性。 单纯的考虑风险和单纯的考虑利益一样，是存在严重偏差的。 稳定钱生钱的方法： 我国的银行储蓄。 似乎有些国家的银行利息是负数的？ ","date":"2022-01-22","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E8%B4%A7%E5%B8%81%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:1:2","tags":null,"title":"关于货币的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E8%B4%A7%E5%B8%81%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"为什么想要钱生钱？ 钱生钱可以产生财富自由， 财富自由之后就可以花更多的时间去做自己想做的事情。 此外， 因为中央银行的存在， 货币每年都会新增，所以我们手上的金钱总是在贬值的。 这里简单的说一下 为什么货币会贬值。 如前文所说，笔者也认为金钱是一种商品， 商品的话，自然是受到供需关系的影响。当金钱变多的时候，其价值必然会下跌。 ","date":"2022-01-22","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E8%B4%A7%E5%B8%81%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:1:3","tags":null,"title":"关于货币的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E8%B4%A7%E5%B8%81%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"关于金钱的神圣感 可能神圣感这几个字说的不是很准确，笔者一时间也想不出很好的词语了。 在想到自己可能会丢失金钱，而什么也得不到的时候， 笔者心中就会产生一股恐惧，使笔者拒绝做这样的行为。 当被这股恐惧所驾驭的时候，金钱就骑到了我们的头上， 之后我们就很可能会做出不理智的决定。 只有降低这神圣感，我们才能把金钱放到脚下。 ","date":"2022-01-22","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E8%B4%A7%E5%B8%81%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:1:4","tags":null,"title":"关于货币的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E8%B4%A7%E5%B8%81%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"关于捐赠 笔者认为适当的捐赠可以降低金钱在心中的神圣感。 笔者每个月会捐赠20块钱到乡村助学，养老福利之类的地方。 使用的是支付宝的爱心捐赠功能 注： 笔者确实在提倡捐赠这种行为， 但是却没有提倡捐赠金额越大越好。 笔者对捐赠金额的看法是在适度的范围内，自己开心就好。 ","date":"2022-01-22","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E8%B4%A7%E5%B8%81%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:1:5","tags":null,"title":"关于货币的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E8%B4%A7%E5%B8%81%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"本文的内容大致来自于《自我关怀的力量》 但是，这本书是笔者挺久之前看的， 也没有做读书笔记， 所以能回忆的内容不是很多。 自我关怀的力量 - 豆瓣 ","date":"2022-01-16","objectID":"/caprice/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E8%87%AA%E6%88%91%E5%85%B3%E6%80%80/:0:0","tags":null,"title":"介绍一下自我关怀","uri":"/caprice/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E8%87%AA%E6%88%91%E5%85%B3%E6%80%80/"},{"categories":null,"content":"内容 一个5岁的孩子在刷牙时不小心摔倒了，腿上划了一道小口子出来。 他哭了一下之后就拿出创可贴贴到了伤口上。 一个5岁的孩子都知道要保护伤口以免感染，但是作为成年人的我们懂得如何保护自己的心理健康吗？ 我们对待自己的身体和心理存在着很大的偏爱，我们偏爱身体， 却不注重心理健康。 —— TED 演讲： 盖 温驰: 为什么情绪急救势在必行 ","date":"2022-01-16","objectID":"/caprice/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E8%87%AA%E6%88%91%E5%85%B3%E6%80%80/:1:0","tags":null,"title":"介绍一下自我关怀","uri":"/caprice/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E8%87%AA%E6%88%91%E5%85%B3%E6%80%80/"},{"categories":null,"content":"像对待朋友一样对待自己 当我们犯了一个错误的时候， 朋友基本上都会选择安慰我们，而不是贬低，嘲讽我们。 但是我们自己却很可能在内心里面贬低，嘲讽自己。 当朋友犯了一个错误的时候， 我们基本上都会选择安慰他们， 而不是嘲讽他们。 除非他们犯了一个不可原谅的错误， 当然，这不再本篇的讨论范围内。 这就有些怪异了， 我们对朋友宽容， 朋友对我们宽容， 但是我们对自己却不宽容。 ","date":"2022-01-16","objectID":"/caprice/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E8%87%AA%E6%88%91%E5%85%B3%E6%80%80/:1:1","tags":null,"title":"介绍一下自我关怀","uri":"/caprice/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E8%87%AA%E6%88%91%E5%85%B3%E6%80%80/"},{"categories":null,"content":"自我拥抱 情绪影响身体， 身体影响情绪， 这两者是相互影响的。 在我们遇到打击，情绪低落的时候，可以考虑给自己一个拥抱。 书中说拥抱会产生一种叫做催产素的东西，而催产素会让我们的情绪好转。 如果做不到肉体上的自我拥抱， 则可以在精神上自我拥抱一下。 ","date":"2022-01-16","objectID":"/caprice/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E8%87%AA%E6%88%91%E5%85%B3%E6%80%80/:1:2","tags":null,"title":"介绍一下自我关怀","uri":"/caprice/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E8%87%AA%E6%88%91%E5%85%B3%E6%80%80/"},{"categories":null,"content":"自我安慰的示例句子 语言存在力量， 语言会使我们改变。 在碰到困难的时候， 我们停止责备自己，而是和自己说类似下面的句子会有助于我们战胜困难。 这是一个苦难的时刻 苦难是生活的一部分 这一时刻，我应该对自己好一些 我需要给自己一些关怀 ","date":"2022-01-16","objectID":"/caprice/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E8%87%AA%E6%88%91%E5%85%B3%E6%80%80/:1:3","tags":null,"title":"介绍一下自我关怀","uri":"/caprice/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E8%87%AA%E6%88%91%E5%85%B3%E6%80%80/"},{"categories":null,"content":"结束 本篇想让读者对自己的心理健康产生一些关注。 如果读者对自我关怀感兴趣， 可以阅读一下本书。 ","date":"2022-01-16","objectID":"/caprice/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E8%87%AA%E6%88%91%E5%85%B3%E6%80%80/:2:0","tags":null,"title":"介绍一下自我关怀","uri":"/caprice/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E8%87%AA%E6%88%91%E5%85%B3%E6%80%80/"},{"categories":null,"content":"内容有点乱，因为笔者并没有一个很完备的相关思想。 仅供参考 ","date":"2022-01-01","objectID":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:0:0","tags":null,"title":"精神空间和现实空间的一点闲谈","uri":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"现实空间 笔者将我们正常生活的空间称之为现实空间，现实空间里面的事物基本上都是属于在物理上存在的。 像桌子，椅子，墙壁，电脑，肉体等都是存在与现实空间的物体。 现实空间应该是最基本的载体， 精神空间应该是基于现实空间存在的， 但是它和现实空间又是完全不一样的。 ","date":"2022-01-01","objectID":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:1:0","tags":null,"title":"精神空间和现实空间的一点闲谈","uri":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"精神空间 精神空间也可以说是想象空间， 思维空间， 并不具备实体， 仅仅存在与大脑里面。 笔者认为由意识主导的思维基本上都是在精神空间发生的。 包括但不限于下面的行为： 逻辑思考 计算数学题 编程 推理等 胡思乱想 任何种类的幻想 梦境 内心独白 精神空间的主要内容（也许也可以说是基础物体。） 人的主要行为都是由意识控制，意识应该是存在精神空间里面， 或者说意识是精神空间的支撑物，有了意识才会有精神空间，如果意识泯灭了， 精神空间也将不复存在。 内心独白（Internal monologue） ，也称为自我对话（Self-talk）或内在语言（Inner speech） ，是一个人的内在的声音，在有意识时提供思想上的口头独白。 [1]通常与一个人的自我联系在一起。在规划、解决问题、自我反思、自我形象、批判性思维、情感、[2]和默读（在脑海中阅读）时尤为重要。此外，它与许多精神障碍有关，例如抑郁症。而像是认知行为疗法等治疗方法 ，会策略地调节认知行为以减轻症状。内心独白可能反映出意识和潜意识中的信念。 引用自维基百科。 ","date":"2022-01-01","objectID":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:2:0","tags":null,"title":"精神空间和现实空间的一点闲谈","uri":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"两者的联系和其他 ","date":"2022-01-01","objectID":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:3:0","tags":null,"title":"精神空间和现实空间的一点闲谈","uri":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"注意力的单一性 基本上来说就是，当意识在注意事情 A 的时候就无法注意事情 B。 这里可能涉及到一个伪的多思考性， 即把快速切换当做可以同时注意几件事情。笔者认为，在几件事情上快速切换 并不能算同时在注意那几件事情。 另外， 注意和做是不一样的， 我们可以同时🏃🏻+🎵， 但是却基本上不能同时注意在听的是什么以及脚上的感觉是什么。 ","date":"2022-01-01","objectID":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:3:1","tags":null,"title":"精神空间和现实空间的一点闲谈","uri":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"意识指令与身体动作 我们的身体动作基本上受意识的控制，但是并不完全受意识控制。 更为确切的假设应该是： 意识只是发出重要的指导性指令， 真正的身体控制是由潜意识完成的。 即： 意识： 发出指令 —\u003e 潜意识： 解释指令，并操作神经 —\u003e 具体器官， 得到神经指令，操作肌肉。 意识指令是在精神世界里面产生的， 而身体动作是在现实空间里面产生的。 ","date":"2022-01-01","objectID":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:3:2","tags":null,"title":"精神空间和现实空间的一点闲谈","uri":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"感受与精神空间 我们的感受，即视觉，听觉，触觉等， 应该是发生在现实空间， 而在精神空间处理。 即： 身体器官： 神经产生信号 —\u003e 潜意识： 过滤，翻译信号 —\u003e 意识： 得到来自潜意识的信号 ","date":"2022-01-01","objectID":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:3:3","tags":null,"title":"精神空间和现实空间的一点闲谈","uri":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"独居与动物 在完全性独居的情况下， 即除了独自生活外， 也没有养什么宠物， 也不上班， 几乎不会和别人交流。 精神空间会比现实空间具有更高的优先级， 即在不知不觉中 就会进入到精神空间， 并且会难以对现实空间提起兴趣。 这可能是因为人的懒惰性与现实空间的不变性 相组合的原因。 如果养了宠物， 或者经常会和别人交流的话，则可能现实空间会具有更高的优先级。 即注意力更关注于现实空间产生的感受。 ","date":"2022-01-01","objectID":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:3:4","tags":null,"title":"精神空间和现实空间的一点闲谈","uri":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"心流 暂时不讨论。 ","date":"2022-01-01","objectID":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:3:5","tags":null,"title":"精神空间和现实空间的一点闲谈","uri":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"两者的巨大不同 一般来说， 想法，幻想只能发生在精神空间， 而行为只能发生在现实空间。 当不具备做一件事情的基本条件时，幻想与之相关的事情并不会真的推动它。 这里笔者想表述的内容是我们不需要时时刻刻惦记一些重要的事情， 那样会压垮我们的， 我们只需要在具备条件的时候， 认真的做即可。 惦记： 应该是发生在精神空间的， 认真的做： 应该是发生在现实空间的。 此外，我们的大脑应该是很难分清幻想与现实的， 在做某一件事的时候做， 在不做的时候幻想那件事情，可能会让我们的大脑觉得它一直在做这件事。 时间久了，就可能会产生对该事物的反感。 ","date":"2022-01-01","objectID":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:3:6","tags":null,"title":"精神空间和现实空间的一点闲谈","uri":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"示例 笔者已经说出了自己的假设， 使用这些假设， 笔者想推导出下面的内容。 ","date":"2022-01-01","objectID":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:4:0","tags":null,"title":"精神空间和现实空间的一点闲谈","uri":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"精神低落相关 在精神低落或者出现强迫症症状的时候，也许可以考虑使用转移注意力的方法来解决。 因为 注意力的单一性， 所以我们在注意会让我们产生低落情绪的事情上的时候， 就无法关注其他事情。 并且这些事情的引力很强， 我们会持续的陷入其中。 如果这个时候，我们能把注意力转向到其他事情上，我们就有机会获得些许转机。 这很难， 但是并非无法做到。 笔者认为我们的情绪是一个大池子， 持续关注会产生低落情绪的事情会往池子里面注入低落情绪， 在我们去关注其他事情的之后， 我们会减缓低落情绪的注入。 我们很难在瞬间阻断注入， 这需要一个过程。 在我们做其他事情的时候， 我们会注入其他的情绪，其他的情绪会慢慢的代替失落感， 等失落感减少到了一个程度之后，应该就可以暂时性摆脱它们了。 ","date":"2022-01-01","objectID":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:4:1","tags":null,"title":"精神空间和现实空间的一点闲谈","uri":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"内心独白与观察 笔者认为内心独白会夺取注意力，尤其是当内心独白与正在做的事情不想关的时候。 比如： 一边刷碗， 一边考虑明天去游乐园穿什么衣服的时候 一边走路， 一边考虑数学题怎么计算的时候 笔者认为内心独白具有更高的注意力权限， 即在刷碗的例子中， 刷碗将会是肌肉记忆负责，也可能是潜意识在负责。 在走路的例子中， 走路也是， 不过我们可能会在走路和数学题中来回跳跃，以防撞上什么东西。 尽管如此，我们还是可能会听不到别人叫我们，或者走错路。 如果这种情况出现在了上课的时候， 那么基本上是学不到什么东西了， 因为内心独白会使我们听不到老师在说什么。 ","date":"2022-01-01","objectID":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:4:2","tags":null,"title":"精神空间和现实空间的一点闲谈","uri":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"失眠 超严重失眠以及其他疾病产生的失眠应该是无效的 笔者认为在现实空间上具备条件， 以及在精神空间上做好调整就比较容易入睡。 现实空间上的条件： 舒适的床， 被子 舒适的温度， 过冷，过热都不行 黑暗的环境 规律的作息 等等 精神空间的条件： 想要睡觉的念头 内心安稳 当因恐惧而产生的内心独白占据了精神空间的时候， 就非常难以入睡了。而那个时候， 容易丢失现实感官，沉浸在精神空间里面。 当出现这种情况的时候， 我们暂时性摆脱内心独白之后就比较容易入睡了。 核心思想是提高对现实空间的感受， 可以考虑的办法有： 深呼吸 数息 全身扫描 4-7-8 等 ","date":"2022-01-01","objectID":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:4:3","tags":null,"title":"精神空间和现实空间的一点闲谈","uri":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"拓展阅读 关于抑郁症的随想 ","date":"2022-01-01","objectID":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:5:0","tags":null,"title":"精神空间和现实空间的一点闲谈","uri":"/caprice/%E7%B2%BE%E7%A5%9E%E7%A9%BA%E9%97%B4%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%A9%BA%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"主要内容 ","date":"2021-12-25","objectID":"/program/libuv-%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5%E7%9A%84%E5%AE%9E%E7%8E%B0/:1:0","tags":null,"title":"Libuv 异步通知的实现","uri":"/program/libuv-%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5%E7%9A%84%E5%AE%9E%E7%8E%B0/"},{"categories":null,"content":"主要思路 问题是： 假设有一个线程 A， 有一个线程 B， 现在想让线程 B 给线程 A 发送消息。 本篇来说明一下如何使用 libuv 实现， 以及这样做有哪些不足。 笔者没有并没有深入研究过 libuv 这个库， 所以背后原理并不是很了解， 这里只给出如何做。 下面是一些代码内容： // 纯手写代码， 并没有经过测试 #include \"uv.h\" #include \u003ciostream\u003e #include \u003cthread\u003e static struct { uv_loop_t* uvLoop = nullptr; uv_async_t* uvAsync = nullptr; } status; // 回调函数 void callback(uv_async_t *handle){ auto p = (int*)handle-\u003edata; std::cout \u003c\u003c *p \u003c\u003c std::endl; free(p); } // 线程 A 的函数 void threadA(){ status.uvAsync = new uv_async_t(); // uv loop init auto uvLoop = (uv_loop_t*)malloc(sizeof(uv_loop_t)); status.uvLoop = uvLoop; uv_loop_init(uvLoop); uv_async_init(uvLoop, status.uvAsync, callback); // 循环执行事件 uv_run(uvLoop, UV_RUN_DEFAULT); //while(true){ // uv_run(uvLoop, UV_RUN_NOWAIT); // 只执行1个事件，且无堵塞 //} // 释放内存 // free uv uv_loop_close(status-\u003euvLoop); free(status-\u003euvLoop); status-\u003euvLoop = nullptr; delete status-\u003euvAsync; status-\u003euvAsync = nullptr; } // 线程 B 的函数 void threadB(){ // 睡眠500毫秒 等待uv 初始化 std::this_thread::sleep_for(std::chrono::milliseconds(500)); // auto async = g_UIStatus-\u003euvAsync; // 准备数据 auto p = (int*)calloc(1, sizeof(int)); *p = 1; async-\u003edata = p; // 发送给另外一个线程 uv_async_send(async); } int main(void){ std::thread t(threadB); threadA(); t.join(); return 0; } 先初始化一个uv_loop_t和 一个uv_async_t ，之后在附属线程先准备数据， 然后使用uv_async_send()函数发送数据即可。 注意： 这样做有一个缺点， 即 uv_async_t 一次只能保存1个数据， 如果前一个数据没有被使用，然后又来了一个数据，此时前一个数据会被顶掉。 可能会产生内存泄露。 选择一个线程安全的队列可以避免这个问题， 但是笔者并没有找到合适的线程安全的队列库，估计要使用互斥锁，条件变量自己手写一个。 ","date":"2021-12-25","objectID":"/program/libuv-%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5%E7%9A%84%E5%AE%9E%E7%8E%B0/:1:1","tags":null,"title":"Libuv 异步通知的实现","uri":"/program/libuv-%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5%E7%9A%84%E5%AE%9E%E7%8E%B0/"},{"categories":null,"content":"拓展阅读 C++创建对象时区分圆括号( )和大括号{ } GitHub - fffaraz/awesome-cpp: A curated list of awesome C++ (or C) frameworks, libraries, resources, and shiny things. Inspired by awesome-… stuff. uv_run()函数的第二个参数详解 Threads — libuv documentation Can I do custom events with libuv? ","date":"2021-12-25","objectID":"/program/libuv-%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5%E7%9A%84%E5%AE%9E%E7%8E%B0/:2:0","tags":null,"title":"Libuv 异步通知的实现","uri":"/program/libuv-%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5%E7%9A%84%E5%AE%9E%E7%8E%B0/"},{"categories":null,"content":"基本内容 项目地址： https://github.com/bombela/backward-cpp 这个库是一个用于在程序崩溃的时候打印堆栈信息和代码信息的 c++库。 笔者是在 mac 系统上尝试使用的，该库的尝试结果如下： 可以打印函数名，但无法打印文件名和行号， 有时候连函数名也无法打印。 详情可见： https://github.com/bombela/backward-cpp/issues/231 据说在 linux 平台上是可以完美打印信息的， 笔者并没有尝试过。 至于怎么使用这个库， 作者在主页上写的很清楚， 这里就不再赘述了。 ","date":"2021-12-11","objectID":"/program/backward-cppd%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/:1:0","tags":null,"title":"Backward Cpp库的使用记录","uri":"/program/backward-cppd%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"其他 ","date":"2021-12-11","objectID":"/program/backward-cppd%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/:2:0","tags":null,"title":"Backward Cpp库的使用记录","uri":"/program/backward-cppd%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"libdwarf 笔者寻找的到的库在 mac 上编译有一点点问题，处理一下就好了。 注意，即使编译好了这个库，也无法打印文件名和行号 libdwarf 在mac平台上编译有问题， 添加 target_link_libraries(${target} PUBLIC ${LIBELF_LIBRARIES} \"z\") “z” 库的链接即可。 添加到 Cmake 的配置文件里面。 安装的时候， include 会提示有问题， 笔者是采取手动复制的情况。 即手动复制文件夹到 /usr/local/include/libwarf 里。 build/config.h 不知道有没有用，一起复制过去了。 ","date":"2021-12-11","objectID":"/program/backward-cppd%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/:2:1","tags":null,"title":"Backward Cpp库的使用记录","uri":"/program/backward-cppd%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"输出一个宏定义的值 #define XSTR(x) STR(x) #define STR(x) #x #pragma message \"The value of BACKWARD_HAS_BACKTRACE_SYMBOL: \" XSTR(BACKWARD_HAS_BACKTRACE_SYMBOL) #pragma message \"The value of BACKWARD_HAS_UNWIND: \" XSTR(BACKWARD_HAS_UNWIND) #pragma message \"The value of BACKWARD_HAS_BACKTRACE: \" XSTR(BACKWARD_HAS_BACKTRACE) 可见上述代码， 定义了XSTR, STR 两个宏之后， 使用 XSTR(name) 的形式即可以打印一个宏的值。 ","date":"2021-12-11","objectID":"/program/backward-cppd%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/:2:2","tags":null,"title":"Backward Cpp库的使用记录","uri":"/program/backward-cppd%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"本篇来尝试描述一下接口和继承的相关内容。 ","date":"2021-12-05","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.2-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/:0:0","tags":null,"title":"自制脚本语言[7.2] 接口与继承","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.2-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/"},{"categories":null,"content":"基本内容 函数和方法应该是同义的。 ","date":"2021-12-05","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.2-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/:1:0","tags":null,"title":"自制脚本语言[7.2] 接口与继承","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.2-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/"},{"categories":null,"content":"接口 在 Java 和 C# 里面， 有接口的概念。 大体上存在下面的规则。 一个接口可以被另外一个接口继承 在接口里面可以定义静态常量， 抽象函数， default 函数 一个接口可以被另外一个类实现。 当一个类实现了某个接口的时候， 需要实现该接口的所有非 default 函数 一个类可以同时实现多个接口 当一个函数的参数的类型为一个接口的时候， 可以传入该接口类型的实现类的对象。 ","date":"2021-12-05","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.2-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/:1:1","tags":null,"title":"自制脚本语言[7.2] 接口与继承","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.2-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/"},{"categories":null,"content":"继承 继承大体上存在下面的规则。 一个类可以继承自另外一个类。 单继承的语言基本上一个类最多只能继承另外一个类，但是可以同时实现若干个不同的接口。 子类可以看到父类的 所有非private的成员，包括变量，函数。 在构造子类的时候会先构造出父类。 父类看不到子类的属性 一个类可以被诺干个不同的类分别继承。 子类可以覆写父类的方法 ","date":"2021-12-05","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.2-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/:1:2","tags":null,"title":"自制脚本语言[7.2] 接口与继承","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.2-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/"},{"categories":null,"content":"主要思路 先来讨论一下如何实现继承， 继承的好处就是代码复用。 可以考虑下面的方式。 在存放类型信息的结构里面添加一个新的字段， 表示父类列表。 在构造当前类的时候， 优先构造一个父类 搜索当前类成员的时候， 如果发现找不到，则让父类寻找 如果懒得实现接口的话，可以只实现类的继承， 然后使用多继承的方式代替接口。 这样做的话，可能会带来潜在的问题，但是可以节省一些工作量。 潜在的问题大概有下面这些： 混乱度提高 多个父类具有相同名称的成员的时候不好处理 在构造父类的时候可能会存在一些问题。 可以使用规范的方式来尝试避免这些问题。 使用 I 开头的类表示接口，并约定不再接口里面定义成员变量。 所有的接口函数都提供一个默认实现， 实现的内容是抛出一个异常。 ","date":"2021-12-05","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.2-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/:1:3","tags":null,"title":"自制脚本语言[7.2] 接口与继承","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.2-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/"},{"categories":null,"content":"总结 核心的实现思路就是反推， 根据概念一条一条的实现即可。 拆解问题，划分为一个个更小的细节， 然后一一实现这些细节， 就会解决这个问题。 这个世界上的绝大多数问题都可以这么解决。 ","date":"2021-12-05","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.2-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/:2:0","tags":null,"title":"自制脚本语言[7.2] 接口与继承","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.2-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%BB%A7%E6%89%BF/"},{"categories":null,"content":"游戏相关 笔者花了58个小时通关了只狼一周目，断绝不死结局。 绝大多数的 BOSS，精英怪都打掉了，还包括了无首和七面武士。 笔者的反应能力不高，算是一个正常的手残玩家了。 其中最难打的，笔者认为是怨恨之鬼，打了差不多6个小时左右。 之后，笔者又花了11个小时左右打通了修罗结局。 两个蛇眼是真的烦 葫芦强化到了极限，佛珠还差2个，根据攻略，那两个应该是在复归常人结局里。 就笔者本人来说， 还是非常享受这个游戏的。 除此之外， 笔者在游戏期间， 还产生了一些有关人生观念的想法， 所以记录一下。 ","date":"2021-11-21","objectID":"/caprice/%E5%8F%AA%E7%8B%BC%E5%B8%A6%E7%BB%99%E7%AC%94%E8%80%85%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/:0:1","tags":null,"title":"只狼带给笔者的一些思考","uri":"/caprice/%E5%8F%AA%E7%8B%BC%E5%B8%A6%E7%BB%99%E7%AC%94%E8%80%85%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"},{"categories":null,"content":"人生观念相关的一些想法 坚持一下， 总会过去的。 如果实在打不过， 可以寻求下帮助。 看攻略，视频等 不能只关注自己， 需要关注对手， 而且要比较密切的关注对手 无需恐惧，平常心面对即可。 其中重要的一点是不能只关注自己，而要观察对手的出招。 如果无视对手， 胡乱挥刀的话， 很容易就挂了。 仔细观察对手的出招，再使出弹反即可。 ","date":"2021-11-21","objectID":"/caprice/%E5%8F%AA%E7%8B%BC%E5%B8%A6%E7%BB%99%E7%AC%94%E8%80%85%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/:0:2","tags":null,"title":"只狼带给笔者的一些思考","uri":"/caprice/%E5%8F%AA%E7%8B%BC%E5%B8%A6%E7%BB%99%E7%AC%94%E8%80%85%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"},{"categories":null,"content":" 名称 键盘符号 备选符号 Control key ctrl ^ Option key alt ⌥ option Command key cmd ⌘ command  Shift key ⇧ shift Caps Lock ⇪ ⇓ CapsLock https://www.key-shortcut.com/en/mac-osx/command-keys-mac https://www.posterpresentations.com/alt-code-cheatsheet.html https://www.alt-codes.net/ ","date":"2021-11-21","objectID":"/periphery/mac-%E9%94%AE%E7%9B%98%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E5%88%97%E8%A1%A8/:0:0","tags":null,"title":"Mac 控制键符号列表","uri":"/periphery/mac-%E9%94%AE%E7%9B%98%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E5%88%97%E8%A1%A8/"},{"categories":null,"content":"本篇来尝试描述一下类如何实现。 类是面向对象编程的基础， 即使不实现一个完全的类， 也应该实现一个可以储存复合数据的结构。 一般情况下，都会将类实例化出来的东西叫做对象。 关于面向对象的思想，不属于本篇的讨论范围。 本篇所讨论的仅仅是基本的实现方式， 关于如何优化内存的内容，暂时不讨论。 ","date":"2021-11-14","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.1-%E7%B1%BB/:0:0","tags":null,"title":"自制脚本语言[7.1] 类","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.1-%E7%B1%BB/"},{"categories":null,"content":"基本内容 ","date":"2021-11-14","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.1-%E7%B1%BB/:1:0","tags":null,"title":"自制脚本语言[7.1] 类","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.1-%E7%B1%BB/"},{"categories":null,"content":"langX 代码示例 // 声明一个类 Student { name; age = 10 ; Student =\u003e (name,age){ this.name = name; this.age = age; printInfo(\"in ctor.\"); } a =\u003e { print(\"hello,a!\\n\");} printInfo =\u003e (a3){ print(\"name: \" + name + \"\\n\"); print(\"age: \" + age + \"\\n\" ); print(\"a3: \" + a3 + \"\\n\");} } // 声明一个对象 s2 = new Student(\"hideDragon\",20); b = s2.age; c = s2.name; print(\"b: \" + b + \"\\n\"); print(\"c: \" + c + \"\\n\"); print(\"s2.age: \" + s2.age + \"\\n\"); 在 langX 里， 笔者使用类名 { 字段列表 和 函数列表 } 的形式来声明一个类。 读者可以设计自己喜欢的语法。 这里说一点题外话， 笔者省略 class 或其他关键字的想法是为了节省没必要的关键字。 但是现在仔细想想，虽然确实省下了关键字， 但是却增加模糊性，使代码不太好辨别。不论是阅读还是解析上。 ","date":"2021-11-14","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.1-%E7%B1%BB/:1:1","tags":null,"title":"自制脚本语言[7.1] 类","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.1-%E7%B1%BB/"},{"categories":null,"content":"主要思路 将类的 字段列表， 函数列表都保存下来即可。 在类实例化的时候， 需要复制字段列表， 但是不必复制函数列表， 使用一个指针指向类信息， 或者使用函数对象的指针也行。 如何实现函数，已经在 6.1节中有所介绍。 字段信息， 大致有下面的内容： 访问修饰符 （可省略） 字段名称 字段类型 （弱类型语言可省略） 字段的默认值 其中字段名称， 如果考虑在编译的时候全部转成索引，且不实现运行时的反射的话， 可以考虑不保存。 不过，脚本语言一般情况下还是需要保存字段名称， 在动态加载新的脚本的时候可能会用到。 在生成对象之后， 还需要调用类的构造函数。 如果实现了析构函数的话， 在类的内存被释放之前还应该调用类的析构函数。 关于类函数调用的内容将在后续章节讲解。 ","date":"2021-11-14","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.1-%E7%B1%BB/:1:2","tags":null,"title":"自制脚本语言[7.1] 类","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.1-%E7%B1%BB/"},{"categories":null,"content":"总结 在 c, lua 和 js 里面好像没有继承的观念， 在 java/c# 里面是单继承， 但是可以实现多个接口。 在 cpp 里面好像是没有接口的观念， 但是可以多继承。 笔者猜测： 在 c里面应该可以使用 宏，或者内存布局等术来模拟继承。 无论他们对待继承的态度如何， 他们都实现了复合数据的结构， 所以读者在实现自己的脚本语言的时候， 也应该提供一个类似的机制。 此外，与函数类似， 类也比较像一个包装。 ","date":"2021-11-14","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.1-%E7%B1%BB/:2:0","tags":null,"title":"自制脚本语言[7.1] 类","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%807.1-%E7%B1%BB/"},{"categories":null,"content":"本篇来描述一下匿名函数的实现。 ","date":"2021-11-14","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/:0:0","tags":null,"title":"自制脚本语言[6.2] 匿名函数","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"},{"categories":null,"content":"基本内容 ","date":"2021-11-14","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/:1:0","tags":null,"title":"自制脚本语言[6.2] 匿名函数","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"},{"categories":null,"content":"langX 代码示例 onEvent =\u003e (flag, callback) { // xxx } callEvent =\u003e (flag, data){ local cb = findCallback(flag); if( cb ){ cb(data); } } registerListeners =\u003e { // 这里的第二个参数就是一个匿名函数。 onEvent(1, data =\u003e { println(\"[DEBUG] event 1 = \" + data.toString()); }); onEvent(2, data =\u003e { println(\"[DEBUG] event 2 = \" + data.toString()); }); } 笔者在 langX 里面使用了类似函数声明的语法来声明一个匿名函数。 当一个函数的参数需求另外一个函数的时候， 使用匿名函数很方便。 ","date":"2021-11-14","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/:1:1","tags":null,"title":"自制脚本语言[6.2] 匿名函数","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"},{"categories":null,"content":"主要思路 设计了合适的语法之后， 解析该语法生成一个函数结构即可。 实现了函数这个功能之后， 这一部分做起来还是比较简单的。 在处理函数名称的地方， 给一个空字符串或者 nullptr之类的即可。 匿名函数除了没有名字之外， 其他行为和函数几乎一样。 ","date":"2021-11-14","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/:1:2","tags":null,"title":"自制脚本语言[6.2] 匿名函数","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"},{"categories":null,"content":"一些其他问题 在大多数语言里面， 匿名函数似乎都可以引用创建时候的变量环境的值。 举个🌰， cpp 里面有一个捕捉列表， 用于捕获声明时环境的值。 而 js 可以直接使用。 看下面的 js 代码。 function callWrapper(cb = Function()) { cb(); } function test() { let foo = 'bar'; callWrapper(function() { console.log(foo); // bar foo = 1; }); console.log(foo); // 1 } test(); 点击链接 https://jsfiddle.net/qpgjLsrd/ 应该可以尝试一下。 控制台的输出结果在右下角的 Console 窗口里面，点一下Console标题会出现窗口。 直接打开 Chrome， 按下F12打开开发者工具，找到 Console,也能执行上面的代码。 看上面的代码， callWrapper函数的参数是一个匿名函数， 该匿名函数内部并没有一个叫做 foo 的变量， foo 是出现在了 匿名函数的上面。 那么， 这个该如何实现呢？ 这里笔者仅提供几个思路，因为笔者并没有真正实现过。 将匿名函数的执行环境从声明环境上拓展出来。 可以选择继承自 匿名函数的声明环境 匿名函数自身内部的变量还是要储存在内部。 让匿名函数在搜索变量的时候先从父环境中搜索。 在做语法分析的时候， 锁定变量出现的位置， 然后在真正创建匿名函数的时候引用变量 ","date":"2021-11-14","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/:1:3","tags":null,"title":"自制脚本语言[6.2] 匿名函数","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"},{"categories":null,"content":"总结 匿名函数 似乎也被叫做 闭包， lambda 表达式等。 ","date":"2021-11-14","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/:2:0","tags":null,"title":"自制脚本语言[6.2] 匿名函数","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"},{"categories":null,"content":"笔者这几天抽空读完了这本C++ Notes for Professionals book， 所以写一篇读书笔记， 记录下笔者还记得的内容。 https://goalkicker.com/CPlusPlusBook/ 这本书对于从c 转向 cpp 的读者挺有帮助的， 笔者感觉。 ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:0:0","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"详细内容 本篇内容基本上都是以 c++17的版本来写的。 绝大部分代码都是纯手写，可能会出现部分错误。 ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:0","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"class, struct 关键字 class关键字用于定义一个类， struct关键字用于定义一个结构。 类和结构大体一致， 是可以在内部进行转换的。区别在于 类的默认访问修饰符是private，而结构是public。 并且在一些地方，两个关键字是可以互换的。比如： enum class x{}; enum struct x{}; 在类继承的时候， 如果没有给访问修饰符， 则是会一个默认的。 请看下面的示例。 struct B1 {}; class B2 {}; struct D1: B1{}; // 等同于： struct D1: public B1{}; 因为 B1是一个 struct struct D2: B2{}; // 等用于： struct D2: private B2{}; 因为 B2 是一个 class class D3: B1{}; // 等同于 D1 class D4: B2{}; // 等同于 D2 ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:1","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"模板的理解 c++的模板在笔者的理解里面更偏向于是一种代码生成技术。 模板类的代码混合类型，模板函数的代码混合参数 生成一个具体的类，结构，函数。 很多模板类的代码很复杂， 难懂。 模板类可以在编译期计算一些值， 虽然笔者感觉好像没什么用。 模板的参数可以是具体的值，并不需要完全是类型。 模板的参数可以特定化。 SFINAE; 限制特定的类型使用特定的模板。 decltype(e) 用于获取 e 的类型。 模板类的实现应该放在头文件里面， 除非在极其少数的情况下。 而正常函数的实现应该在源代码文件里面， 因为 ODR 原则。 即只应该存在一处定义， 但是可以存在多处声明。 使用forwarding reference 可以实现完美转发。 下面给一些代码示例。 // 模板特定化 // template\u003cclass T\u003e struct S { using type = T; } // 将 char,short 都重定位到 int template\u003c\u003e struct S\u003cchar\u003e { using type = int; } template\u003c\u003e struct S\u003cshort\u003e { using type = int; } // 使用例子 void test(){ S\u003cchar\u003e::type a = 1; S\u003cfloat\u003e::type b = 1.0f; } // 使用具体值的模板 template\u003cclass T, std::size_t N\u003e struct MyArray{ T* arrayPointer = nullptr; MyArray() { arrayPointer = new T[N]; } ~MyArray() { if(arrayPointer){ delete[] arrayPointer; arrayPointer = nullptr; } } std::size_t size() const { return N; } } void test(){ MyArray\u003cint, 5\u003e a1; // 注意这里的5 a1.arrayPointer[0] = 15; a1.arrayPointer[1] = 25; a1.size(); } // SFINAE // Substitution Failure Is Not An Error // 翻译过来大致是 在模板里面的部分代码如果是无效的格式，只会从备选列表中移出该模板， 而不会产生一个编译错误 // 当然， 如果移出完了之后， 没有可用的模板的话， 仍然还是会产生一个错误 // 这个可用于排除某些模板 template \u003cclass T\u003e auto myBegin(T\u0026 t) -\u003e decltype(t.begin()){ return t.begin(); } template \u003cclass T\u003e auto myBegin(T\u0026 t) -\u003e decltype(t.start()){ return t.start(); } void test() { std::vector\u003cint\u003e notUsed; auto iter = myBegin(notUsed); int a = *iter; } // 上述代码中会调用第一个 myBegin() 因为 std::vector\u003cint\u003e 类型没有 start 函数，只有 begin 函数 // 而如果一个类型有 start 函数，没有 begin 函数的话， 应该就会使用第二个 // 如果一个类型既有 start 函数，又有 begin 函数的话， 应该就会报错了， 因为模糊不清的调用 // 上述示例只是一个说明示例， 一般情况下，不会这么写代码。 // 在 SFINAE 中， 比较常用的应该是 std::enable_if\u003c\u003e // 后面的 = 0 是 模板参数的默认值 template\u003ctypename Int, std::enable_if_t\u003cstd::is_signed\u003cInt\u003e::value, int\u003e = 0\u003e void incr2(Int\u0026 target, Int amount); template\u003ctypename Int, std::enable_if_t\u003cstd::is_unsigned\u003cInt\u003e::value, int\u003e = 0\u003e void incr2(Int\u0026 target, Int amount); // forwarding reference template\u003cclass F, typename... Args\u003e void func(F f,Args\u0026\u0026... args){ f(std::forward\u003cArgs\u003e(args) ...); } // 这里的 两个\u0026\u0026 表示 forwarding reference,而不是右值引用 // ... 是 fold 表达式， 用于展开参数列表 模板的 SFINAE规则可能找不到一个不同命名空间的函数，具体可看： [cpp 操作符重载函数在模板里找不到的问题记录](./cpp 操作符重载函数在模板里找不到的问题记录) ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:2","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"让函数返回多个值 可以使用下列类型： std::tuple\u003cA,B,C,D,E\u003e 自定义结构 std::pair\u003ca,b\u003e 使用 c++17的结构绑定 可以很方便的使用上面的返回值 std::vector\u003cx\u003e 使用参数。 （指针， 或者回调函数） 下面给一些示例 // std::tuple\u003c\u003e 在 ≥ c++17 的时候， 是一个比较不错的选择 std::tuple\u003cint, float, char\u003e randomData(){ return {1, 1.0f, 'A'}; // 也可以用 std::make_tuple\u003c\u003e() } // 使用 stuple 传递引用 std::tuple\u003cint\u0026\u003e xxx(){ static int a = 1; return std::forward_as_tuple(a); } void test(){ // ≥ c++17 结构绑定 auto [i,f,c] = randomData(); // 如果不使用结构绑定， 应该是使用 std::get\u003c0\u003e(tuple), std::get\u003c1\u003e(tuple) 这种方式 std::out \u003c\u003c i \u003c\u003c ',' \u003c\u003c f \u003c\u003c ',' \u003c\u003c c \u003c\u003c std::endl; auto [ref] = xxx(); ref = 15; } // 自定义结构返回 auto customStructReturns(){ struct { int x = 0; int y = 0; } point; point.x = 15; point.y = 20; return point; } void test(){ auto [x,y] = customStructReturns(); std::out \u003c\u003c x \u003c\u003c std::endl; std::out \u003c\u003c y \u003c\u003c std::endl; } // 这种方式使用起来没有 std::tuple 那么清晰， 因为使用 auto 的话，调用者不知道结构的内容 ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:3","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"lambda 表达式 lambda 表达式是一个语法糖，代表了一个匿名函数。 格式为： [捕获列表](参数列表) -\u003e 返回值 { 代码块} 返回值的部分可以省略， 让编译器自行推断。 默认情况下， 按值捕获的变量不可修改， 可以使用mutable关键字改变这个情况。 Generic lambda ， 当成模板的 lambda 表达式。 下面是一些示例代码 void test(){ auto abc = [](int i) { std::cout \u003c\u003c i \u003c\u003c std::endl; }; abc(1); int a = 0; int b = 1; auto la1 = [a,\u0026b](){ // a 是按值捕获， b 是按引用捕获 a = 10; b = 20; }; la1(); // 在调用的时候 不需要传递捕获部分的变量， 只需要传递参数即可。 std::cout \u003c\u003c a; // 0 std::cout \u003c\u003c b; // 20 auto la2 = [](bool b) -\u003e float { return b ? 1 : 1.5f; } la2(true); auto la3 = [a]() mutable -\u003e float{ return ++a; } la3(); // 1 la3(); // 2, 虽然这里是2， 但是 当前作用域里面的 a 的值并无变化 std::cout \u003c\u003c a; // 0 // 上面的 la3 的内容 参考自 https://blog.csdn.net/Trouble_provider/article/details/90521215 // generic lambda auto gl1 = [](auto a, auto b) { return a + b; } gl1(1, 2); // 3 gl1(1.5f, 2.5f); // 4 auto lamb1 = [](int \u0026\u0026x) {return x + 5;}; auto lamb2 = [](auto \u0026\u0026x) {return x + 5;}; int x = 10; lamb1(x); // 非法， 因为 x 不是一个右值， 需要使用 `std::move(x)` lamb2(x); // 合法， x 会变成一个 int\u0026 } ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:4","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"friend, mutable 关键字 使用 friend 关键字指定一个类为友元类， 一个函数为友元函数 友元类和友元函数都可以访问该类的私有属性 友元类并不继承。 mutable 指示一个类的非静态成员变量可以在 const 函数中修改。 ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:5","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"多态性 基类应该声明一个 虚的析构函数， 否则可能会产生未定义的行为。 使用using关键字引用父类的函数 函数覆写时应该标记一个override 非覆写的同名函数会隐藏父类的函数，除非使用using关键字。 对一个虚函数后面加上 = 0 可以使该函数变成一个纯虚函数。 纯虚函数也可以添加实现。 拥有纯虚函数的类无法被实例化。 最好使用dynamic_cast来向下转换指针。 看下面这段代码： class Base { Base() = default; virtual ~Base() = default; }; class D : Base { int* pointer = nullptr; ~D() { if(pointer){ delete pointer; pointer = nullptr; } } }; void test(){ Base *b = new D(); auto d = dynamic_cast\u003cD*\u003e(b); // 向子类指针转换， 如果无法转换，则d 是一个 nullptr delete b; // 如果这里的 Base::~Base() 不是虚函数的话， D::~D() 可能就不会调用，就会产生内存泄露 b = nullptr; } // 函数覆写 class Base { void func(int i ); void func(float f); virtual void abc(int i); virtual void foo(int i); }; class D : Base { void abc(int i) override; void foo(std::string i) override; // 这里编译器应该会给出警告，这个函数并没有覆写任何一个父类的函数 void func(std::string msg); // 上面那个语句应该会隐藏父类的两个 func 函数 // 除非使用下面的 using 语句显示的引入。 using Base::func; }; ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:6","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"RAII Resource Acquisition Is Initialization 暂时没去搜索中文是什么意思。 简单来说，就是使用构造函数和析构函数完成对资源的占用和释放。 看下面的代码 // v8::Context::Scope 的源代码 class V8_NODISCARD Scope { public: explicit V8_INLINE Scope(Local\u003cContext\u003e context) : context_(context) { context_-\u003eEnter(); } V8_INLINE ~Scope() { context_-\u003eExit(); } private: Local\u003cContext\u003e context_; }; // 可以看到，在构造函数里面 Enter, 在 析构函数里面 Exit // 除此之外， 这类类型一般也会把 拷贝，移动函数都禁用掉。 // 下面给出另外一个示例 class Lock{ public: void lock(){} void unlock(){} } class LockHelper { Lock\u0026 lock; LockHelper(Lock\u0026 lock) : lock(lock){ lock.lock(); } ~LockHelper(){ lock.unlock(); } // 禁用拷贝函数， 移动函数 LockHelper() = delete; LockHelper(LockHelper const\u0026) = delete; void operator=(LockHelper const\u0026) = delete; LockHelper(LockHelper\u0026\u0026) = delete; void operator=(LockHelper\u0026\u0026) = delete; }; void test(){ Lock l; LockHelper(l); // auto lock and unlock. // do something. // 如果使用 java 的话， 就需要使用 try-catch-finally 的 finally 部分。 } ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:7","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"左值和右值 lvalue left value: 左值。 一般可具有名字的都是左值 xvalue expiring value: 将亡值。 std::move()函数的返回值 prvalue pure right value: 纯右值。 没有名字的表达式的。 一个临时对象 std::string(\"123\") 函数的返回值 （除了引用） 字面量 1, true, 0.5f, 'a' lambda 表达式 rvalue right value: 右值， xvalue 和 prvalue的统称。 glvalue lvalue 和xvalue的统称 函数参数中， 可以用Type\u0026\u0026 表示需要一个右值。 使用右值对应的 move 语义可以提高程序性能。 看下面的示例代码： class Foo { int i = 0; int get() const { return i; } Foo() = default; ~Foo() = default; // copy Foo(Foo const\u0026 rhs){ this.i = rhs.i; } Foo\u0026 operator=(Foo const\u0026 rhs){ if(this == \u0026rhs){ return; // 防止 自我拷贝赋值 除了这样写，还可以使用 copy-swap 的写法 } this.i = rhs.i; return *this; } // move Foo(Foo\u0026\u0026 rhs){ this.i = rhs.i; rhs.i = 0; // 这里相当于把 rhs 的数据偷了过来。 当前类里面并没有包含动态内存， 所以效果不明显 // 如果存在动态内存的话， 可以防止多次无用的内存申请。 // 在把 rhs 的数据偷过来之后， 要保证 rhs 是能够正常析构和复制的。 } // 这里是 Foo::operator=() 函数的另外一个重载。 区别于 Foo const\u0026 Foo\u0026 operator=(Foo\u0026\u0026 rhs){ // 这里应该可以不做 自我移动赋值的判断。 // 除非有人这样写： Foo f; f = std::move(f); // 这里的 i 是 int 类型，所以调用 std::move 应该是没有什么用 // 但是其他类型的话，应该是有用的。 // 这里应该是同样可以使用 copy-swap 的。 this.i = std::move(rhs.i); return *this; } }; void bar(Foo \u0026\u0026f){ std::cout \u003c\u003c f.get(); } void test(){ Foo f1; Foo f2; f2 = f1; // Foo::Foo(Foo const\u0026 rhs) 复制构造函数 f1 = {}; // Foo::operator=(Foo\u0026\u0026 rhs) 移动 Foo f3 = {}; // Foo::Foo(Foo\u0026\u0026 rhs) 移动构造函数 Foo f4 = std::move(f2); // Foo::Foo(Foo\u0026\u0026 rhs) // 现在 f2 应该是无法继续使用了。 如果使用的话， 可能会产生一个未定义的行为 bar(Foo()); // bar(f3) // 这应该会报错 } ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:8","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"循环, auto 等 auto 可以用于类型推断 范围的 for 循环是基于对象的 begin(), end()函数的。 看下面的代码： void test(){ auto i = 1; // i = int auto c = 'a'; // c = char std::vector\u003cint\u003e v1; auto begin = v1.begin(); // begin = std::vector\u003cint\u003e::iterator auto\u0026 ri = i ; // ri = int\u0026 // 相当于 // for(auto iter = v1.begin(); iter != v1.end(); ++iter) { // auto const\u0026 item = *iter; // ... 代码 // } for( auto const\u0026 item : v1){ std::cout \u003c\u003c item; } } ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:9","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"指针的运算和比较 指针的比较只能在同一个数组里面， 否则会产生 未定义的行为 指针最多可以到数组最后一个元素的地址 +1个元素 的位置。 有效的指针进行相减的时候会得到元素个数 ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:10","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"std 里的一些工具函数 void test(){ int a[10]; std::size(a); // 10 std::begin(a); // 类似迭代器 [begin] std::end(a); // 类似迭代器 [end] std::vector\u003cint\u003e b; std::begin(b); std::end(b); auto iter1 = std::find(b.begin(), b.end(), 1); // 寻找元素 // 使用函数查找元素 auto iter2 = std::find_if(std::begin(a), std::end(b), [](int i) { return i \u003e 5; }); std::vector v; v.push_back(1); v.push_back(2); std::swap(v[0], v[1]); // 交换元素 OR 调整元素顺序 } ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:11","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"位操作 1bit 就是1位， 值只有0或者1 一个 char 有8位 一个 int 通常上是32位 并非绝对，取决于平台。 位操作基本上就是改变第 N 位的值。 操作符列表 | 按位或操作， 两个操作数的同一个位 有一个为1 则该位的值为1. 0 0 0 1 0 0 1 0 1 0 0 1 1 0 0 0 | 1 0 0 1 1 0 1 0 结果 ^ 按位异或， 两个操作数的同一个位的值相同时，该位的值为0 不同时为1. int a = 42; int b = 64; // 使用按位异或的方式交换数值 a ^= b; b ^= a; a ^= b; \u0026 按位与，两个操作数的同一个位的值都为1的时候，值为1，否则为0. \u003c\u003c 左移， 将操作数的每一个位的值都左移 N 位， 多的部分会被省略 N 不能为负数， 也不能大于类型所占的位数。 \u003e\u003e 右移， 将操作数的每一个位的值都右移 N 位， 多的部分会被省略 std::bitset 这个是一个工具类？ 用于快捷操作位的。 bitset::set() 设置所有位的值为1 bitset::flip(N) 反转第 N 位的值 bitset::test(N) 检查第 N 位的值是否为1 std::bitset\u003c10\u003e x; x.set(); // Sets all bits to '1' ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:12","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"操作符重载 // 结构外重载 T operator+(T lhs, const T\u0026 rhs) { lhs += rhs; return lhs; } T\u0026 operator+=(T\u0026 lhs, const T\u0026 rhs) { //Perform addition return lhs; } // 结构内重载 T operator+(const T\u0026 rhs) { *this += rhs; return *this; } T\u0026 operator+=(const T\u0026 rhs) { //Perform addition return *this; } 部分操作符既可以在结构内重载， 也可以在结构外重载。 但是部分操作符只能 在结构内重载。 类和结构一样的。 更多内容可以阅读原书， 或者查阅：https://en.cppreference.com/w/cpp/language/operators 可以重载的操作符大致有下面这些 算数操作符 +,-,*,/,%,... 逻辑判断操作符 \u003e,\u003c,==,... 位操作运算符 \u0026,|,^,\u003c\u003c,\u003e\u003e,... 函数调用的操作符 () 方括号的这个操作符 [] 指针相关的操作符 -\u003e, -\u003e* 类型转换的操作符 new 和 delete 操作符也能重载？ ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:13","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"文件操作 std::ofstream, std::ifstream, std::fstream 使用写模式，读模式，读写模式打开文件 上面的类型可以使用操作符 \u003e\u003e 读取内容， \u003c\u003c 写入内容 imbue() 函数可以用于修改 Locale c++17 新增了一个叫做std::filesystem 的命名空间 好像是来自 boost? std::filesystem::exists(path) 检测文件是否存在 std::filesystem::copy_file(path1, path2) 复制文件 std::filesystem::directory_iterator 目录迭代器 更多 API 请自行查阅文档 部分示例代码 std::ofstream output(\"foo.txt\"); output \u003c\u003c \"text!\"; output.flush(); // 刷新流 output.close(); // 关闭流， 这一步应该会自动刷新一遍， 如果没有手动调用这个函数的话，析构函数应该会调用这个 std::ifstream file(\"file3.txt\"); std::vector\u003cstd::string\u003e v; std::string s; while(file \u003e\u003e s) // 一直读取文件内容 { v.push_back(s); } // 遍历目录 using directory_iterator = std::filesystem::directory_iterator; for (auto it = directory_iterator {\"./plugins\"}; it != directory_iterator {}; ++it) { std::cout \u003c\u003c it-\u003epath().string() \u003c\u003c std::endl; } ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:14","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"cmake cmake 项目的编译比较简单， 执行诸如下面的命令就可以了。 mkdir build \u0026\u0026 cd build cmake .. make 如果想应用 cmake 到自己的项目里面的话， 则需要编写CMakeLists.txt 大概使用下面的代码 cmake_minimum_required(VERSION 3.10) # 设置最低可运行的版本 # 设置一些编译属性 set(CMAKE_CXX_STANDARD 17) set(CMAKE_CXX_STANDARD_REQUIRED True) set(CMAKE_BUILD_TYPE \"Debug\") set(CMAKE_EXPORT_COMPILECOMMANDS ON) # 添加一个新的 target 叫做 sight, 类型是可执行程序 add_executable(sight program.cpp) # 给 sight 这个 target 添加一些源码文件 target_sources(sight PRIVATE sight_ui.cpp sight_ui_node_editor.cpp sight_ui_project.cpp sight_nodes.cpp sight_js.cpp sight_js_parser.cpp sight_project.cpp sight.cpp sight_plugin.cpp sight_widgets.cpp sight_keybindings.cpp sight_external_widgets.cpp sight_network.cpp sight_undo.cpp # dependencies/imgui/imgui_demo.cpp # for debug ) # 给 sight 这个 target 添加一些 Include 目录 target_include_directories( sight PRIVATE ${PROJECT_SOURCE_DIR} ) # yaml-cpp find_package(yaml-cpp REQUIRED) ## 查找 yaml-cpp 这个包 target_include_directories(sight PRIVATE YAML_CPP_INCLUDE_DIR) # 添加 Include 目录 target_link_libraries(sight PRIVATE ${YAML_CPP_LIBRARIES}) # 链接 yaml 的动态库 MESSAGE(STATUS \"Found yaml-cpp at: ${YAML_CPP_INCLUDE_DIR}\") # 输出日志信息 ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:1:15","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"总结 笔者写出来的内容解释的不够详细， 所以读者如果感兴趣的话， 可以自行下载文档查阅。 pdf 格式，无需注册账户，直接下载。 ","date":"2021-11-03","objectID":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/:2:0","tags":null,"title":"C++ Notes for Pro 读书笔记","uri":"/program/c++-notes-for-pro-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"笔者的原因是因为系统中已经有一个蓝牙设备处于激活中了，把那个设备禁用了之后就好了。 似乎不禁用那个设备也可以安装驱动， 但是设备无法正常运转。 两个蓝牙设备则分别是： 板载蓝牙和一个 PCI-e 的蓝牙设备。 ","date":"2021-10-23","objectID":"/periphery/win10%E8%A3%85%E4%B8%8D%E4%B8%8A%E8%93%9D%E7%89%99%E9%A9%B1%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/:0:0","tags":null,"title":"Win10装不上蓝牙驱动的问题记录","uri":"/periphery/win10%E8%A3%85%E4%B8%8D%E4%B8%8A%E8%93%9D%E7%89%99%E9%A9%B1%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"[噩梦人的梦呓] 本故事里面出现的任何地点，人名均为杜撰， 请不要对号入座。 上线了之后， 李永言发现丙午桑的名字是灰色的，这小子往常这个时间都在线的，不知道今天为啥没有上线。 既然丙午桑没有上线的话，那就只能自己去玩玩了。 幻想序灵曲（简称续零） 是一款开放世界的，无主线任务类型的游戏， 玩家在上面度过的时间大多是打怪，探索，遗迹探索等。 李永言平时和丙午桑一起玩的时候，都是会选择一起去打打怪。 续零的剑术系统做的比较精巧，是一个值得玩的系统， 而怪物大多是依赖生成出现的， 所以经常会碰到机制不一样的怪物。 而这些怪物大多也不是能依赖高攻直接抹杀的，而是需要研究机制，反复尝试，才能击败怪物的。 不过今天丙午桑不在线， 所以李永言没有去选择打怪，而是想在游戏世界里面四处走走，探索一下新地图。 随便走了几圈之后， 李永言便觉得有些无聊，就下线了。 摘下白夜，盯着天花板看了几分钟之后，李永言还是决定回家看看，总觉得不回去就有点心里痒痒。 李永言顺手从货架上拿起几个面包，使用自己的身份卡刷了之后就带回家了。 门锁转动的声音一下子把水桥晴雪惊醒了，她瞬间从沙发上起身，躲到了旁边的小角落里面。水桥晴雪感觉自己的小心脏扑通扑通的狂跳个不停，十分紧张😣。 她知道如果自己再被抓回研究所肯定没有好果子吃，同时又不确定李永言是否已经报警，所以十分警惕的盯着门口。 门打开之后，李永言的身影出现在门口，水桥晴雪提起来的心往下放了放，但是仍然不敢现身出去。 因为在屋子里面睡觉的缘故，所有的窗帘都被拉起来了， 现在整个屋子里面一片漆黑，所以水桥晴雪能看到门口的李永言， 但是李永言却看不到水桥晴雪。 李永言关上门，打开灯之后看到沙发上没人，便四下看了看，在小角落里看到了手持火球🔥的水桥晴雪。李永言吓了一跳，连忙说道：“有事好说， 别放火！我就这一个屋子，而且我好多宝贝都在屋里！” 水桥晴雪闻言问道：“你回来干什么？” 李永言回答道：“给你带点吃的，怕你饿着。” 说完随手将手里的面包丢给水桥晴雪。 等李永言冷静下来之后 仔细打量了一下水桥晴雪，发现确实没猜错，眼前人真的只有15，16岁左右的样子。脸蛋洗干净之后还是挺漂亮的，是一个美人胚子， 如果长大了之后没长残的话，配以化妆秘术，应该会是个究极大美人。 李永言随便找个椅子做了下来之后说道：“幸好附近的摄像头还没有全部到位，不然的话，你肯定早就被发现了。 脸上挂着泥巴，别人想不注意你都难，以后千万别这么做了。” 水桥晴雪听了之后小声的哦了一下也没接话。 午饭后， 李永言拿出一个平板电脑，选择了自己最常用的购物软件打开之后交给水桥晴雪，随口问道：“平板电脑，应该会用把？” 水桥晴雪嗯了一声表示会用。 在得到确认之后， 李永言便接着说道：“买些生活用品把，不用买床铺，我等下用其他工具买。” 水桥晴雪答道， “哦”。 水桥晴雪现在的表现完全就是一个邻家小妹妹一样， 看到她现在的样子，估计谁也想不到她是一位可以操纵火焰的异常人士把。 挑选完了内衣，服装，洗漱用品等之后， 水桥晴雪将平板电脑还给了李永言，并说道：“我在大概2个月之后就会离开这里，到时候会把你身上的火焰种子给破坏掉，所以安心把。” 水桥晴雪并不是出于冲动之下才做出这个决定的， 她考虑到自己应该可以在2个月内适应一下这里的生活，之后需要出发去寻找一起逃出来的伙伴，可能还会去自己的家里看看。并且她觉得李永言不是一个坏人，不应该将别人完全拖下水。 李永言点了点头表示知道了。听到这话， 李永言自然欣喜，不用一辈子背着这么一个包袱， 未来也不是完全不可期待啦。 之后李永言便尝试和水桥晴雪闲聊了几句。 “你们那个研究所， 关押的都是异能人士吗？” “嗯” “你们不是有异能吗， 他们还能关的住你们？” “有些人是政府的走狗，他们以属性相克的能量来压制我们。” “有些人投靠了政府啊， 那你怎么没有选择投靠政府？” “投靠政府，然后伤害以前的伙伴吗？” “啊。。 理想主义者啊。” “你的想法很自私啊” “那你留下来，没有加入政府，你的伙伴有感激你吗” “我并不是为了他们的感激才选择对抗的，那群研究人员不停的测试我们的能力，把我们看做异类。。甚至会折磨我们的心智，我并不愿意帮助政府” “哦， 那可能是我有些狭窄了把。 那群投靠了政府的人也会被做实验吗？” “偶尔。” 就这么闲聊了一会之后， 李永言叮嘱了水桥晴雪不要出门， 不要做出很大的声响之后就离开家回去看店了。 通过和水桥晴雪的聊天之后， 李永言了解了更多的一些细节，渐渐的对这个妹子生出了一些恻隐之心，毕竟水桥晴雪还是挺漂亮的， 漂亮妹子+悲伤故事当然是很容易打动人心的。 ","date":"2021-10-17","objectID":"/non-menu/story-mirror/4.%E4%B8%A4%E6%9C%88%E4%B9%8B%E5%90%8E%E5%A5%B9%E5%B0%B1%E7%A6%BB%E5%BC%80/:0:0","tags":null,"title":"4.两月之后，她就离开","uri":"/non-menu/story-mirror/4.%E4%B8%A4%E6%9C%88%E4%B9%8B%E5%90%8E%E5%A5%B9%E5%B0%B1%E7%A6%BB%E5%BC%80/"},{"categories":null,"content":"本篇笔者想描述一些笔者小时候碰到的，听到的小故事。 ","date":"2021-10-10","objectID":"/caprice/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%95%85%E4%BA%8B/:0:0","tags":null,"title":"几个小故事","uri":"/caprice/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%95%85%E4%BA%8B/"},{"categories":null,"content":"小故事 ","date":"2021-10-10","objectID":"/caprice/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%95%85%E4%BA%8B/:1:0","tags":null,"title":"几个小故事","uri":"/caprice/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%95%85%E4%BA%8B/"},{"categories":null,"content":"故事1 小时候曾经听到的一个小问题。 城里有两个理发师， 一个理发师A，自身打理的很好，店面也很干净。 另外一个理发师B则比较邋遢，店面也是脏兮兮的。 那么请问， 如果你要理发， 你会选择哪个理发师呢？ 小时候一听到这个问题，那么考虑的答案就是理发师 A， 因为干净的地方总是令人喜欢。 那个时候， 提出问题的小伙伴会说：“如果是我的话， 我会选择理发师 B。” 笔者： “为什么？” 小伙伴：“因为理发师 B 肯定是因为技术太好了，太忙碌了， 没时间打理自己和店面，所以才会邋遢， 而理发师 A 是因为没有顾客才会这么干净。” 当时感觉还是挺有道理的， 但是现在细细想来，就发现其实根本不是这么回事。 理发师和店面是否脏乱往往和理发师的意愿有关系，和是否太忙关系不大。现代城市里面，理发师并不会仅仅只有一个人在店里，往往都是多人， 而顾客多的理发师收入更多，则更有机会雇佣别人。 所以店主如果想要一个干净的店面， 就肯定会有人有时间打扫的。 ","date":"2021-10-10","objectID":"/caprice/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%95%85%E4%BA%8B/:1:1","tags":null,"title":"几个小故事","uri":"/caprice/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%95%85%E4%BA%8B/"},{"categories":null,"content":"故事2 故事2是小时候发生在笔者身上的一件事。 那天晚上， 笔者的爸爸问笔者 “你喜欢吃软饭，还是硬饭？” 笔者肯定回答： 喜欢吃软饭。 并且当时很不解，有人会喜欢吃生硬的饭吗？ 之后嘛， 笔者的其他家人都快乐的大笑了起来。 这里的问题是 信息不对等，在笔者的认知里，软饭就是软软的米饭， 而硬饭则是硬硬的米饭。 长大成人之后可知，爸爸说的软饭的意思应该是依靠女人生存，而不是软糯的米饭。 这种依赖信息差去取笑，嘲笑别人的做法真的很没有素质。 另外一个延伸的例子。 这里有一个没什么素质的 X国人 A。 （只是举例假设，请读者不要对号入座） 这里有一个另外一个国家的人 B。 B 并不懂 X 国语言。 有一天， A 在路上碰到了B，A 突然大起捉弄的心思，径直的走到B 的面前，面带微笑，开口说道“草泥马”， 并伸出右手。 这里草泥马只是代指， 读者也可以看成 fucking you 之类的 B 虽然不知道 A 到底说了什么，但是看 A 的架势，似乎要握个手。 B便友好的伸出手，和 A 握了一下。 A 看到这种情形，自然心中大喜，自己成功的愚弄了一把这个外国人。 假如之后， B 模仿着 A 的声音，说出了一句生硬的“草泥马”。 A 的心情会变成 什么样子呢？ ","date":"2021-10-10","objectID":"/caprice/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%95%85%E4%BA%8B/:1:2","tags":null,"title":"几个小故事","uri":"/caprice/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%95%85%E4%BA%8B/"},{"categories":null,"content":"本文为想法草稿，并没有真实实践过。 本文描述的是一个基于栈的字节码指令列表。 ","date":"2021-10-02","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E9%99%84.1-%E5%AD%97%E8%8A%82%E7%A0%81%E5%88%97%E8%A1%A8/:0:0","tags":null,"title":"自制脚本语言[附.1] 字节码列表","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E9%99%84.1-%E5%AD%97%E8%8A%82%E7%A0%81%E5%88%97%E8%A1%A8/"},{"categories":null,"content":"前置内容 栈 指令基本上都是基于一个栈的。 栈中的每一个元素叫栈帧。 压栈/入栈： 在栈顶处放入元素。 出栈： 把栈顶的元素移出。 刚开始执行的时候，栈应该是空的。 局部变量表 用于存放变量值的一个数组（或者其他形式的数据结构。） 刚开始执行的时候， 局部变量表应该也是空的。 字节码列表 使用数组或者类似结构来保存字节码。 每个字节码的位置在成功编译后是不会产生变化的。 刚开始执行的时候， 字节码列表是已经填充完毕的， 且执行索引应该是0 。 一些指令会存在参数。 好像这叫基于寄存器的字节码❓ 本篇使用的部分指令为变量名代指， 实际上应该使用的是一个索引位置。 比如 seti a 0 应该为seti 0 0 a的位置实际上应该填写的是0（即一个索引）。 [varName/index]参数表示这里应该是一个索引， 即index. 但是在伪代码的地方可能会给予一个变量名。 [label/index] 大致同上， index表示一个指令序号。 [varName/localIndex] 大致和[varName/index]一样， 只是这里的localIndex表示一个局部变量表的索引。 [index/value] 表示这里应该是一个索引，以防止歧义。 但是在编写伪代码的时候，笔者可能会直接给予一个值。 ","date":"2021-10-02","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E9%99%84.1-%E5%AD%97%E8%8A%82%E7%A0%81%E5%88%97%E8%A1%A8/:0:1","tags":null,"title":"自制脚本语言[附.1] 字节码列表","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E9%99%84.1-%E5%AD%97%E8%8A%82%E7%A0%81%E5%88%97%E8%A1%A8/"},{"categories":null,"content":"常规指令 cjmp [label/index] 有条件的跳转指令 全写应该是：condition jump 此指令存在一个参数， 表示要跳到的指令序号。 由于序号在本文中难以确定， 且可能会变化， 所以使用标签来代指。 这个指令首先获取栈顶元素， 并将该元素出栈 之后判断栈顶元素的值， 如果值是false的话， 就跳转， 否则此指令无任何效果 jmp [label/index] 无条件的跳转指令 此指令存在一个参数， 表示要跳到的指令序号。 由于序号在本文中难以确定， 且可能会变化， 所以使用标签来代指。 直接跳转到指定的行数 set [varName/localIndex] [value] 设置一个局部变量表的元素的值 此指令会在计算的时候重新检测类型 get [varName/localIndex] 将一个局部变量表里面的值获取， 然后压栈。 dec [varName/localIndex] 此指令应该是不需要的。 声明一个变量 , 此指令的作用应该类似于 set [varName/localIndex] null 即将某个栈帧的值初始化成一个null值。 label: 使用冒号结尾的当做一个标签， 去掉冒号的部分即为标签的名字。 call [funcName] 调用一个函数 此指令会创建一个新的栈， 压入当前的栈顶，然后切换到新的栈。 按照参数顺序将参数入栈。 此时的栈已经是新的栈了。 此指令后面必需存在一个execute指令。 execute 执行一个函数的具体内容， 此指令必需跟在call 后面。 创建新的局部变量表， 并将栈中的全部元素，按照顺序复制到局部变量表中。 直接复制的话， 会出现先从局部变量表中复制到栈上， 然后从栈上再复制到新的局部变量表中的事情。 这样做的好处应该是实现起来稍微简单一些。 不过应该会存在一些性能上的浪费， 如果想避免性能问题的话， 可以考虑将元素留在栈中，不进行复制。 如果这样的话， [localIndex] 参数就需要能够区分是指的栈，还是局部变量表。 一般的做法可能是使用正负数。 清空当前栈中的全部元素。 切换到函数自身的字节码指令中。 从0开始执行。 return 当函数的全部字节码执行完毕 或者碰到return关键字的时候，应该放入此指令。 切换到之前到局部变量表。 将当前栈中的剩余元素视为返回值，进行暂存。 一般单返回值的情况下就只有一个元素。 切换到之前的栈中， 并将栈顶元素出栈。 即删除函数使用的那个栈。 将暂存的返回值按照顺序压栈。 这样做看起来多进行了1次复制， 可以考虑优化。 切换到之前的字节码列表中， 并将对应的索引恢复。 ","date":"2021-10-02","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E9%99%84.1-%E5%AD%97%E8%8A%82%E7%A0%81%E5%88%97%E8%A1%A8/:0:2","tags":null,"title":"自制脚本语言[附.1] 字节码列表","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E9%99%84.1-%E5%AD%97%E8%8A%82%E7%A0%81%E5%88%97%E8%A1%A8/"},{"categories":null,"content":"逻辑判断指令 lt/lte [varName/localIndex] [index/value] 检测localIndex 的值是否小于/小于等于 后面所指示的值。 并将 true/false的结果压栈 gt/gte [varName/localIndex] [index/value] 检测localIndex 的值是否大于/大于等于 后面所指示的值。 并将 true/false的结果压栈 eq [varName/localIndex] [index/value] 检测localIndex 的值是否等于 后面所指示的值。 并将 true/false的结果压栈 reverse 将栈顶的布尔值出栈， 反转， 然后再压栈。 ","date":"2021-10-02","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E9%99%84.1-%E5%AD%97%E8%8A%82%E7%A0%81%E5%88%97%E8%A1%A8/:0:3","tags":null,"title":"自制脚本语言[附.1] 字节码列表","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E9%99%84.1-%E5%AD%97%E8%8A%82%E7%A0%81%E5%88%97%E8%A1%A8/"},{"categories":null,"content":"类型限定指令 使用类型限定指令应该可以增加效率。 比如 seti,setf 这个i结尾就表示整形数字，f结尾就表示浮点型数字。 在解释指令的时候不进行类型判断，直接转换成目标类型。 seti [varName/localIndex] [intValue] 设置一个变量的值为一个整形数字 setf [varName/localIndex] [doubleValue] 设置一个变量的值为一个浮点型数字 ","date":"2021-10-02","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E9%99%84.1-%E5%AD%97%E8%8A%82%E7%A0%81%E5%88%97%E8%A1%A8/:0:4","tags":null,"title":"自制脚本语言[附.1] 字节码列表","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E9%99%84.1-%E5%AD%97%E8%8A%82%E7%A0%81%E5%88%97%E8%A1%A8/"},{"categories":null,"content":"本篇来尝试描述一下函数如何实现。 ","date":"2021-10-02","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.1-%E5%87%BD%E6%95%B0/:0:0","tags":null,"title":"自制脚本语言[6.1] 函数","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.1-%E5%87%BD%E6%95%B0/"},{"categories":null,"content":"基本内容 ","date":"2021-10-02","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.1-%E5%87%BD%E6%95%B0/:1:0","tags":null,"title":"自制脚本语言[6.1] 函数","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.1-%E5%87%BD%E6%95%B0/"},{"categories":null,"content":"langX 代码示例 // 函数声明 funa =\u003e { a = 1 ; funb(); // 内置函数调用 println(\"funa\" + a); } funb =\u003e (x){ println(\"funb: \" + a); a = 101 ; } // call function funa(); 如上所述， langX 使用 函数名称 =\u003e (参数列表) {函数体} 的风格来声明一个函数， 读者也可以完全设计出自己想要的语法结构。 ","date":"2021-10-02","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.1-%E5%87%BD%E6%95%B0/:1:1","tags":null,"title":"自制脚本语言[6.1] 函数","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.1-%E5%87%BD%E6%95%B0/"},{"categories":null,"content":"主要思路 函数的主要目的基本上是复用，隔离变量等。 为了能实现复用的目的，需要保存函数内部的字节码，以及每次在调用函数的时候需要生成新的变量环境。 ","date":"2021-10-02","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.1-%E5%87%BD%E6%95%B0/:1:2","tags":null,"title":"自制脚本语言[6.1] 函数","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.1-%E5%87%BD%E6%95%B0/"},{"categories":null,"content":"变量环境 这里先描述一下笔者所说的变量环境是个什么东西。 笔者曾经在 3.1章节环境与节点运算的值 简单的介绍过这个东西。 笔者在langX里面使用是一个叫做环境的词， 即 Enviroment。里面所有的变量都是使用一个std::map保存的，变量名作为key, 变量值作为value。 在现代编程语言里面，似乎都是使用栈或者数组的方式，他们使用索引作为key, 值为value。 笔者的langX因为经验不足的问题， 并没有做栈上的值， 都是做堆上的值， 栈上保存的都是指针， 这并不是一个好的设计。 内置的数字类型应该保存原值，而不是使用指针的形式。 无论是使用map，还是栈，异或局部变量表等等， 在函数代码真正执行前都应该准备一个新的，以隔离函数内外的变量。 ","date":"2021-10-02","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.1-%E5%87%BD%E6%95%B0/:1:3","tags":null,"title":"自制脚本语言[6.1] 函数","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.1-%E5%87%BD%E6%95%B0/"},{"categories":null,"content":"字节码 或者 AST 节点 因为函数需要复用， 所以就需要把函数的执行指令保存起来， 而不是执行一遍就丢掉。 AST节点额外内容 笔者在写langX的时候，会把临时计算的值保存到 AST节点上， 这样就需要在函数执行前，或者执行结束后清掉所有的值， 否则会产生一些未预期的行为。 就是可能会产生一些很难找到原因的，莫名其妙的bug。 另外，这也是一个不好的设计， 完全不推荐使用。 ","date":"2021-10-02","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.1-%E5%87%BD%E6%95%B0/:1:4","tags":null,"title":"自制脚本语言[6.1] 函数","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.1-%E5%87%BD%E6%95%B0/"},{"categories":null,"content":"总结 函数上来说， 新的东西不太多， 它更像是一个包装，把之前的东西使用新的方式组合和使用。 ","date":"2021-10-02","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.1-%E5%87%BD%E6%95%B0/:2:0","tags":null,"title":"自制脚本语言[6.1] 函数","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%806.1-%E5%87%BD%E6%95%B0/"},{"categories":null,"content":"笔者也是刚开始使用vs-code， 部分技巧还不是很熟练， 不过感觉没有CLion 那么好用。 笔者是使用Mac版本的 vs code，不过应该都差不多把。 ","date":"2021-09-25","objectID":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/:0:0","tags":null,"title":"Vscode开发c++ 介绍","uri":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"拓展 vscode 本身能做的事情比较少， 还是要借助拓展来实现功能。 llvm-vs-code-extensions.vscode-clangd https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.vscode-clangd llvm 出的插件， 基于 clangd ，使用LSP通信。 这个插件的自动补全感觉比微软出的c/c++插件好一些。 自动完成 编译错误和警告 跳转到定义/声明 代码格式化 （clang-format) 简单的重构 （提取变量， 重命名什么的） 这个插件附带 clang-tidy和clang-format， 分别用于代码分析和格式化。 （CLion应该也是基于clangd的， 这个插件提供的警告部分还不错。 格式化功能，笔者觉得略逊于 CLion。） ms-vscode.cpptools-extension-pack https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools-extension-pack 这个是一个插件包， 包含了几个插件。 如果觉得这个插件包的内容太臃肿了， 可以考虑不装。 ms-vscode.cpptools https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools 微软官方的 cpp插件， 这个和 clangd 一起安装的时候要禁用这个插件的 IntelliSense 功能。 这个插件好像提供 debug 功能 。 （笔者没有使用过， 笔者基本上是使用lldb命令） twxs.cmake https://marketplace.visualstudio.com/items?itemName=twxs.cmake cmake 语法支持 ms-vscode.cmake-tools https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools 编译， 清理 cmake 工程 用于提供cmake的数据给别的拓展？ deerawan.vscode-dash https://marketplace.visualstudio.com/items?itemName=deerawan.vscode-dash dash 相关的插件， 如果读者不使用dash, 可以不安装。 使用快捷键可以直接转到dash里面搜索接口 streetsidesoftware.code-spell-checker https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker 拼写检查工具 xyz.local-history https://marketplace.visualstudio.com/items?itemName=xyz.local-history 本地文件历史， 会产生一个叫.history目录， 里面存放了很多临时文件。 记得添加目录到.gitignore文件里面 可以安装， 也可以不安装把，笔者觉得。 pkief.material-icon-theme https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme 文件，文件夹 的icon tdennis4496.cmantic https://marketplace.visualstudio.com/items?itemName=tdennis4496.cmantic 根据声明生成定义 生成 getter/ setter 修改函数签名 添加头文件保护 比较建议安装这个拓展。 eamodio.gitlens https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens 这是一个GIT拓展，如果读者和别人一起工作，则可以考虑安装。 这个拓展可以显示一个函数，类，命名空间的作者，和修改人，修改时间等 类似 VS里面的那个函数上面的虚字。 wayou.vscode-todo-highlight https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight 可以高亮 todo 等字符的拓展。 （字符可以自定义） 并且可以全文件搜索并显示成一个列表。 注意： 这个拓展也会搜索xyz.local-history产生的临时文件。记得把.history文件夹添加到这个拓展的Exclude配置项里。 jeff-hykin.better-cpp-syntax https://marketplace.visualstudio.com/items?itemName=jeff-hykin.better-cpp-syntax 好像是个主题拓展， 想装就装把。 ","date":"2021-09-25","objectID":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/:1:0","tags":null,"title":"Vscode开发c++ 介绍","uri":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"配置项 ","date":"2021-09-25","objectID":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/:2:0","tags":null,"title":"Vscode开发c++ 介绍","uri":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"clangd 即llvm-vs-code-extensions.vscode-clangd拓展。 这个插件需要 Cmake 生成一个额外的文件指示编译命令。 可以在CMakeLists.txt文件添加下面这行生成。 set(CMAKE_EXPORT_COMPILECOMMANDS ON) 如果提示插件找不到 clangd，可以让插件自动下载一个。 参数可以使用类似下面的内容 \"clangd.arguments\": [ \"-background-index\", \"--compile-commands-dir=./build\", \"-clang-tidy\", \"-log=verbose\", \"-pretty\", \"-suggest-missing-includes\", \"-header-insertion=iwyu\", \"-completion-style=detailed\", \"--query-driver=/usr/bin/clang++\" ] 其中--compile-commands-dir=./build 指定了 cmake 的 build文件夹， --query-driver=/usr/bin/clang++ 指定了一个额外的 clang++ 用于查询 include目录。 笔者刚开始使用这个插件的时候， c++的库文件找不到， 提示 'string' file not found/ 'filesystem' file not found等的这类， 但是笔者的项目是可以编译的， 添加了这个query-driver选项之后就好了。 在项目的根目录下， 创建下面文件可以指定一些额外的配置项。 .clangd clangd的额外选项。 https://clangd.llvm.org/config .clang-format 用于指定代码格式化的规则。 https://clang.llvm.org/docs/ClangFormatStyleOptions.html 每个人对格式的感觉不一样， 建议手动从头撸一份配置。 这里有一点 笔者要说一下。 clang-format不能处理这种情况。 if (f1.fileType == ProjectFileType::Directory \u0026\u0026 f2.fileType == ProjectFileType::Regular) { return true; } else if ((f1.fileType == ProjectFileType::Directory \u0026\u0026 f2.fileType == ProjectFileType::Directory) || (f1.fileType != ProjectFileType::Directory \u0026\u0026 f2.fileType != ProjectFileType::Directory)) { return f1.filename \u003c f2.filename; } 第二个else if的条件， 因为条件代码太多， 所以笔者拆成了两行，但是在格式化之后会自动合并到一行，且笔者并没有找到办法处理这个。 当 clangd出现缓存问题的时候，可以考虑下面的方式。 cmd/ctrl+shift+p 输入 clangd, 选择 restart language server cmd/ctrl+shift+p 输入 reload window 重启 vs code. ","date":"2021-09-25","objectID":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/:2:1","tags":null,"title":"Vscode开发c++ 介绍","uri":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"vs-code vs-code 本身也有一些可以调整的选项。 // 自动保存 5s保存一次 \"files.autoSave\": \"afterDelay\", \"files.autoSaveDelay\": 5000, // 粘贴之后自动对齐格式 \"editor.formatOnPaste\": true, // 使用 代码段等提示的时候 也会产生代码补全 \"editor.suggest.snippetsPreventQuickSuggestions\": false, ","date":"2021-09-25","objectID":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/:2:2","tags":null,"title":"Vscode开发c++ 介绍","uri":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"编译和运行 ","date":"2021-09-25","objectID":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/:3:0","tags":null,"title":"Vscode开发c++ 介绍","uri":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"添加配置 如果使用了 Cmake 插件， 这一步可以不做。 左侧工具栏里有一个 编译和运行的按钮，点一下就能看到调试界面了。 点击上方的下拉框之后，选择“添加配置” 或者点击右侧的齿轮按钮应该都能到launch.json文件的编辑界面，只不过点击“添加配置”的时候， 会自动添加一个示例的配置项。 笔者是 Mac 系统下， 使用 lldb 进行调试的，下面给出一下笔者的配置内容，给读者一个参考。 { \"name\": \"(lldb) 启动\", \"type\": \"cppdbg\", \"request\": \"launch\", \"program\": \"${command:cmake.launchTargetPath}\", \"args\": [], \"stopAtEntry\": false, \"cwd\": \"${workspaceFolder}\", \"environment\": [ { // add the directory where our target was built to the PATHs // it gets resolved by CMake Tools: \"name\": \"PATH\", \"value\": \"${env:PATH}:${command:cmake.getLaunchTargetDirectory}\" }, ], \"externalConsole\": true, \"MIMode\": \"lldb\" } 笔者使用了 cmake插件提供的值， 而没有具体指定。 ","date":"2021-09-25","objectID":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/:3:1","tags":null,"title":"Vscode开发c++ 介绍","uri":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"启动和调试 添加了正确的配置项之后， 程序应该就可以在 VS Code 中调试了。 使用 cmake 插件的时候，可以使用下面的方式启动程序。 使用 Ctrl+F5 或者点击底部状态栏的小虫子🐞按钮 打开程序进行调试。 使用Shift+F5 或者点击底部状态栏的播放按钮 ▶正常运行程序。 如果没有使用 cmake 插件的话， 就需要按照上一部分添加配置项。 之后还是在底部状态栏， 可能看到配置项的名字，点一下应该就可以了。 可以在行号左侧点击一下，以添加断点。 在程序碰到致命错误或者断点的时候会暂停执行程序，当程序暂停之后可以在调试界面看到更多信息。 底部还有一个DEBUG CONSOLE ，这是一个调试用控制台，输入变量名用于查看变量的值， 还能执行部分函数。但是好像不支持其他命令。 将鼠标放到对应代码上， 也可以看到当前的值。 这个DEBUG CONSOLE有一个问题， 那就是打印出来的文字并不好看。 每一行基本都是使用@\"内容\"的形式。 其中内容字符串里面的转义字符并不会被转义，而是直接打印出来。 成功启动调试之后， 会有一个小小的工具栏在VS Code 窗口的中间正上方的位置，可以重启，结束调试，步进，按行执行等。 ","date":"2021-09-25","objectID":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/:3:2","tags":null,"title":"Vscode开发c++ 介绍","uri":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"拓展阅读 https://github.com/microsoft/vscode-cmake-tools/blob/develop/docs/debug-launch.md#debug-using-a-launchjson-file https://code.visualstudio.com/docs/editor/debugging ","date":"2021-09-25","objectID":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/:3:3","tags":null,"title":"Vscode开发c++ 介绍","uri":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"总结 有了上面的这些插件之后， 就可以正常工作了。 虽然还是有一些不太严重的不足： switch 不能自动补全缺失的 case 项 似乎是cmantic插件带有的功能， 可以补全缺少的 case 项目。 具体操作是鼠标点击一下 switch 关键字中间的任意位置，之后左侧应该会出现一个蓝色的按钮，点击一下会有一个按钮，再点一下按钮就会补全 case 项了。 但是 补全的列表，只有最后一项有 break，其他项目需要自己手动添加。 如果存在 default关键字，就不会追加缺少的 case项。 代码段的功能不是很好用 (if/for/while之类的) 代码格式化有点蛋疼， 不像 Jetbrains家族的那些， 自带的就很舒服。 如果 clang-format 可以满足读者的需求， 那么可以无视这条。 笔者目前是使用命令行手动make 和run的，所以编译运行相关的功能还没有测试过，不知道是否好用。 总体来说，还是比较满意的。 有部分插件，笔者还没来得及也没有细究。 ","date":"2021-09-25","objectID":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/:4:0","tags":null,"title":"Vscode开发c++ 介绍","uri":"/periphery/vscode%E5%BC%80%E5%8F%91c++%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"谷歌V8是一个用于执行js脚本的引擎。 ","date":"2021-09-18","objectID":"/program/%E8%B0%B7%E6%AD%8Cv8%E5%BC%95%E6%93%8E%E7%9A%84%E5%B0%9D%E8%AF%95/:0:0","tags":null,"title":"谷歌v8引擎的尝试","uri":"/program/%E8%B0%B7%E6%AD%8Cv8%E5%BC%95%E6%93%8E%E7%9A%84%E5%B0%9D%E8%AF%95/"},{"categories":null,"content":"详细内容 ","date":"2021-09-18","objectID":"/program/%E8%B0%B7%E6%AD%8Cv8%E5%BC%95%E6%93%8E%E7%9A%84%E5%B0%9D%E8%AF%95/:1:0","tags":null,"title":"谷歌v8引擎的尝试","uri":"/program/%E8%B0%B7%E6%AD%8Cv8%E5%BC%95%E6%93%8E%E7%9A%84%E5%B0%9D%E8%AF%95/"},{"categories":null,"content":"Isolate 一个 Isolate 是一个独立的虚拟机。对应一个或多个线程。但同一时刻 只能被一个线程进入。所有的 Isolate 彼此之间是完全隔离的, 它们不能够有任何共享的资源。如果不显式创建 Isolate, 会自动创建一个默认的 Isolate。 下面给出一些相关代码。 // Initialize V8. v8::V8::InitializeICUDefaultLocation(execPath); v8::V8::InitializeExternalStartupData(execPath); std::unique_ptr\u003cv8::Platform\u003e platform = v8::platform::NewDefaultPlatform(); v8::V8::InitializePlatform(platform.get()); v8::V8::Initialize(); // Create a new Isolate and make it the current one. v8::Isolate::CreateParams createParams; createParams.array_buffer_allocator = v8::ArrayBuffer::Allocator::NewDefaultAllocator(); auto isolate = v8::Isolate::New(createParams); auto isolate_scope = std::make_unique\u003cv8::Isolate::Scope\u003e(isolate); g_V8Runtime = new V8Runtime{ std::move(platform), isolate, createParams.array_buffer_allocator, std::move(isolate_scope), }; // 销毁 dbg(\"destroy js engine..\"); g_V8Runtime-\u003eisolateScope.reset(); if (g_V8Runtime-\u003eisolate) { g_V8Runtime-\u003eisolate-\u003eDispose(); g_V8Runtime-\u003eisolate = nullptr; } v8::V8::Dispose(); v8::V8::ShutdownPlatform(); if (g_V8Runtime-\u003earrayBufferAllocator) { delete g_V8Runtime-\u003earrayBufferAllocator; g_V8Runtime-\u003earrayBufferAllocator = nullptr; } Initialize V8. 部分的代码， 整个程序只需要执行一次， 之后便可以创建Isolate 。 在多线程环境下，可以选择每个线程都创建一个单独Isolate ，对于笔者目前的项目来说， 选择的是采用一个单独的线程执行js脚本。当其他线程有执行脚本的需求的时候都会选择将任务发送给这个线程。 在线程结束之前应该将 Isolate 销毁。 在程序结束之前， 所有的Isolate都销毁了之后， 应该执行下面的语句销毁v8引擎。 v8::V8::Dispose(); v8::V8::ShutdownPlatform(); 另外，Isolate 类的构造函数和析构函数都是删除了的。 // v8.h Isolate() = delete; ~Isolate() = delete; Isolate(const Isolate\u0026) = delete; Isolate\u0026 operator=(const Isolate\u0026) = delete; // Deleting operator new and delete here is allowed as ctor and dtor is also // deleted. void* operator new(size_t size) = delete; void* operator new[](size_t size) = delete; void operator delete(void*, size_t) = delete; void operator delete[](void*, size_t) = delete; ","date":"2021-09-18","objectID":"/program/%E8%B0%B7%E6%AD%8Cv8%E5%BC%95%E6%93%8E%E7%9A%84%E5%B0%9D%E8%AF%95/:1:1","tags":null,"title":"谷歌v8引擎的尝试","uri":"/program/%E8%B0%B7%E6%AD%8Cv8%E5%BC%95%E6%93%8E%E7%9A%84%E5%B0%9D%E8%AF%95/"},{"categories":null,"content":"回调函数 并不是所有的场景都是执行单独一次js文件就完事了， 部分场景下， 我们需要执行js的回调函数， 而且可能会执行多次。 现在就简单的介绍一下如何实现这部分内容。 使用这个类型即可v8::Persistent 即可。 下面给一个示例。 using namespace v8; struct MyStruct { v8::Persistent\u003cv8::Function, v8::CopyablePersistentTraits\u003cv8::Function\u003e\u003e callback; } void regCallback (const FunctionCallbackInfo\u003cValue\u003e \u0026args){ auto isolate = args.GetIsolate(); Local\u003cFunction\u003e f = args[0].As\u003cFunction\u003e(); MyStruct s; s.callback = Persistent\u003cFunction, CopyablePersistentTraits\u003cFunction\u003e\u003e(isolate,f); } void useCallback(MyStruct const\u0026 s, Isolate* isolate){ auto function = s.callback.Get(isolate); auto context = isolate-\u003eGetCurrentContext(); // function-\u003eCall(xxx) } ","date":"2021-09-18","objectID":"/program/%E8%B0%B7%E6%AD%8Cv8%E5%BC%95%E6%93%8E%E7%9A%84%E5%B0%9D%E8%AF%95/:1:2","tags":null,"title":"谷歌v8引擎的尝试","uri":"/program/%E8%B0%B7%E6%AD%8Cv8%E5%BC%95%E6%93%8E%E7%9A%84%E5%B0%9D%E8%AF%95/"},{"categories":null,"content":"Context 这个是上下文环境，可以把全局的函数，成员，类型注册进去。 不过在使用中， 笔者发现了些许问题。 Context如果出现多个的情况， 会产生层级， 然后子层级是无法访问父层级的内容的。 在父层级注册了的函数，在子层级需要重新注册一遍。 在使用函数 v8::Script::Compile() 编译执行一个脚本的时候， 源码里面所有的内容会放入Context里面。 比如， 读者在脚本里面声明了一个函数abc， 那么这个abc会保存到Context，在执行别的脚本的时候就可以调用这个abc函数， 同时别的脚本则不能再声明一个叫abc的函数。 当然，此脚本也无法再次执行。 为了可以多次运行同一脚本，可以使用函数v8::ScriptCompiler::CompileFunctionInContext()， 这样把源码全部编译到一个函数里面。 ","date":"2021-09-18","objectID":"/program/%E8%B0%B7%E6%AD%8Cv8%E5%BC%95%E6%93%8E%E7%9A%84%E5%B0%9D%E8%AF%95/:1:3","tags":null,"title":"谷歌v8引擎的尝试","uri":"/program/%E8%B0%B7%E6%AD%8Cv8%E5%BC%95%E6%93%8E%E7%9A%84%E5%B0%9D%E8%AF%95/"},{"categories":null,"content":"Scope v8::HandleScope handle_scope(isolate); 这个是作用域， 建议在合适的位置上都使用一下上面的语句。 这条语句会生成一个新的作用域给 isolate， 当离开handle_scope的cpp作用域的时候， 这个v8的作用域会被自动释放掉。 (析构函数) ","date":"2021-09-18","objectID":"/program/%E8%B0%B7%E6%AD%8Cv8%E5%BC%95%E6%93%8E%E7%9A%84%E5%B0%9D%E8%AF%95/:1:4","tags":null,"title":"谷歌v8引擎的尝试","uri":"/program/%E8%B0%B7%E6%AD%8Cv8%E5%BC%95%E6%93%8E%E7%9A%84%E5%B0%9D%E8%AF%95/"},{"categories":null,"content":"其他 node.js 这个工具是基于谷歌v8引擎的， 这个工具的文档稍多一些，并且node.js本身是开源的项目，碰到问题的时候，也可以尝试从node.js里面寻找答案。 ","date":"2021-09-18","objectID":"/program/%E8%B0%B7%E6%AD%8Cv8%E5%BC%95%E6%93%8E%E7%9A%84%E5%B0%9D%E8%AF%95/:1:5","tags":null,"title":"谷歌v8引擎的尝试","uri":"/program/%E8%B0%B7%E6%AD%8Cv8%E5%BC%95%E6%93%8E%E7%9A%84%E5%B0%9D%E8%AF%95/"},{"categories":null,"content":"拓展阅读 https://fantasyplayer.link/program/cpp%E7%A8%8B%E5%BA%8F%E5%B5%8C%E5%85%A5v8%E5%BC%95%E6%93%8E%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4%E8%B8%A9%E5%9D%91/ https://www.cnblogs.com/imlucky/p/3270306.html https://stackoverflow.com/questions/21239249/storing-handles-to-objects-in-a-hashmap-or-set-in-googles-v8-engine https://yjhjstz.gitbooks.io/deep-into-node/content/chapter2/chapter2-0.html https://github.com/nodejs/node/tree/master/src https://zhuanlan.zhihu.com/p/25404844 ","date":"2021-09-18","objectID":"/program/%E8%B0%B7%E6%AD%8Cv8%E5%BC%95%E6%93%8E%E7%9A%84%E5%B0%9D%E8%AF%95/:2:0","tags":null,"title":"谷歌v8引擎的尝试","uri":"/program/%E8%B0%B7%E6%AD%8Cv8%E5%BC%95%E6%93%8E%E7%9A%84%E5%B0%9D%E8%AF%95/"},{"categories":null,"content":"这是一个谷歌开源的cpp库， 包括了一些容器，字符串工具等。 Quickstart: https://abseil.io/docs/cpp/quickstart-cmake.html Github: https://github.com/abseil/abseil-cpp 这个库大概主要包括下面几个内容。 基础库 base 算法库 algorithm 容器库 container 哈希库 hash 字符串库 strings 工具库 utility 等等 ","date":"2021-09-14","objectID":"/program/abseil-%E5%88%9D%E4%BD%93%E9%AA%8C/:0:0","tags":null,"title":"Abseil 初体验","uri":"/program/abseil-%E5%88%9D%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"笔者的使用记录 ","date":"2021-09-14","objectID":"/program/abseil-%E5%88%9D%E4%BD%93%E9%AA%8C/:1:0","tags":null,"title":"Abseil 初体验","uri":"/program/abseil-%E5%88%9D%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"编译和链接 笔者刚开始是把 abseil当做一个子项目 放在自己的项目里面的， 并使用cmake添加它们。 这样使用的时候， 笔者发现了一个问题，那就是会增加很多个cmake的 target， 编译起来的输出令笔者感觉到不适，而且编译速度应该是有所降低。 所以笔者就改用了 Homebrew进行安装。 使用brew install abseil命令进行安装，之后在自己的cmake项目文件里面这样添加即可。 # abseil find_package(absl REQUIRED) target_link_libraries( sight-util PUBLIC absl::base absl::strings absl::hash absl::flat_hash_map absl::flat_hash_set absl::btree ) 使用brew安装之后， 可能还是有个问题，那就是可能会出现链接或者编译错误， 如果出现了这个错误， 把自己的项目也改成c++17版本就可以了。 # specify the C++ standard set(CMAKE_CXX_STANDARD 17) 或者， 可以考虑把 abseil的版本切换成自己使用的cpp版本。 这个方法笔者没有切身实际的去操作过， 所以仅仅提供一些思路。 找到本地Homebrew的 abseil.rb 文件， 修改 17为11 强制让 homebrew 重新编译和安装 Homebrew 的文件链接： https://github.com/Homebrew/homebrew-core/blob/master/Formula/abseil.rb ","date":"2021-09-14","objectID":"/program/abseil-%E5%88%9D%E4%BD%93%E9%AA%8C/:1:1","tags":null,"title":"Abseil 初体验","uri":"/program/abseil-%E5%88%9D%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"使用 在使用的时候， 笔者发现 abseil的cmake target 很乱， 基本上没有太多规则。 如果没有指示的话， 可能很难找到正确的target name。 不过好在， 笔者后来发现了这个文件CMake/AbseilDll.cmake 这个文件里面记录了所有的target， 如果需要什么，只需要在这个文件里面搜索一下即可。 这里附上 当前的所有target. set(ABSL_INTERNAL_DLL_TARGETS \"stacktrace\" \"symbolize\" \"examine_stack\" \"failure_signal_handler\" \"debugging_internal\" \"demangle_internal\" \"leak_check\" \"leak_check_disable\" \"stack_consumption\" \"debugging\" \"hash\" \"spy_hash_state\" \"city\" \"memory\" \"strings\" \"strings_internal\" \"cord\" \"str_format\" \"str_format_internal\" \"pow10_helper\" \"int128\" \"numeric\" \"utility\" \"any\" \"bad_any_cast\" \"bad_any_cast_impl\" \"span\" \"optional\" \"bad_optional_access\" \"bad_variant_access\" \"variant\" \"compare\" \"algorithm\" \"algorithm_container\" \"graphcycles_internal\" \"kernel_timeout_internal\" \"synchronization\" \"thread_pool\" \"bind_front\" \"function_ref\" \"atomic_hook\" \"log_severity\" \"raw_logging_internal\" \"spinlock_wait\" \"config\" \"dynamic_annotations\" \"core_headers\" \"malloc_internal\" \"base_internal\" \"base\" \"throw_delegate\" \"pretty_function\" \"endian\" \"bits\" \"exponential_biased\" \"periodic_sampler\" \"scoped_set_env\" \"type_traits\" \"meta\" \"random_random\" \"random_bit_gen_ref\" \"random_distributions\" \"random_seed_gen_exception\" \"random_seed_sequences\" \"random_internal_traits\" \"random_internal_distribution_caller\" \"random_internal_distributions\" \"random_internal_fast_uniform_bits\" \"random_internal_seed_material\" \"random_internal_pool_urbg\" \"random_internal_explicit_seed_seq\" \"random_internal_sequence_urbg\" \"random_internal_salted_seed_seq\" \"random_internal_iostream_state_saver\" \"random_internal_generate_real\" \"random_internal_wide_multiply\" \"random_internal_fastmath\" \"random_internal_nonsecure_base\" \"random_internal_pcg_engine\" \"random_internal_randen_engine\" \"random_internal_platform\" \"random_internal_randen\" \"random_internal_randen_slow\" \"random_internal_randen_hwaes\" \"random_internal_randen_hwaes_impl\" \"random_internal_uniform_helper\" \"status\" \"time\" \"civil_time\" \"time_zone\" \"container\" \"btree\" \"compressed_tuple\" \"fixed_array\" \"inlined_vector_internal\" \"inlined_vector\" \"counting_allocator\" \"flat_hash_map\" \"flat_hash_set\" \"node_hash_map\" \"node_hash_set\" \"container_memory\" \"hash_function_defaults\" \"hash_policy_traits\" \"hashtablez_sampler\" \"hashtable_debug\" \"hashtable_debug_hooks\" \"have_sse\" \"node_hash_policy\" \"raw_hash_map\" \"container_common\" \"raw_hash_set\" \"layout\" \"tracked\" ) 在使用的时候别忘记添加absl::前缀。 ","date":"2021-09-14","objectID":"/program/abseil-%E5%88%9D%E4%BD%93%E9%AA%8C/:1:2","tags":null,"title":"Abseil 初体验","uri":"/program/abseil-%E5%88%9D%E4%BD%93%E9%AA%8C/"},{"categories":null,"content":"笔者这几天发现， 笔者处于一个非常焦虑的状态，所以想写点内容记录一下近况。 ","date":"2021-09-06","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:0:0","tags":null,"title":"关于焦虑的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"起因考虑，以及症状 这应该要从笔者的儿童时代说起。。。 不过， 为了节省时间， 笔者决定省略儿童时代的内容，直接说笔者认为的结论。 笔者是一个身怀恐惧的人，而且是长期的身怀恐惧。 笔者认为焦虑的主因应该就是恐惧，因为很害怕而无法停止思考。 笔者现在非常害怕蛇🐍， 经常害怕在睡觉的时候被蛇咬。 如果在入睡前的时候， 笔者想起了此事，那么那个夜晚基本上就睡不好。 尽管笔者不断的告诉自己， 我已经关好了所有的门窗， 不会有什么生物可以进来， 但是仍然会害怕。到了后面，笔者开始考虑就算被咬了也没关系，可以打120，如果是毒蛇的话，医院应该会有血清什么东西的。不过，这没有效果， 就算笔者的理智知道这件事不会发生，而且就算发生了也有补救手段， 但是在情感上仍然是不断的害怕着。。 记得有一天夜里，笔者起来尿尿， 回到床上之后就突然开始了，不断的考虑着蛇的事情， 然后就睡不着辣。直到有一刻，笔者想着： 算了，无所谓， 被咬就被咬把，不管了。 然后笔者就睡着了💤。 那天之后， 还是经常会出现怕蛇咬的情况。。 可见，观念不是一天就可以改变的。 笔者还是一个完美主义者，以及非常的害怕失败和出糗。 在和别人互动之后， 经常会不断的回忆，反思发生的场景， 不断的思考我还有哪些地点可以改善的。 除此之外， 笔者还喜欢不断的预测未来， 即明天要做什么， 这周要做什么。 还喜欢在应该放松的时候思考一些无关紧要的东西。 笔者从18年年底 前列腺炎加重之后， 到了至今， 睡眠一直是一个问题。 此前，笔者一直觉得是前列腺炎的问题，不过现在想想， 应该是前列腺炎触发，加重了笔者持续十几年的焦虑问题。 另外一个加重焦虑的事件是 笔者在去年开始炒股，曾经爬上了GME的大船， 但是没有在适当的时机脱手，最终只赚了一点。 在浮盈很高的时候， 笔者的恐惧在不断的加大， 因为害怕会失去收益。 虽然最终真的是失去了收益😂 睡眠问题还有另外一个不断给笔者压力的地方， 那就是一旦睡不好就无法好好工作。 笔者已经进入到了这个恶性循环里面很久。 睡不好就无法工作， 这是事实，笔者在理性上就很难反驳， 在情感上就更难了。 所以在睡前的时候就会不断的给自己追加焦虑，最终完全睡不好。 笔者曾经数个晚上起了8次左右，早上醒来的时候感觉就像完全没有睡过。 笔者是一个独居的青年， 自从16年开始基本上都是独居的， 而独居似乎会加重这种情感。 解决办法当然是不独居咯， 不知道饲养宠物会不会好点。 因为童年时代，笔者的很多需求并没有得到满足， 比如玩具，零花钱啥的，所以笔者现在也经常刻意抑制自己的需求。 笔者并不能确定这样的经历和焦虑有没有关系，但是这绝对和抑郁症会有关系。。除此之外，这种现象还带来了另外一个状况： 笔者很难做到延迟满足，因为很害怕延迟延迟就没了。 笔者现在认为良好的满足需求可以达到泄压的目的，如果压力不断的积累的话，可能就会引发一些精神疾病。 笔者觉得自己像是一个自动加压的压力锅，且几乎没有泄压的时候。 不过，现在笔者终于发现了一些问题， 现在笔者想尝试解决问题。 2019年，笔者曾经在一家精神卫生健康中心做过相关鉴定， 给出的报告指明笔者有明显的焦虑情况。笔者前几天在搬家的时候无意间看到了报告，所以考虑需要解决这个问题。 ","date":"2021-09-06","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:1:0","tags":null,"title":"关于焦虑的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"治疗方式建议 主要思路是放松， 如果可以做到放松的话， 应该就可以处理好焦虑的情况。 ","date":"2021-09-06","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:2:0","tags":null,"title":"关于焦虑的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"身体扫描 本方法应该是笔者从《关怀自我的力量》一书中看到的。 平静的躺在床上，从大脑开始，往脚底方向进行扫描。 主要内容是感受， 感受身体现在是什么感觉。 热吗？ 正在和什么物体接触？ 疲劳吗？ 疼痛吗？ 一遍，两遍，几遍扫描下来，应该就可以恢复平静了。 ","date":"2021-09-06","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:2:1","tags":null,"title":"关于焦虑的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"冥想 适度的冥想应该可以放松身体， 去除杂念。 但是笔者并没有做很多冥想， 所以无法做太多介绍。 ","date":"2021-09-06","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:2:2","tags":null,"title":"关于焦虑的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"朋友 如果读者有能力和自己的朋友一起玩的话， 建议多和朋友一起玩。 无论是一起出游， 还是一起玩游戏应该都可以在一定程度上减少焦虑。 ","date":"2021-09-06","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:2:3","tags":null,"title":"关于焦虑的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"观念改变 改变观念才是治疗根本的方法， 但是这是一个很难，需要很长时间， 且容易反弹的方法。 笔者是一个追求完美和害怕失败的人， 笔者认为这两个特质使笔者很难放松，所以笔者决定放弃它们。 即， 笔者将不再追求完美， 且允许自己失败。 ","date":"2021-09-06","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:2:4","tags":null,"title":"关于焦虑的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"关于睡眠 笔者发现自己可以正常的入睡， 但是夜间总是醒来， 睡眠质量不佳。 经过尝试之后发现， 蜂蜜似乎可以减少这类情况，增加睡眠质量。 现在笔者在入睡前往往会喝一小杯蜂蜜水， 这样睡的就会好不少。 ","date":"2021-09-06","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:2:5","tags":null,"title":"关于焦虑的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"拓展阅读 《关怀自我的力量》 《精神焦虑症的自救》 ","date":"2021-09-06","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:3:0","tags":null,"title":"关于焦虑的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"本文的主要内容来自拓展阅读的两个视频中。 ","date":"2021-08-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%8B%96%E5%BB%B6%E7%97%87%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/:0:0","tags":null,"title":"关于拖延症的一些闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%8B%96%E5%BB%B6%E7%97%87%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"基本内容 ","date":"2021-08-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%8B%96%E5%BB%B6%E7%97%87%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/:1:0","tags":null,"title":"关于拖延症的一些闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%8B%96%E5%BB%B6%E7%97%87%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"拖延症部分 大多数人的脑袋里面都有下面几个东西。 理性的决策者 追求即时满足的猴子 恐慌怪兽 追求即时满足的猴子只注重当下的快乐， 而无视过去与未来， 他们重视的内容主要是EASY AND FUN。（简单与快乐。） 理性的决策者在正常的情况下很难与这只猴子抗衡， 所以人们就一而再，再而三的进行拖延。 就笔者来说， 笔者特别喜欢玩LOL， 也许有很多人是喜欢刷视频（抖音，B站啥的。） 。 一有时间，笔者就想着 打两把大乱斗把， 然后就开了。 40~60min 就过去辣。 笔者有时也会觉得LOL并不怎么好玩， 但是相对来说， 它和写博文，写代码相比， 肯定是简单和快乐的。 我们大脑中还有一个恐慌怪兽， 猴子唯一害怕的东西就是这只怪兽。 当恐慌怪兽出现的时候， 猴子会躲起来。 这时候理性的决策者就可以掌握行为的方向盘， 我们就可以开始做一些需要做的事情。 那么， 恐慌怪兽什么时候会出现呢？ 当我们碰到DEAD LINE的时候，即马上到了截止期的时候。 如果我们发现我们的东西还没有完成， 则可能会非常恐慌， 然后疯狂的做东西。 一般来说， 这只恐慌怪兽只在碰到 截止期的时候才会发狂， 而严重的问题在于， 我们自己给自己定下的截止期似乎并不奏效， 而成年了之后的生活， 存在截止期的事情并不多见。 并且， 想要依赖恐慌怪兽也不是一个健康的事情， 因为没有足够的时间， 做出来的东西可能并不是很好。 ","date":"2021-08-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%8B%96%E5%BB%B6%E7%97%87%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/:1:1","tags":null,"title":"关于拖延症的一些闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%8B%96%E5%BB%B6%E7%97%87%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"那么，如何改善呢？ 这里提供一个小技巧， 那么就是快速开始。 当我们一旦开始了需要的工作之后就可以减弱来自猴子的影响。 比如， 我们打算读一本书， 那么在有闲空的时候， 不需要考虑太多， 只需要想着， 我要翻开书看一下，就看一个字， 如果不想看的话， 我就立刻放手。 那么， 当你看了一个字之后， 你就会自动的去看下一个， 一段时间之后， 你就会阅读了这本书的部分内容。 紧接着， 你可能就会感觉到厌烦， 没关系， 现在去做点其他的事情好了。 等过了一段时间之后， 我们再尝试翻开书， 看一个字。。。 如此循环下去， 书就可以看完了。 ","date":"2021-08-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%8B%96%E5%BB%B6%E7%97%87%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/:1:2","tags":null,"title":"关于拖延症的一些闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%8B%96%E5%BB%B6%E7%97%87%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"其他补充 在你失落，受挫，抑郁的时候，猴子掌舵的可能性会加倍提升。 当然，这种情况下， 去追求EASY AND FUN并不是什么坏事。 真正有问题的是 不能自拔，即长时间沉迷于此。 在心情不好的时候， 笔者认为适当放松是一件有益的事情， 但是过度放松就不好了。 这里再提供另外一个可以工作的方法， 即 强制自己工作10分钟， 工作10分钟之后应该就可以心态放平的进行工作了。 ","date":"2021-08-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%8B%96%E5%BB%B6%E7%97%87%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/:1:3","tags":null,"title":"关于拖延症的一些闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%8B%96%E5%BB%B6%E7%97%87%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"拓展阅读 https://www.youtube.com/watch?v=arj7oStGLkU https://www.youtube.com/watch?v=TQMbvJNRpLE ","date":"2021-08-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%8B%96%E5%BB%B6%E7%97%87%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/:2:0","tags":null,"title":"关于拖延症的一些闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%8B%96%E5%BB%B6%E7%97%87%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"在开发项目的时候可能会使用到持续集成工具， 比如 jenkins 之类的， 在使用的时候， 可能会需要写一些shell脚本来辅助完成工作， 本文就介绍一下相关的shell脚本部分。 由于笔者是一个后端程序， 所以就只介绍后端程序的情况了。 ","date":"2021-08-07","objectID":"/program/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%83%A8%E5%88%86%E4%BB%8B%E7%BB%8D/:0:0","tags":null,"title":"自动化持续构建 命令行部分介绍","uri":"/program/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%83%A8%E5%88%86%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"详细内容 笔者基本上是使用的JAVA语言， 大多是采用maven做包管理器，其他语言大多应该是类似的。 脚本应该具有下面几个功能 编译，打包 打zip/tar.gz包 可选步骤 发布到目标服务器 可选步骤 重启程序 ","date":"2021-08-07","objectID":"/program/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%83%A8%E5%88%86%E4%BB%8B%E7%BB%8D/:1:0","tags":null,"title":"自动化持续构建 命令行部分介绍","uri":"/program/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%83%A8%E5%88%86%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"编译，打包 以及打压缩包。 使用命令 mvn clean \u0026\u0026 mvn install 基本上就可以完成编译打包的命令。 maven相关的配置文件这里就不描述了。 使用cpp的话， 如果使用cmake的话， 就使用下面的命令。 mkdir build \u0026\u0026 cd build cmake .. make 在执行了编译命令之后， 在shell 里面可以使用$? 变量获取上一个命令的结束状态码。 状态码基本上是0表示执行成功，其他是失败，状态码可以用于做失败处理。 在fish里面使用$status这个变量，fish这个shell 很多地方和其他的shell都不一样。。😂 打压缩包的话， 可以考虑下面的命令。 zip -q -r server.zip /path/to/server zip对应的解压命令是 unzip 其他压缩命令这里暂时不介绍了。 如果不想压缩的话，直接使用文件夹应该也是OK的。 ","date":"2021-08-07","objectID":"/program/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%83%A8%E5%88%86%E4%BB%8B%E7%BB%8D/:1:1","tags":null,"title":"自动化持续构建 命令行部分介绍","uri":"/program/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%83%A8%E5%88%86%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"发布程序到目标服务器 这里有下面几种情况。 发布到本机 Linux主机/Windows主机发布到另外一台Linux主机 Linux主机/Windows主机发布到另外一台Windows主机 暂不讨论 发布到本机 这个其实必要性不是很大， 但是也可以做。 主要思路是下面几个。 杀掉之前的进程 复制文件 开启新的进程。 Windows 在Windows下， 杀掉进程可以使用使用命令Taskkill /PID [pid] /F 或者Taskkill /IM [exeName] /F 这里的一个可选思路是这样的，在程序启动的时候把当前的pid写入到一个文本文件里面。 在需要杀死旧进程的时候读取文本文件获得pid，然后执行taskkill命令。 下面是一个示例 笔者并没有实际测试过正确性。 set /p pid=\u003cpid.txt Taskkill /PID %pid% /F 接下来就是复制文件， 使用命令 copy /f 即可， 如果文件过大也可以考虑使用xcopy命令。 启动的话，就很简单了， 使用命令 java -jar [jarFile] 即可。 在开发阶段可以加启动参数， 也可以不加把， 笔者觉得。 Linux 在Linux下，杀掉进程可以使用使用命令kill -9 [pid] 同样在Linux下也可以采取写入pid到文件的方式， 同时这里也提供另外一种方式。那就是使用ps 命令， 这个命令加上参数之后可以获取进程启动附带的参数， 所以使用其他命令组合在一起就可以完成杀死旧进程的目标了。 这里是一个示例： ps ax | grep -E 'keyword1|keyword2' | grep -v grep | awk '{print $1}' | xargs kill 将keyword1和keyword2 替换成自己要启动的jar文件的名称即可。 多个文件使用 | 符号分割。 复制文件使用 cp -f [src] [dst] 即可。 如果是需要复制文件夹，则使用cp -fR [src] [dst] 即可。 启动的话， 没有啥区别。 发布到远程linux服务器 这个操作和发布到Linux本机是类似的， 只不过要把3个部分拆分成3个脚本。 Linux 现在介绍几个Linux工具： sshpass 可以代替用户输入ssh链接的密码的命令 rsync 文件同步工具 ssh ssh链接或者执行ssh命令的工具。 下面给一段示例。 # 使用环境变量的方式给予 sshpass 相关的密码 export SSHPASS=\"$pass\" # ssh 命令的一些参数 SSH_FLAGS=(-q -o StrictHostKeyChecking=no -p ${s_port}) # 在目标服务器上创建文件夹 $(sshpass -e ssh \"${SSH_FLAGS[@]}\" ${user}@${s_addr} \"mkdir -p ${real_remote_folder}\") # 杀掉目标服务器上的进程 sshpass -e ssh \"${SSH_FLAGS[@]}\" ${user}@${s_addr} \"bash ${remote_target_folder}/control_scripts/killservers.sh\" # 传送文件 FLAGS=(--include=\"*.jar\" --include=\"lib\") sshpass -e rsync -e \"ssh -o StrictHostKeyChecking=no -p ${s_port}\" -avz \"${FLAGS[@]}\" --exclude=\"*\" ./ ${user}@${s_addr}:${real_remote_folder} 下面对上述脚本的变量做一些解释。 s_port 目标服务器的ssh链接端口 s_addr 连接目标服务器使用的地址 user 连接目标服务器使用的用户名 pass 连接目标服务器使用的密码 real_remote_folder 目标服务器的内部文件路径， 用于放置传送过去的文件 remote_target_folder 也是目标服务器上的一个目录 这个脚本是在本地执行的，它大概实现下面3个部分的功能。 杀掉目标服务器上的进程 传输文件 启动目标服务器上的进程。 Windows Windows下使用这个工具： https://www.putty.org/ 思路和Linux下没有变化，主要是具体实现细节上的差异。 plink 是一个putty包里面的工具，下面看一段脚本示例。 # 本脚本是纯手写， 没有经过测试 plink -batch -ssh %ssh_host% -l %ssh_user% -pw %ssh_pw% -P %ssh_port% echo hello, world pscp -q -batch -pw %ssh_pw% -P %ssh_port% c:\\local\\folder %ssh_user%@%ssh_host%:/path/to/folder/ 下面对上述脚本的变量做一些解释。 ssh_port 目标服务器的ssh链接端口 ssh_host 连接目标服务器使用的地址 ssh_user 连接目标服务器使用的用户名 ssh_pw 连接目标服务器使用的密码 更多关于参数的解释， 笔者附在了下面的拓展阅读部分， 有兴趣的读者可以自行查阅。 在执行文件的时候， 可以将最后的echo hello, world 替换成bash [filepath] 这里的filepath是目标服务器上的路径。 Jenkins相关的内容 如果使用jenkins 调用我们自己的启动脚本的话，可能会发现我们的程序被干掉了， 这时可以考虑在脚本里面添加这两行。 export BUILD_ID=dontKillMe export JENKINS_NODE_COOKIE=dontKillMe ","date":"2021-08-07","objectID":"/program/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%83%A8%E5%88%86%E4%BB%8B%E7%BB%8D/:1:2","tags":null,"title":"自动化持续构建 命令行部分介绍","uri":"/program/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%83%A8%E5%88%86%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"结尾 下面是一些吐槽部分。 笔者感觉上前端更需要持续集成， 至少需要大于后端。 在笔者经历过的游戏公司中，前端每次打包都至少要折腾到半夜12点， 甚至凌晨2点至更晚。 似乎现在行业上的人都接受了这个现状，也不求改变。 😂 很多问题都是在打包当天发现，然后要求处理的， 这让笔者觉得很不可思议。 从关心人文的角度上看： 首先人的精力有限，越到很晚的时候越没有精力。 其次， 除非经常熬夜的人， 不然的话那个时候人很可能会感到不舒服。 从技术角度上看： 有不少情况是编辑器上看是正常的，但是手机上看效果不好（手游）。 但是在开发阶段测试的时候， 很多团队都是仅使用编辑器测试。 然后一大堆手机相关的问题在打包当天爆发。 如果能够提前打包的话，就可以减少一定的手机上相关的问题。 打包是一个比较缓慢和浪费时间的过程， 如果有脚本或者相关的东西辅助的话， 也可以节省一定的时间。 上面是笔者推荐使用自动化构建的理由， 但是笔者没有实际操作过前端的自动化构建， 所以并不是很清楚有没有实施难度。 等待后面笔者有机会尝试了之后， 会更新这篇博文。 ","date":"2021-08-07","objectID":"/program/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%83%A8%E5%88%86%E4%BB%8B%E7%BB%8D/:2:0","tags":null,"title":"自动化持续构建 命令行部分介绍","uri":"/program/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%83%A8%E5%88%86%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"拓展阅读 http://c.biancheng.net/cpp/view/2739.html https://www.runoob.com/linux/linux-comm-zip.html https://www.runoob.com/linux/linux-comm-unzip.html https://the.earth.li/~sgtatham/putty/0.60/htmldoc/Chapter5.html https://the.earth.li/~sgtatham/putty/0.70/htmldoc/Chapter7.html#plink ","date":"2021-08-07","objectID":"/program/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%83%A8%E5%88%86%E4%BB%8B%E7%BB%8D/:2:1","tags":null,"title":"自动化持续构建 命令行部分介绍","uri":"/program/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%81%E7%BB%AD%E6%9E%84%E5%BB%BA-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%83%A8%E5%88%86%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"[噩梦人的梦呓] 本故事里面出现的任何地点，人名均为杜撰， 请不要对号入座。 李永言告诉水桥晴雪说现在没有多余的床给她用，让她现在沙发上将就一夜，等工作回来之后再说这个问题。 水桥晴雪知道自己理亏，并且知道强行让别人收留自己是一件不好的行为，所以也没有多说什么，就答应了下来。 等李永言离开了之后， 水桥晴雪躺在沙发上稍微回忆了下这些天发生的事情。 自己在实验室里面做的最后一个实验是测试能力极值，之后的事情便不记得多少了。 等恢复意识的时候已经在那条街附近了，当时自己身上是脏兮兮的。完全想不起来这些天到底在哪，做了什么。 当时月亮高挂，周围静悄悄的，自己感觉非常的饥饿，所以就想找点食物。逛了老大一圈之后， 没有发现什么食物， 也没有发现多少店开门，开门的店大多客人都不少。 正当绝望之时，却看到了有一个人单独的在路上行走。遂一路尾随了那个人。 几次想要鼓起勇气上去搭话，但是都没敢。 眼见那人可能要进入室内了， 那样的话自己就没有机会了， 所以才把心一横，上去搭话了。 虽然整体来说的过程不算很好，但是总归得到了一个还算不错的结果。 现在回想起整个事情， 小心脏还是会扑通扑通的跳个不停💗💗💗 。 “啊啊啊， 我居然威胁了他， 他明明是一个好人， 给了我吃的喝的。” 水桥晴雪在不知不觉间竟然开始了自言自语。 “不知道他有没有受伤啊， 我现在已经对高温有点免疫了， 不知道温度掌控的怎么样。” “他可能比我还紧张把， 我突然出手胁迫了他。” “他真的会相信我说的话吗， 会不会去告密啊。。。 我现在是不是离开比较好呢？” “可是离开的话， 要去哪里啊。。 好烦那啊啊啊😖 😖 😖” “不知道爸妈是否还健在，还能不能再见到他们。。 他们现在应该被监视着把。。去找他们的话， 可能也会被抓住。。” 李永言家里的沙发不是那种能平铺的类型，所以面积还是有点小的。 而水桥晴雪在胡思乱想的时候居然噗通一声摔了下去。 “疼疼疼😖 😖 😖” 水桥晴雪不禁的嘶了起来， 不过所幸是屁股着地， 没有什么大碍。 这一摔也让水桥晴雪冷静了下来。 她突然想起什么， 便随意的将手掌张开，一个不大不小的火球便在手里显现而出。 水桥晴雪想道： 果然，自己的能力变强了， 无论是能量储量还是操控能力和以前相比都发生了非常巨大的变化。 现在使用异能感觉是一件比较轻易的事情了，操控起来比以前要简单多了。虽然不知道原因是什么，但是应该和失去记忆那些天发生的事情有关。 水桥晴雪起身去洗了把脸，然后重新回到沙发躺好。 结果不一会儿就睡着了，看来这个妹子是有点疲劳过度。 李永言回到了店里之后开始忙活工作， 虽然被下了诅咒确实是一件比较忧心的事情。 但是现在并没有什么事情发生， 作为一名成熟的成年人还是接受现实比较好。（其实并不怎么成熟） 李永言清理了台面，拿出面粉开始和面。 因为店里平时顾客并不多， 为了面包的新鲜度，一般李永言都不会做很多面包， 所以工作量也不是很大，店里一直以来也就只有李永言一个人而已。 这时已经5点多了， 李永言开始干活的时间比平时晚了1个小时左右， 所以预计结束的时间也要晚一个小时左右。 平常的话， 李永言每天需要工作5 ~ 7个小时来制作面包， 然后剩下的时间基本上都是在店里玩游戏。 偶尔的话， 会出现在前台和客人们聊聊天。 像王阿姨和谢阿姨这样的常客，大多是过来喝茶聊天的，所以李永言会去接待一下。 平时的客人的话， 大多都是自助购买。 李永言所在的这个国家， 每个人至多可以领取3张证件卡，就是说至多允许你同时有3个不同的身份。但是常规情况下，只允许领取一个。 这个身份卡是全国通用的，可以用于支付，收款，身份证明， 出示驾照，汽车开锁，登录游戏等几乎全部的行为。 面包的包装袋上可以读取到价格，一般顾客会使用身份卡购买面包。 身份卡虽然称之为身份卡， 但其实是一个电子设备， 整个卡的正面都是一个可触摸的屏幕。不过功能不多，大多都是用于支付确认之类的功能。 店里有一台机器用于防止顾客偷窃食品。 当然，在这个人人有低保的国家， 偷窃还是比较少发生的。 所有的包装袋上都会寄放一个微小的芯片，芯片的信息由这台机器写入。 当用户拿着没有被支付的商品离开店的时候，这台机器就会产生报警信号。 不过，这台机器并不能防止用户撕开包装， 拿出面包然后溜之大吉。 所以， 当李永言游戏玩腻了的时候， 也会到店前面坐坐。 一直工作到中午11点多， 李永言才收拾好各种器具，结束今天的工作。虽然他尽力让自己的心神都放在面包制作上，但还是频频分心， 为诅咒和接下来的事情担忧。这导致他花了比平时更多的时间工作， 做出来的面包还不太好吃。 后来， 李永言发现今天的差评比平时要多上一些。 😂 ”唉，算了， 不管了， 还是先玩玩游戏把。“ 李永言说罢，拿起了白夜。 ","date":"2021-07-31","objectID":"/non-menu/story-mirror/3.%E5%A5%B9%E4%BD%8F%E8%BF%9B%E4%BA%86%E6%88%91%E5%AE%B6/:0:0","tags":null,"title":"3.她住进了我家","uri":"/non-menu/story-mirror/3.%E5%A5%B9%E4%BD%8F%E8%BF%9B%E4%BA%86%E6%88%91%E5%AE%B6/"},{"categories":null,"content":"本篇来尝试描述一下for循环语句如何实现。 ","date":"2021-07-31","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.5-for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/:0:0","tags":null,"title":"自制脚本语言[5.5] for循环语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.5-for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"基本内容 ","date":"2021-07-31","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.5-for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/:1:0","tags":null,"title":"自制脚本语言[5.5] for循环语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.5-for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"语法树部分 先上图。 笔者这里给出了一个简单的for语句， 并附上了一个示意的AST结构。 for语句看起来复杂， 但是还是比较简单的， 只是他的子节点比别的语句多了几个而已。 基本上来看， for 语句可以看做这样的形式 for 小括号内 语句块 。 而小括号内 又可以看成第一阶段;条件语句;第三阶段 。 把所有的元素展开合并之后就得到了上图的四个子元素。 其中第一阶段只在循环开始的时候执行1次， 而第三阶段则在每次循环体运行之后运行一次。 for_1 第一阶段 condition 条件语句 for_3 第三阶段 loop_body 循环体 （语句块） condition条件部分 和其他的循环语句， if语句的一样， 在语法分析上，基本是可以共用一个部分。 for语句的实现思路也比较简单， 先执行for_1语句， 然后执行condition语句， 如果是true就执行loop_body块，然后执行for_3，否则跳出循环。 for_1 -\u003e condition -\u003e loop_body -\u003e for_3 -\u003e condition -\u003e loop_body -\u003e for_3 -\u003e condition(false) -\u003e break 不知道读者能不能看得懂上面的流程。。。 😂 ","date":"2021-07-31","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.5-for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/:1:1","tags":null,"title":"自制脚本语言[5.5] for循环语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.5-for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"直接在AST上进行运算 像往常一样， 在AST上运算的时候， 跳转不是很好做。 其次， 循环体里面的所有节点的值记得注意一下， 否则可能会出现BUG。 实现思路就按照上面说的内容进行实现就可以了， 如果在实现的过程中发现了什么问题， 往往是节点执行流程的设计有问题， 重新矫正一下那部分即可。 ","date":"2021-07-31","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.5-for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/:1:2","tags":null,"title":"自制脚本语言[5.5] for循环语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.5-for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"使用字节码进行运算 这部分， 笔者尝试写一下上面语句的字节码伪代码。 指令附加阅读内容： 字节码列表 # for # for_1 seti i 0 # condition start_of_loop: # 检查 i 是否小于10 lt i 10 # 如果上面运算的值为false, 则跳出循环 cjmp end_of_loop # loop_body # println(i); call println get i execute # for_3 add i 1 # back to start jmp start_of_loop # out of loop. end_of_loop: 主要思路和while循环类似，主要是在 for_3 阶段后面添加一条无条件的跳转语句， 调整到循环开始的地方。 关于 for(; ; ) {} 语句的话， 省略掉 for_1,condition，for_3的内容，下面给出一个字节码示例。 start_of_loop: # loop_body # println(i); call println get i execute # back to start jmp start_of_loop # out of loop. end_of_loop: ","date":"2021-07-31","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.5-for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/:1:3","tags":null,"title":"自制脚本语言[5.5] for循环语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.5-for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"[噩梦人的梦呓] 本故事里面出现的任何地点，人名均为杜撰， 请不要对号入座。 李永言小时候曾经看过一些鬼故事， 他的记忆告诉他这时候绝对不能回头，也不能回应，应该打开门迅速进入店内。 打定主意， 李永言便要使用身份卡打开店门。可是李永言心理实在害怕的要命，手抖个不停，竟然把身份卡给抖掉地上了。 如果是其他时间倒也无所谓，拿起来就好了。 但是这个时间点，时间就是生命，李永言感觉自己要玩完了。 这时，李永言感觉自己的衣服被拽了拽，那个怯生生的声音又响起了“请问， 你能收留我一下吗， 我已经饿坏了。” 李永言害怕自己如果行为激烈的话， 可能会惹女鬼生气，只能僵硬的转过身来， 看看背后到底是个啥。 定睛一看，原来身后就是一个大约15岁左右的女孩子，脸上，身上都是脏兮兮的，感觉有些天没有洗过澡了。 什么啊， 原来是流浪的孩子，居然把她当成女鬼，这下子糗大了。 都怪王阿姨说什么超自然现象， 也不明说到底是啥。 李永言悬在空中的内心一下就放了下来， 便说道：“饿坏了是把， 我店里应该还有些吃的，跟我进去把。” 女孩一听，高兴的回答道：“嗯！” 李永言捡起身份卡， 打开店门，走了进去， 女孩跟着其后进了店里。 店里还剩下一些昨天没有卖掉的面包，可以用来打发这个孩子。 李永言带着孩子洗了洗手， 漱了漱口， 当李永言让女孩把脸洗干净的时候， 女孩怎么都没有同意， 让李永言觉得很奇怪。 李永言看到店里只剩下几个毛毛虫面包的胚子，于是打算现做几个毛毛虫面包， 让女孩坐在沙发上等待，自己跑去厨房忙活。 说是厨房，其实和店前侧并没有什么阻隔的挡板， 因为店不是很大。 李永言先是把面包拿到微波炉里面，用小火热1分钟。 拿出来之后用刀子从面包中间划开一刀，然后从冰箱里面拿出昨天剩下的一点奶油， 挤进面包里面。 之后拿出草莓🍓，芒果。 芒果去皮，取出果肉，切成和草莓大小差不多的小块， 将🍓和芒果块按照自己的喜好放在奶油上。 这样，黄色的芒果，红色的草莓，白色且偏淡黄色的奶油，一起放在了面包里，看起来就很好吃🤤 🤤。 李永言把面包装盘，拿到沙发旁边的桌子上， 然后从冰箱里面拿出两瓶从供应商那里购买的葡萄汁放到桌子上。 “好了，开吃把” 李永言拿起一个面包就开始慢悠悠的啃了起来， 他一边啃一边打量着女孩。 15岁左右的孩子，白色的衣服被污泥染的怪怪的，头发也是乱糟糟的， 不知道是从哪里来的。 这个国家的基础福利是很好的，基本上不会存在乞丐这类人群， 所以李永言对这个女孩比较感兴趣。 吃完了早饭， 李永言把餐具收拾了一下。 回到沙发旁， 问道：“你叫什么名字啊？” “水桥晴雪”女孩答道。 这个国家的文化比较复杂和混乱， 基本上叫什么名字的都有，所以李永言对此并没有感觉到有什么奇怪的。 “水桥妹妹， 我很抱歉的和你说， 我无法收留你。” “为什么？” 水桥晴雪感觉有点绝望，那种希望持续没多久的绝望。 “因为这个国家不允许未认证的收留，这是违法的。他们会认为我在拐卖人口。” “。。。” 水桥晴雪一阵沉默。 李永言接着说道：“你放心好了， 我待会送你到救助站，这附近的救助站不远的，他们会给你提供住处，新衣服，食物， 还会给你介绍工作。 ” “工作？ 我可以在你这里帮工啊，我可以学习各种事情的， 我手脚很勤快的。” “嗯。。 你是未成年把？” “我已经成年了！” “那你能拿出你的身份证明给我看一下吗？” “那个前两天丢了，找不到了。。。” 水桥晴雪低着头，不敢看李永言。 “救助站会提供给你一个证明文件， 那个证明文件会说明你打工的合法性， 如果没有那个文件， 你在我这里打工的话， 我会被抓起来。” 李永言显然不信水桥晴雪所说的内容。 “我。。 我不要钱，我只求你能收留我一下。。” 水桥晴雪明显走投无路了， 才会说出这样的话来。 “我和你说过啦， 救助站可以很好的帮助你的。” 李永言虽然有点心软了，但是法律之下，平民没有还手之力， 还是老老实实的介绍妹妹去救助站比较好。 水桥晴雪黯淡的眼神开始慢慢浮现出愤怒💢💢 , 然后转向坚定。只见水桥晴雪右手一抬， 一把火焰剑🔥🔥就出现在她的手里。 剑刃距离李永言的脖子很近， 炽热的温度让李永言感觉到十分的不适和惶恐。 李永言瞬间有点不知所措，毕竟这种情况以前从来没有碰到过。 好在水桥晴雪给了李永言一些选项：“收留我，或者死在这里， 你自己选。” 水桥晴雪的声音有点颤抖， 显然她虽然在愤怒的心态下做出了这些行为， 但是在内心中也没有下定决心。 “嘿，冷静点。” 李永言终于反应过来了，这下自己真的是碰到了超自然现象。 “我很冷静， 你知道了我的事情， 我无法放你走。” 水桥晴雪的声音逐渐趋向平静， 能在这么短的时间内坚定想法，行为， 她的内心也是比较强大的。 “好，我答应收留你。 ” 这时候只能使用缓兵之计了， 李永言在心里想道。 水桥晴雪听了这句话虽然高兴， 但是仍然没有放松警惕，她左手一挥，一个小的火种直接没入李永言的身体里面。 她说道：“这是一个火焰种子，我已经把它寄居在了你的心脏里， 只要我想，或者我死了， 它就会在瞬间产生1000摄氏度的高温火焰。” 为了加深可信度，水桥晴雪略微的发动了一下火焰， 李永言直接就感觉心脏位置有点炎热的感觉。 随后，她收起了火焰剑并说道：“你最好保密刚刚发生的事情， 对任何人都不能说。 🤐 🤐“ ”好。。。好 🤐 🤐“ 李永言答应道， 现在人为刀俎，我为鱼肉， 不得不答应这些要求。 ”对了，那些救助站，远没有你看到的这么好。 他们都是政府的走狗， 如果他们发现了我， 肯定会把我给抓起来， 所以救助站不是我的选项。“ 停顿了一下，水桥晴雪接着说道 “ 还有就是， 面包很好吃， 谢谢。 ”。 ”。。 不客气。“ 沉默了一会，李永言说道：”我白天要开店， 不能照顾你。。 而且你这个样子实在不好出现在店里。 你要不先去我家睡会？ “ 水桥晴雪虽然担心李永言去告密，但是呆在店里被客人看到也不是一个很好的选项， 所以就答应了李永言。 李永言把水桥晴雪送到了自己的家里，并说了一些事项之后就又回到了店里。 ","date":"2021-07-24","objectID":"/non-menu/story-mirror/2.-%E6%88%91%E7%A2%B0%E5%88%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E5%A5%B3%E5%AD%A9/:0:0","tags":null,"title":"2. 我碰到了一个女孩","uri":"/non-menu/story-mirror/2.-%E6%88%91%E7%A2%B0%E5%88%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E5%A5%B3%E5%AD%A9/"},{"categories":null,"content":"笔者最近打算做一个工具， 考虑使用v8引擎做js语言的解析和执行。 在嵌入的过程中踩了一些小坑， 本文用来记录一下。 ","date":"2021-07-23","objectID":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%B5%8C%E5%85%A5v8%E5%BC%95%E6%93%8E%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4%E8%B8%A9%E5%9D%91/:0:0","tags":null,"title":"Cpp程序嵌入v8引擎的(踩坑)记录贴","uri":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%B5%8C%E5%85%A5v8%E5%BC%95%E6%93%8E%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4%E8%B8%A9%E5%9D%91/"},{"categories":null,"content":"长话短说 笔者使用的是Mac 系统，使用命令 brew install v8 即可安装v8库。 安装成功之后，在这里应该可以找到需要的文件： /usr/local/opt/v8/libexec/ 。 /usr/local/opt/v8 是一个软连接， 它的真实目录这里就不介绍了， 如果读者想知道的话， 可以自行使用命令查看一下。 可以使用命令d8 来检查一下安装是否成功了， 那是一个可以执行js语句的命令行程序。 ","date":"2021-07-23","objectID":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%B5%8C%E5%85%A5v8%E5%BC%95%E6%93%8E%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4%E8%B8%A9%E5%9D%91/:1:0","tags":null,"title":"Cpp程序嵌入v8引擎的(踩坑)记录贴","uri":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%B5%8C%E5%85%A5v8%E5%BC%95%E6%93%8E%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4%E8%B8%A9%E5%9D%91/"},{"categories":null,"content":"cmake 如果使用cmake 的话， 可能还需要这个 https://github.com/metacall/core/blob/develop/cmake/FindV8.cmake 可以使用类似如下的代码使用这个FindV8.cmake # 先使用 wget 或者其他工具把该文件下载到本地， 并保存到项目目录下的cmake 子目录。 # add directory set(CMAKE_MODULE_PATH APPEND \"${CMAKE_SOURCE_DIR}/cmake/\" ) # sight 是笔者正在做的一个工具。 add_executable(sight program.cpp) # V8 set(V8_DIR \"/usr/local/opt/v8/libexec/\") find_package(V8 REQUIRED) target_include_directories(sight PRIVATE ${V8_INCLUDE_DIR}) # 如果没有这个定义 在程序运行的时候 好像会报错 target_compile_definitions(sight PRIVATE V8_COMPRESS_POINTERS V8_31BIT_SMIS_ON_64BIT_ARCH) # 链接库 target_link_libraries(sight PRIVATE ${V8_LIBRARIES}) 关于V8_COMPRESS_POINTERS宏定义的拓展阅读部分： https://stackoverflow.com/questions/62921373/embedder-side-pointer-compression-is-disabled/62921689#62921689 ","date":"2021-07-23","objectID":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%B5%8C%E5%85%A5v8%E5%BC%95%E6%93%8E%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4%E8%B8%A9%E5%9D%91/:1:1","tags":null,"title":"Cpp程序嵌入v8引擎的(踩坑)记录贴","uri":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%B5%8C%E5%85%A5v8%E5%BC%95%E6%93%8E%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4%E8%B8%A9%E5%9D%91/"},{"categories":null,"content":"常规方式 如果不使用cmake的话， 可以手动添加目录。 下面介绍一下相关的目录内容。 头文件目录： /usr/local/opt/v8/libexec/include 库文件目录： /usr/local/opt/v8/libexec/ libv8.dylib libv8_libbase.dylib 引用了上面的那个， 似乎可以不引用这个 libv8_libplatform.dylib 以下库都非必须，在需要的时候引用即可 libicuuc.dylib libicui18n.dylib libchrome_zlib.dylib icudtl.dat 这个不是动态库，在部分应用场景下需要复制到自己的程序目录里面，在初始化v8的时候，让v8引擎加载这个文件。 ","date":"2021-07-23","objectID":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%B5%8C%E5%85%A5v8%E5%BC%95%E6%93%8E%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4%E8%B8%A9%E5%9D%91/:1:2","tags":null,"title":"Cpp程序嵌入v8引擎的(踩坑)记录贴","uri":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%B5%8C%E5%85%A5v8%E5%BC%95%E6%93%8E%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4%E8%B8%A9%E5%9D%91/"},{"categories":null,"content":"v8pp 这里再介绍一个方便 绑定cpp和js的库， v8pp。 https://github.com/pmed/v8pp ","date":"2021-07-23","objectID":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%B5%8C%E5%85%A5v8%E5%BC%95%E6%93%8E%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4%E8%B8%A9%E5%9D%91/:1:3","tags":null,"title":"Cpp程序嵌入v8引擎的(踩坑)记录贴","uri":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%B5%8C%E5%85%A5v8%E5%BC%95%E6%93%8E%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4%E8%B8%A9%E5%9D%91/"},{"categories":null,"content":"长篇大论 在使用homebrew 之前， 笔者尝试自己编译v8源码， 结果发现一些问题， 死活没弄好。。 本部分就是相关的记录。 ","date":"2021-07-23","objectID":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%B5%8C%E5%85%A5v8%E5%BC%95%E6%93%8E%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4%E8%B8%A9%E5%9D%91/:2:0","tags":null,"title":"Cpp程序嵌入v8引擎的(踩坑)记录贴","uri":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%B5%8C%E5%85%A5v8%E5%BC%95%E6%93%8E%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4%E8%B8%A9%E5%9D%91/"},{"categories":null,"content":"从源码获取到编译 官方文档： https://v8.dev/docs/build-gn 步骤如下： 获取 depot_tools. 获取 v8 源码 调整编译参数 编译 # 1. cd somewhere git clone 'https://chromium.googlesource.com/chromium/tools/depot_tools.git' # 添加环境变量 # add path , you may need add to ~/.bashrc or ~/.zshrc or config.fish export PATH=somewhere/depot_tools:$PATH # 更新 depot_tools cd somewhere/depot_tools gclient # 2. cd somewhere fetch v8 cd v8 # 3. # 自动参数编译 | 不推荐使用自动的方式， 因为编译出来的是静态库。 当然，静态库可能也行吧。。 gm x64.release # 如果想附带测试就执行下面这个 | 两个命令执行1个即可。 gm x64.release.check # 以上任意一个命令都会附带编译过程。 # 手动调整参数 | 和上面自动参数编译 二选一执行即可。 # 下面这个命令会打开一个 vi/vim 编辑器， 让你手动填写参数 gn args out/x64.release # 读者可以使用下面的命令附加参数 | 此命令和上面那个使用1个即可。 gn gen out/x64.release --args='is_debug=false target_cpu=\"x64\" v8_target_cpu=\"arm64\"' # 可以使用这个命令查看所有可用的参数 gn args out/x64.release --list # 因为参数会很多， 所以建议读者把输出重定向到文件， 然后阅读文件 gn args out/x64.release --list \u003e args.txt # 注意 参数 `is_component_build = true` 会编译出动态库， 如果需要动态库就加上这条配置。 # 然后根据args.txt 文件里面的内容 选取想要的参数， 添加到 out/x64.release/args.gn 里面即可。 # 4. # 生成配置 gn gen out/x64.release # 编译 所有目标 | 如果想编译特定的目标， 就在后面追加参数即可。 ninja -C out/x64.release # 等待一段时间， 应该就可以编译成功了。 默认情况下， v8 应该会使用自带的clang编译器进行编译， 在笔者的环境下是 clang 13.0 。 该执行程序位于somewhere/v8/third_party/llvm-build/Release+Asserts/bin/ 。 这个和笔者的系统默认编译器不是同一个， 笔者的默认编译器是clang 12.0 。 在上述的环境下编译hello-world.cc这个示例文件， 可能会出现 std::unique_ptr\u003cv8::Platform\u003e platform = v8::platform::NewDefaultPlatform(); 这行语句报错的情况。 笔者就卡死在处理NewDefaultPlatform()语句的情况下了。。 使用c++filt -n xxxxx 可以还原符号的内容， 会发现libv8_libplatform.dylib 文件里面的符号是 v8::platform::NewDefaultPlatform(int, v8::platform::IdleTaskSupport, v8::platform::InProcessStackDumping, std::__1::unique_ptr\u003cv8::TracingController, std::__1::default_delete\u003cv8::TracingController\u003e \u003e) 使用nm 命令可以查看符号， 然后使用c++filt 命令还原。 他引用的命名空间是 std::__1 ， 然后查看我们自己的文件， 会发现它引用的命名空间是std::__cr 。 笔者考虑的办法有以下几个。 使用v8带的编译工具编译我们自己的文件 笔者没有尝试这个 使用我们自己的编译工具编译v8 笔者尝试了好几次， 总是无法编译。。 在使用ninja 工具的地方出错 什么都不修改编译成功之后， 在相应的目录会生成一个叫做libc++.dylib的文件， 使用这个动态链接库代替系统的。 笔者没有找到合适的资料讲述如何完成这个步骤，所以没有尝试 在尝试了homebrew 之后， 笔者成功了， 所以就没有继续考虑这个该怎么做。 ","date":"2021-07-23","objectID":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%B5%8C%E5%85%A5v8%E5%BC%95%E6%93%8E%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4%E8%B8%A9%E5%9D%91/:2:1","tags":null,"title":"Cpp程序嵌入v8引擎的(踩坑)记录贴","uri":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%B5%8C%E5%85%A5v8%E5%BC%95%E6%93%8E%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4%E8%B8%A9%E5%9D%91/"},{"categories":null,"content":"其他 使用 make VERBOSE=1 可以打印出编译使用的命令。 笔者是使用cmake生成的文件尝试的。 https://v8.dev/docs/embed 是官网文档， 讲述如何嵌入V8的。 ","date":"2021-07-23","objectID":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%B5%8C%E5%85%A5v8%E5%BC%95%E6%93%8E%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4%E8%B8%A9%E5%9D%91/:3:0","tags":null,"title":"Cpp程序嵌入v8引擎的(踩坑)记录贴","uri":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%B5%8C%E5%85%A5v8%E5%BC%95%E6%93%8E%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4%E8%B8%A9%E5%9D%91/"},{"categories":null,"content":"[噩梦人的梦呓] 本故事里面出现的任何地点，人名均为杜撰， 请不要对号入座。 3月10号早上10点半。 店里没有什么人， 李永言像往常一样躺在沙发上打游戏。 他玩的是一款叫做幻想序灵曲的网络游戏，这款游戏是半年前，也就是2077年9月公测的，大家都把它叫做续零，因为原名实在有点太长了，太难念了。 续零这款游戏是基于半潜行设备进行制作的，半潜行设备是在2075年由政府公开发布的设备。这款设备据说是和大脑直接进行交互的，它可以读取并发送有关声音，视觉，手指触觉等神经信号。 政府将他们的设备取名叫白夜， 并且在之后的几个月将专利公开了出来。 现在也有不少新的半潜行设备出现，不过都没有白夜出名和火爆。 当然，最主要的原因可能是因为政府为了推广这款设备，在发布没多久之后就开启了一项全民赠送的计划。在这项赠送计划中，国家的每个公民都可以凭借身份证明领取一套设备， 并且结婚家庭还可以给未来的孩子领取一套。 续零是一款偏ARPG的游戏， 这款游戏没有职业的设定，玩家可以学习任意技能，使用任意的武器。 并且每一个玩家看到的剧情可能不太一样， 大家共同的剧情只有新手村部分的内容。 这款游戏没有角色等级，只有技能等级和技能前置等。 如果非要说存在什么的话， 那就是存在一个在线小时数的证明， 而这个证明也仅仅只有展示效果。 现在这个时间，李永言正在和他的线上好友丙午桑一起猎杀一个野外BOSS。 游戏里的BOSS基本上都是随机生成的，他们俩现在要想拿下的BOSS是一只火牛， 火牛的角上绑着一根巨大的木头，那根木头在不停的燃烧着。这头牛的攻击力很高， 两个人的角色基本上被打个3~5下就要挂了。 他们已经尝试了几次， 但是都被火牛灭了。 不过这游戏的死亡惩罚并不是特别严重， 所以两个人就和这头牛耗上了。 这只火牛本来是一个村民NPC饲养的牛，结果异变了， 把那个村庄的村民都给干掉了。 因为村子是小村子，所以并没有任何NPC或者角色发布任务来杀这头牛，所以没有人和李永言，丙午桑竞争。 两个人现在正在一起讨论战术，打算一人拉仇恨， 给另外一个人输出的空间。 而就在此时， 李永言看到了一个弹窗提示“有客人啦，有客人啦。”， 李永言连忙和丙午桑说道“小午，我来客人了，我们先放过这头牛，回头再打。” 丙午桑回应了两声就自个玩别的去了。 李永言起身来到店前侧， 看到了两个中年妇女正在挑选面包， 便上前打招呼道“谢阿姨，王阿姨。” 。 谢阿姨是宽额头，一字眉，眼睛偏中号大小，就是那种不大也不小的眼睛。 她选择了一个短发的发型，耳带珍珠耳环，简单的围着一条紫色的围巾，上身穿着一个黑色带金色印花的外套。 3月的天气还有些稍凉，街上的人群基本上都会穿上外套。 王阿姨的头发稍长，但是选择盘了起来，她的鬓发留的稍长，已经到了下巴的位置， 也不知道平时好不好打理。 她也是较宽的额头， 但是使用刘海遮挡了一些，水湾眉， 带着一条银质项链。 身穿黑色毛衣，她的外套已经脱下来了。 谢阿姨闻声便说道：“小李啊， 你这样开店可不行啊， 我们俩已经进来半天了，也没人招呼。” 谢阿姨和王阿姨是李永言的面包店的常客，经常照顾李永言，谢阿姨比较喜欢打趣这个年轻的小伙子。 李永言回答道： “服务不周，望谢阿姨见谅， 我送您俩菠萝包以表歉意。” 王阿姨这时插话道：“哎呀，她逗你玩呢，我们俩刚进店没2分钟。 ” 李永言：“没事，没事，我这菠萝包是秘制的，本来也是想拿给两位品尝一下。” 谢阿姨：“小李啊， 你那菠萝包还是留着自己吃把。 上回也和我们说是秘制的，结果我们一吃发现就是平常的菠萝包嘛。 我看你就是做多了卖不出去把。😒 😒” 李永言嘿嘿一笑不说话了。 这时，王阿姨回头看了下外面， 街上一个人也没有， 现在已经到了中午11点， 可能行人都去吃饭了把。 王阿姨又朝屋里看了下， 没有发现半个人影。 李永言发现了王阿姨的行为， 便说道：“店里除了我们仨，没有其他人了。 怎么了吗， 王阿姨” 王阿姨走到李永言的旁边，小声说道：“听说最近出了一些不好的事情，你要注意安全啊。” 李永言听了一惊， 便下意识的问道：“不好的事情？ 什么不好的事情？ ” 王阿姨说道：“听说我们F区出现了一些超自然现象。 我和你谢阿姨本来是不相信这样的事情的， 但是透露消息的是我们的好朋友，我们觉得那个人不会骗我们的，所以我们特来通知你一下， 希望你注意安全啊。” 李永言：“王阿姨，你这是认真的吗？ 还是谢阿姨把你给带坏了啊” 王阿姨：“我可从不会在这种事情上开玩笑。 听说前几天的晚上，在F3区发生了一件怪事。 虽然现在新闻都已经被封锁了， 但是我从朋友那听说， F3区发生了一些大爆炸，还有大水冲倒了好几栋楼。” 王阿姨顿了顿继续说道：“我们俩住在F1区， 离那儿比较远，所以倒也不是很担心。 但是你这F5区离F3区可是很近的。 我们这是来道别的，在事态明朗之前，我们应该都不会再过来了。 老头子担心来这里会被波及。” 李永言震撼了好一会之后， 看向谢阿姨问道：“王阿姨说的是真的吗？” 谢阿姨平静的回答道：“是的。” 看到谢阿姨严肃平静的脸孔， 李永言知道这事估计是真的了，便说道：“好的， 我会注意的， 多谢两位阿姨挂念。” 王阿姨和谢阿姨之后买了些面包就离开店回去了。 李永言虽然答应了，但是考虑到现在F5区还没有什么新闻， 而且自己是要吃饭的， 便暂时没打算变更作息，心怀侥幸的想着后面谁家出事了再说。 王阿姨和谢阿姨的家庭都是有钱人， 而李永言则是一个平凡的小伙子， 积蓄并不是特别多， 所以也没办法。 不过就今天来说，两人还是把李永言给吓到了， 李永言在下午4点半左右的中学生放学潮结束了之后就关店回家了。 李永言住在离店不是特别的远的地方， 走路回家就可以了。 虽然担心， 但是杞人忧天毫无意义， 所以吃过晚饭之后， 李永言又和丙午桑一起玩了挺久的续零才睡觉。果然网络游戏才是人类的救赎！😁 😁 凌晨3.30， 李永言日常开始起床， 3.45出发去店里。 因为昨天晚上大玩了游戏，所以李永言把王阿姨的话给忘记了。 路上几乎没有看到一个人，车辆也很少。 因为这个地方本身就比较偏僻，而且这个时间点部分人都在睡觉， 就算不睡觉的人，估计也在家用白夜打游戏呢。 李永言顺利的来到了店门口，并没有发现什么异常。 就在李永言掏出身份卡，准备打开店门的时候， 他的身后响起了一个怯生生的声音“请问，你能收留我吗？” 李永言瞬间回想起王阿姨说过的话，全身直接打了一哆嗦😨 😨。 心里想道， 难道是女鬼👻吗？ ","date":"2021-07-23","objectID":"/non-menu/story-mirror/1.-%E9%82%A3%E5%A4%A9/:0:0","tags":null,"title":"1. 那天","uri":"/non-menu/story-mirror/1.-%E9%82%A3%E5%A4%A9/"},{"categories":null,"content":"KeepIt 是一个优美的Hugo 主题， 笔者目前使用的正是这个主题。 https://github.com/Fastbyte01/KeepIt 笔者在使用这个主题的时候发现， 部分情况下的谷歌分析是使用不了的。 经过一番搜索之后， 笔者发现，这个主题似乎只支持老版的谷歌分析的API。 即UA- 开头的跟踪ID，而GA- 开头的则不支持。 知道了问题， 解决起来就简单了， 在谷歌分析的管理后台中创建一个老版本的应用就可以了。 当然， 也可以考虑修改模板文件， 使其兼容GA- 版本的API。 不过笔者觉得那样做有一点麻烦，所以就没有那样做。 拓展阅读 https://stackoverflow.com/questions/64993368/my-google-analytics-setup-for-hugo-is-not-working ","date":"2021-07-19","objectID":"/periphery/google-analyis-%E4%B8%8D%E8%83%BD%E5%9C%A8keepit%E4%B8%BB%E9%A2%98%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/:0:0","tags":null,"title":"Google Analyis 不能在keepIt主题中使用的问题","uri":"/periphery/google-analyis-%E4%B8%8D%E8%83%BD%E5%9C%A8keepit%E4%B8%BB%E9%A2%98%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":null,"content":"本篇来尝试描述一下while循环语句如何实现。 ","date":"2021-06-24","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.4-while%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/:0:0","tags":null,"title":"自制脚本语言[5.4] while循环语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.4-while%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"基本内容 ","date":"2021-06-24","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.4-while%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/:1:0","tags":null,"title":"自制脚本语言[5.4] while循环语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.4-while%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"语法树部分 先上图。 笔者这里给出了一个简单的while语句， 并附上了一个示意的AST结构。 while语句下 分为两个部分， 一个condition, 一个 loop_body 思路也比较简单， 先执行 condition块， 获取结果， 如果是true就执行loop_body块， 否则跳出循环。 这里没有讨论do-while结构， 目前笔者不打算讨论这个结构。 笔者给的示例图是一个非常简单的语句，并没有包括跳转用的关键字。 ","date":"2021-06-24","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.4-while%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/:1:1","tags":null,"title":"自制脚本语言[5.4] while循环语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.4-while%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"直接在AST上进行运算 这里有几个麻烦的地方， 先列出来给读者看一下。 循环里面可能会出现break/continue 等跳转用的关键词。 在AST上运算的时候， 跳转往往是一个比较麻烦的问题， 没有使用字节码方便。 具体做法类似if-else语句的在AST上进行运算的部分。 因为是循环， 所以循环体可能会执行多次。 在每次执行循环体之前，需要把节点的值都设置成NULL。在循环体执行之后设置应该也可以。 剩余内容使用很普通的思路进行实现即可。 ","date":"2021-06-24","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.4-while%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/:1:2","tags":null,"title":"自制脚本语言[5.4] while循环语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.4-while%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"使用字节码进行运算 这部分， 笔者尝试写一下上面语句的字节码伪代码。 指令附加阅读内容： if-else分支语句里的指令说明 # a = 0; seti a 0 # while start_of_loop: # ++a \u003c= 10 # add = 将 某个变量的值添加N # lte = less than equals ( 小于等于， 此指令会将一个bool 类型的结果压栈) add a 1 lte a 10 cjmp end_of_loop # println(a); call println get a execute # back to start jmp start_of_loop # out of loop. end_of_loop: 和if-else语句的区别就是在循环体的最后追加一条jmp start_of_loop指令，这条无条件跳转指令将回到循环开始的地方，继续判断条件，执行循环体。 ","date":"2021-06-24","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.4-while%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/:1:3","tags":null,"title":"自制脚本语言[5.4] while循环语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.4-while%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"本篇先留白， 因为笔者没有想好该如何写作。 ","date":"2021-06-24","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.3-switch-case%E8%AF%AD%E5%8F%A5/:0:0","tags":null,"title":"自制脚本语言[5.3] switch-case语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.3-switch-case%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"本文主要是面向挑食人群的， 不挑食的人群应该是不会缺乏维生素的。 笔者是属于挑食的那种。 ","date":"2021-06-14","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%BB%B4%E7%94%9F%E7%B4%A0%E7%9A%84%E4%B8%80%E7%82%B9%E9%9A%8F%E6%83%B3/:0:0","tags":null,"title":"关于维生素的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%BB%B4%E7%94%9F%E7%B4%A0%E7%9A%84%E4%B8%80%E7%82%B9%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"基础内容 简单来说， 如果读者挑食， 那么建议你尝试下复合维生素。笔者在本文里不打算推荐任何品牌的维生素。 注意： 一定不要超量服用， 一定要按照建议剂量服用。 如果没有效果，那么马上停止使用。 服用个3-5天，然后对比下精神状态， 看看自己的大脑是不是更加的清明了。 笔者并不是想说明维生素是一个多么多么好的一个东西，而是希望给部分读者提供一个帮助。 一般来说， 正常按剂量服用个几天是没有什么副作用的。 维生素这类膳食补充剂， 笔者觉得按需使用即可， 不需要抱有排斥感，也不需要觉得他们是神话。 换句话说就是， 服用了之后有效果，且没有什么副作用，那么就吃一吃好了。 除了复合维生素， 笔者还会补充叶黄素和鱼油， 感觉这些对眼睛也有一些用处。（这是笔者的亲身体验， 但是并不一定适合每一个人。） ","date":"2021-06-14","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%BB%B4%E7%94%9F%E7%B4%A0%E7%9A%84%E4%B8%80%E7%82%B9%E9%9A%8F%E6%83%B3/:1:0","tags":null,"title":"关于维生素的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%BB%B4%E7%94%9F%E7%B4%A0%E7%9A%84%E4%B8%80%E7%82%B9%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"其他说明 ","date":"2021-06-14","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%BB%B4%E7%94%9F%E7%B4%A0%E7%9A%84%E4%B8%80%E7%82%B9%E9%9A%8F%E6%83%B3/:2:0","tags":null,"title":"关于维生素的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%BB%B4%E7%94%9F%E7%B4%A0%E7%9A%84%E4%B8%80%E7%82%B9%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"价格 复合维生素的价格似乎都比较贵， 而单一的维生素价格则比较便宜（5~25块一瓶）。 刚开始建议使用复合维生素， 看看情况， 如果有效，然后可以考虑筛选具体品种的维生素。 那么如何筛选呢？ 答案就是搜索下资料， 看看哪些食物富含哪些维生素， 对比自己的食谱， 然后找出自己不吃的部分， 补充那部分即可。 笔者因为懒的原因， 一直在吃复合维生素。。。😂 ","date":"2021-06-14","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%BB%B4%E7%94%9F%E7%B4%A0%E7%9A%84%E4%B8%80%E7%82%B9%E9%9A%8F%E6%83%B3/:2:1","tags":null,"title":"关于维生素的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%BB%B4%E7%94%9F%E7%B4%A0%E7%9A%84%E4%B8%80%E7%82%B9%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"超量服用 超量服用维生素会导致中毒。 水溶性维生素在超量服用之后会随着尿液排出， 而脂溶性维生素则不会。脂溶性维生素易溶于非极性有机溶剂，而不易溶于水，可随脂肪为人体吸收并在体内储积，排泄率不高。 ","date":"2021-06-14","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%BB%B4%E7%94%9F%E7%B4%A0%E7%9A%84%E4%B8%80%E7%82%B9%E9%9A%8F%E6%83%B3/:2:2","tags":null,"title":"关于维生素的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%BB%B4%E7%94%9F%E7%B4%A0%E7%9A%84%E4%B8%80%E7%82%B9%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"更有效的补充维生素的方式 当然就是这个啦： 合理而全面的膳食。 不过笔者在想到或者看到某些食物的时候，下意识的感觉到拒绝， 所以就不吃那些食物。。 而部分食物在吃的时候会感觉很恶心。。 不知道为啥。。 ","date":"2021-06-14","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%BB%B4%E7%94%9F%E7%B4%A0%E7%9A%84%E4%B8%80%E7%82%B9%E9%9A%8F%E6%83%B3/:2:3","tags":null,"title":"关于维生素的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%BB%B4%E7%94%9F%E7%B4%A0%E7%9A%84%E4%B8%80%E7%82%B9%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"一些连续的文章将被放在这里。 ","date":"2021-06-08","objectID":"/series/:0:0","tags":null,"title":"Series","uri":"/series/"},{"categories":null,"content":"编程类 如何自制脚本语言 开篇 目录 ","date":"2021-06-08","objectID":"/series/:1:0","tags":null,"title":"Series","uri":"/series/"},{"categories":null,"content":"在rider打开的时候， 电脑如果意外关闭了， 则可能会造成rider无法启动的情况。 原因可能是因为项目的缓存坏掉了， 所以就无法启动。 解决方案是清理掉缓存。 笔者使用的操作方法比较粗暴，直接删除了整个Rider相关的目录。 关闭Rider 删除文件夹 c:\\users\\[username]\\AppData\\Local\\JetBrains\\Rider[version] 删除文件夹 c:\\users\\[username]\\AppData\\Roming\\JetBrains\\Rider[version] 开启Rider 注意， 这种方法下也会删掉rider安装的插件等。 也许有直接清理项目缓存的方法， 但是笔者并没有去找。 拓展阅读 https://rider-support.jetbrains.com/hc/en-us/articles/207803955-Where-are-the-ReSharper-cache-files-kept- https://stackoverflow.com/questions/17561826/how-to-clean-project-cache-in-intellij-idea-like-eclipses-clean ","date":"2021-05-24","objectID":"/periphery/rider%E5%8D%A1%E5%9C%A8%E4%BA%86%E5%BC%80%E5%90%AF%E7%95%8C%E9%9D%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/:0:0","tags":null,"title":"Rider卡在了开启界面的解决办法","uri":"/periphery/rider%E5%8D%A1%E5%9C%A8%E4%BA%86%E5%BC%80%E5%90%AF%E7%95%8C%E9%9D%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"},{"categories":null,"content":"本篇来尝试描述一下if-else_if-else 语句如何进行实现。 ","date":"2021-05-22","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.2-if-else_if-else%E8%AF%AD%E5%8F%A5/:0:0","tags":null,"title":"自制脚本语言[5.2] if-else_if-else语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.2-if-else_if-else%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"基本内容 ","date":"2021-05-22","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.2-if-else_if-else%E8%AF%AD%E5%8F%A5/:1:0","tags":null,"title":"自制脚本语言[5.2] if-else_if-else语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.2-if-else_if-else%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"语法树部分 先上图。 这里给的只是一个示例的语法树图示， 读者可以根据自己的需求进行修改。 笔者的想法是， 使用一个if_else节点作为根节点， 它的所有子节点是N个if节点和一个else节点。 由图可知，根节点下面有2个if节点， 和一个else 节点。 每个节点的内容和上篇类似，这里就不再赘述了。 对比上篇文章的内容， 笔者省略了condition等中间块。 ","date":"2021-05-22","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.2-if-else_if-else%E8%AF%AD%E5%8F%A5/:1:1","tags":null,"title":"自制脚本语言[5.2] if-else_if-else语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.2-if-else_if-else%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"直接在 AST上进行运算 笔者今天突然发现，上篇提到的跳转问题其实是可以解决的，目前大概有下面两个想法。 给每个节点设置一个出口节点， 即当前节点成功执行/失败之后， 跳到出口节点执行。 此方法似乎会有点浪费内存 在线程状态上 添加一个或多个出口节点， 用于跳转。 似乎上述方法都没有使用字节码简单。 言归正传， 如果要在上面的语法树上直接运算的话， 笔者建议的方式是这样的。 if_else节点按顺序依次执行每个子节点， 如果碰到执行成功的或者全部子节点执行结束， 就直接从if_else节点中返回出去。 因为else 节点是放在最后面的， 所以不需要额外处理它。 ","date":"2021-05-22","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.2-if-else_if-else%E8%AF%AD%E5%8F%A5/:1:2","tags":null,"title":"自制脚本语言[5.2] if-else_if-else语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.2-if-else_if-else%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"使用字节码进行运算 这部分其实很简单， 笔者只大致说一下思路。 下面说的指令都是笔者自定义的字节码指令。 定义一个出口标签end_of_if_else 在a == 0的逻辑判断语句之后生成一条 条件跳转语句cjmp， 跳转到else if语句的开始部分。 在print(\"a == 0\"); 函数语句的调用之后附加一条无条件跳转语句jmp， 跳转到end_of_if_else 在a \u003e 0 的逻辑判断语句之后生成一条 条件跳转语句cjmp，跳转到else语句开始的地方。 我们在生成字节码的时候应该是从AST的最里面的节点开始的， 所以这个其实还是挺简单就可以实现的。 上述描述中，笔者省略了部分类似的地方。 ","date":"2021-05-22","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.2-if-else_if-else%E8%AF%AD%E5%8F%A5/:1:3","tags":null,"title":"自制脚本语言[5.2] if-else_if-else语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.2-if-else_if-else%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"笔者使用docker的方式安装的gitlab, 升级操作十分的简单。 这里有两篇官方的文档可以阅读一下。 https://docs.gitlab.com/ee/raketasks/backup_restore.html https://docs.gitlab.com/omnibus/docker/README.html https://docs.gitlab.com/ee/policy/maintenance.html#upgrade-recommendations 第一个链接的内容是关于备份和恢复的， 第二个则是关于 docker 镜像的详细介绍，第三个链接则是升级的建议。 建议读者在进行操作之前，先进行一次备份。 笔者的操作方式是 先升级 minor,然后升级patch . 然后升级 major 。 在这个链接Docker hub: gitlab CE寻找指定版本的镜像即可。 gitlab的版本号格式是： (Major).(Minor).(Patch) 举个🌰🌰， gitlab的版本号是 12.10.6 12 表示主版本 大版本 10 表示次要的版本号 小版本 6 表示🍮 补丁 更详细的信息可以阅读升级建议。 链接地址在上方。 理论上来说， 先做好备份， 然后按照笔者的流程进行升级， 应该问题不大。 大版本应该是不能跨版本升级的，最好1个1个的来升级大版本。 ","date":"2021-05-10","objectID":"/periphery/gitlab%E5%8D%87%E7%BA%A7%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/:0:0","tags":null,"title":"Gitlab升级操作记录","uri":"/periphery/gitlab%E5%8D%87%E7%BA%A7%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"本篇来尝试描述下if-else语句如何进行实现。 ","date":"2021-05-02","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.1-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/:0:0","tags":null,"title":"自制脚本语言[5.1] if-else分支语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.1-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"基本内容 ","date":"2021-05-02","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.1-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/:1:0","tags":null,"title":"自制脚本语言[5.1] if-else分支语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.1-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"语法树部分 先掏出之前给读者看过的这张图， 然后笔者来解释一下其中的内容。 显而易见， 左侧部分是源代码， 右侧部分是一个大致的AST图示。 前两个部分就是一个赋值语句， 一个声明语句。 没什么好描述的。 由图示可知下面的内容。 把if-else 语句 拆分成了一个单独的if语句和一个单独的else语句 把if语句继续拆分成一个condition部分，一个执行代码块部分。 所以我们现在就有了三个小部分。 if.condition if的 条件部分 if.block if的代码块部分 else else 语句的代码块部分 这三个小块的逻辑也比较简单。 if.condition == true的时候执行if.block 否则执行else ","date":"2021-05-02","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.1-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/:1:1","tags":null,"title":"自制脚本语言[5.1] if-else分支语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.1-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"直接在AST上进行运算 如果像现在的langX一样直接在语法树上进行运算的话， 按照下面的方式处理应该就可以了。 笔者现在不建议这样做，因为字节码在进行跳转的时候应该比这种方式简单太多了。 先运算if.condition 部分的代码， 然后把结果保存 在if块的地方判断结果， 并把if.condition的结果设置成自己的结果 如果if.condition部分是true 则执行if.block。 否则什么都不做 在if_else部分 判断if节点的值， 如果为false，则执行else部分 ","date":"2021-05-02","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.1-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/:1:2","tags":null,"title":"自制脚本语言[5.1] if-else分支语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.1-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"使用字节码进行运算 使用字节码尝试实现的话，核心部分应该在于跳转，所以加上适当的跳转字节码即可。 就像我们前面说过的， 字节码是一条一条指令进行执行的， 所以我们再适当的地方插入适当的跳转指令即可。 我们先来看几个自定义指令。 基于栈的指令。 cjmp 有条件的跳转指令 全写应该是：condition jump 此指令存在一个参数， 表示要跳到的指令序号。 由于序号在本文中难以确定， 且可能会变化， 所以使用标签来代指。 这个指令首先获取栈顶元素， 并将该元素出栈 之后判断栈顶元素的值， 如果值是false的话， 就跳转， 否则此指令无任何效果 jmp 无条件的跳转指令 此指令存在一个参数， 表示要跳到的指令序号。 由于序号在本文中难以确定， 且可能会变化， 所以使用标签来代指。 直接跳转到指定的行数 seti 设置一个变量的值为一个整形数字 seti [varName] [intValue] dec 声明一个变量 abci i 结尾的表示有一个参数是直接的int值。 很可能是第二个参数。 label: 使用冒号结尾的当做一个标签， 去掉冒号的部分即为标签的名字。 在真正的字节码里面应该是不直接使用变量名的， 而是会把变量名转换成数组的索引。 笔者目前只用于示意说明，所以这样写了。 附加阅读 字节码列表 字节码列表 里面的字节码进行了适当的优化， 所以和本篇内容略微有些出入。 下面看一段模拟指令。 （伪代码） # 赋值和声明 seti a 1 dec b # if.condition # gt = greater than（大于） # 此指令会将一个bool 类型的结果压栈 gti a 0 cjmp else_start # if.block seti b 1 jmp end_of_if # else else_start: seti b 2 # out of if-else end_of_if: 这部分的逻辑其实并不算特别复杂。只不过在字节码层面可能没有那么明确的区分 分支。 并且在这个示例中使用了一个反转的做法，当条件值为false的时候才进行跳转， 否则什么都不做。 笔者直接把if.block的语句放在了if.condition下面， 是接着给的，当条件满足的时候，直接挨个执行指令， 然后在if.block结尾的地方加上一个无条件跳转语句， 跳出当前的if-else部分。 字节码部分可能不是那么好懂， 不过没关系， 后面会有更多类似的内容， 看懂了就会懂了。 ","date":"2021-05-02","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.1-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/:1:3","tags":null,"title":"自制脚本语言[5.1] if-else分支语句","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%805.1-%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/"},{"categories":null,"content":"#param once 的缺点： 相同文件内容的不同位置会视为两个文件 当出现这个状况的时候， 可能会引发重定义的错误。 更多解释可见： https://stackoverflow.com/a/1946730/11226492 一个可能的场景是这样的： 有一个项目A， 有一个项目B， 项目B依赖项目的A的头文件，且两个项目都由同一个人开发。 现在项目B是在项目A内部的， 且项目B使用的是相对路径引用的项目A的头文件。 大致的文件夹结构如下所示。 A + source + include + modProject + + B + + + include + + + source + README.md 目前的情况是： 在B的源代码里面使用诸如 ../../include/abc.h 的形式引用A的头文件。 开发这些项目的开发者发觉这样写不太美观，而且不方便拓展。所以决定将项目A的头文件安装到/usr/local/include/A 目录下 。 这时，就需要把项目B里面的所有引用位置都纠正了，否则就可能出现重定义的情况。 （这里只讨论使用 #param once 的情况，使用宏定义的方式应该不会出现这样的情况。 ） ","date":"2021-05-01","objectID":"/program/cpp-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/:0:1","tags":null,"title":"Cpp 踩坑记录","uri":"/program/cpp-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"关于异常的一些内容 在 cpp 里面 函数声明的时候 尽量不要指定抛出的异常类型。 注意： 不指定异常类型的话， 是可以抛出任何类型的异常的！ // int Func(); // 可以抛出任意类型的异常 int Gunc() throw(); // 什么也不能抛出 int Hunc() throw(A,B); // 只能抛出 A 或者 B 除此之外， 在定义函数指针的时候， 这个声明也会带来一些问题。 阅读链接： http://www.gotw.ca/publications/mill22.htm ","date":"2021-05-01","objectID":"/program/cpp-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/:0:2","tags":null,"title":"Cpp 踩坑记录","uri":"/program/cpp-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"拉远视角 俗话说得好， 当局者迷旁观者清。 当在一件事上关注了太多的细节的时候， 就容易会丢失主要方向。 这里有一个简单的例子是贴横幅， 一般情况下， 贴横幅都会让一个人站在远一些的地方看着， 那个人会尽力保证横幅没有被贴歪， 而此人的视角是相当远的。 使用远视角的好处： 更清晰的方向 各个部分，模块的配合如何 出问题的地方在哪里 ","date":"2021-04-11","objectID":"/caprice/%E6%8B%89%E8%BF%9C%E8%A7%86%E8%A7%92%E6%8B%89%E8%BF%9B%E8%A7%86%E8%A7%92-%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E5%BE%97%E4%B8%A4%E4%B8%AA%E6%96%B9%E5%90%91/:1:0","tags":null,"title":"拉远视角，拉近视角， 解决问题得两个方向","uri":"/caprice/%E6%8B%89%E8%BF%9C%E8%A7%86%E8%A7%92%E6%8B%89%E8%BF%9B%E8%A7%86%E8%A7%92-%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E5%BE%97%E4%B8%A4%E4%B8%AA%E6%96%B9%E5%90%91/"},{"categories":null,"content":"拉近视角 当需要做一件没有经验的事情的时候， 这是一个不错的方法。 此时，对事情的细节并不了解，而且没有概念。所以需要建立概念， 所以先尝试跟着一般攻略做做事情比较好， 等有了经验再拉远视角。 并且，此时如果想拉远视角， 也是一件非常困难的事情， 因为拉远了视角会什么也看不到，一片空白。 一般情况下， 创作只能在近的视角下进行， 远的视角只能用于观察。 当一件事情使用远视角观察了太久的时候， 这是一个不错的变化。 还是刚刚的理论， 远视角一般适用于观察， 而事情的推动需要创作，需要执行。 这些事情适合在近的视角下进行。 ","date":"2021-04-11","objectID":"/caprice/%E6%8B%89%E8%BF%9C%E8%A7%86%E8%A7%92%E6%8B%89%E8%BF%9B%E8%A7%86%E8%A7%92-%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E5%BE%97%E4%B8%A4%E4%B8%AA%E6%96%B9%E5%90%91/:2:0","tags":null,"title":"拉远视角，拉近视角， 解决问题得两个方向","uri":"/caprice/%E6%8B%89%E8%BF%9C%E8%A7%86%E8%A7%92%E6%8B%89%E8%BF%9B%E8%A7%86%E8%A7%92-%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E5%BE%97%E4%B8%A4%E4%B8%AA%E6%96%B9%E5%90%91/"},{"categories":null,"content":"总结 两个办法应该轮流， 穿插使用。这样可以不断调整方向， 不断的推动事情发展， 可以以一个不错的结果完成事情。 一个更通俗的故事是， 在学生时代上课的时候， 老师往往能发现不认真听课的学生，而其他学生大多不知道。 ","date":"2021-04-11","objectID":"/caprice/%E6%8B%89%E8%BF%9C%E8%A7%86%E8%A7%92%E6%8B%89%E8%BF%9B%E8%A7%86%E8%A7%92-%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E5%BE%97%E4%B8%A4%E4%B8%AA%E6%96%B9%E5%90%91/:3:0","tags":null,"title":"拉远视角，拉近视角， 解决问题得两个方向","uri":"/caprice/%E6%8B%89%E8%BF%9C%E8%A7%86%E8%A7%92%E6%8B%89%E8%BF%9B%E8%A7%86%E8%A7%92-%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E5%BE%97%E4%B8%A4%E4%B8%AA%E6%96%B9%E5%90%91/"},{"categories":null,"content":"由于笔者使用的是黑苹果，所以能正常使用的话，尽量不升级比较好。 如果想升级的话， 还需要更新OpenCore的版本， 可能还会碰到各种乱七八糟的问题。 同时，笔者感觉Big Sur 并不是太好，所以完全没有升级的打算。 但是，意外总是会有的。 前些天， 笔者因为手误，点到了现在安装升级的选项。。 虽然及时的点击了取消， 但还是触发了一些悲剧操作。 本帖就是来记录一下这件事情的。 事后， 笔者想禁止掉系统的升级提示弹窗， 但是发现好像不行了。 自从 10.15.7 的版本之后， 系统升级的通知好像就无法禁止了。 网上一般提供的是这个命令 sudo softwareupdate --ignore \"macOS Catalina\" ，笔者再使用的时候会提示 下面的内容。 Ignored updates: ( ) Software Update can only ignore updates that are eligible for installation. If the label provided to ignore is not in the above list, it is not eligible to be ignored. Ignoring software updates is deprecated. The ability to ignore individual updates will be removed in a future release of macOS. 大意是说现在不能忽略系统升级通知 ， 这个特性可能会在未来的版本中移出。 ","date":"2021-04-05","objectID":"/periphery/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%9B%A0%E4%B8%BA%E5%A4%9A%E4%B8%AA%E6%84%8F%E5%A4%96%E6%83%85%E5%86%B5%E6%8C%82%E4%BA%86%E7%9A%84%E4%BA%8B%E6%83%85%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4/:0:0","tags":null,"title":"黑苹果因为多个意外情况挂了的事情的记录贴","uri":"/periphery/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%9B%A0%E4%B8%BA%E5%A4%9A%E4%B8%AA%E6%84%8F%E5%A4%96%E6%83%85%E5%86%B5%E6%8C%82%E4%BA%86%E7%9A%84%E4%BA%8B%E6%83%85%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4/"},{"categories":null,"content":"Time machine 作为问题的导火索 现在回到正题， 笔者说一说前几天都发生了什么。 在不小心点了升级之后， 每次重启的时候，再系统选择界面都能看到一个叫MacOS Installer的选项， 应该是安装新系统使用的， 并且每次在这个地方的时候，这个选项是默认的。 必须手动更改到Windows或者Macintosh HD ，否则就会安装新系统。 在某一天晚上， 笔者的Time machine 报警了，说是磁盘空间不足。按理说应该会自动删除老旧的备份才对， 但是却没有。 并备份的日期只有最近几天的内容了， 且最后一次备份是再几天前。 所以笔者想手动删除磁盘， 然后重新备份。 笔者首先解开了Time machine 的备份磁盘， 并且关闭了自动备份。 笔者使用ForkLift这个工具打开后看到 备份使用的文件夹是一个图表， 然后就不小心的双击了一下，双击之后并没有出现什么弹窗， 所以笔者也没有在意。 之后，笔者就手动尝试删除了文件夹。 再删除的过程中，出现了一个意外。。 有部分文件被不知道哪个应用使用了， 删不掉， 我只能删除一部分文件， 且那部分文件已经被我删掉了， 并且无法找回。 这说明Time machine 的备份已经坏掉了。。 我便尝试使用命令行进行删除操作。同样有部分文件不能删除。。。 文件不能完全删掉， 笔者就以为不能进行重新备份， 得先完全删除文件夹才行。（实际上能不能，笔者暂时并不清楚。。。） 既然是某些应用使用了文件， 那么重启之后应该就可以删除了，笔者抱着这样的想法把电脑重启了。 ","date":"2021-04-05","objectID":"/periphery/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%9B%A0%E4%B8%BA%E5%A4%9A%E4%B8%AA%E6%84%8F%E5%A4%96%E6%83%85%E5%86%B5%E6%8C%82%E4%BA%86%E7%9A%84%E4%BA%8B%E6%83%85%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4/:0:1","tags":null,"title":"黑苹果因为多个意外情况挂了的事情的记录贴","uri":"/periphery/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%9B%A0%E4%B8%BA%E5%A4%9A%E4%B8%AA%E6%84%8F%E5%A4%96%E6%83%85%E5%86%B5%E6%8C%82%E4%BA%86%E7%9A%84%E4%BA%8B%E6%83%85%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4/"},{"categories":null,"content":"大意之下，问题出现了 选择重启之后， 笔者就跑到一边玩手机去了， 笔者忘记了选项这个问题。。 😥😥😥 等笔者抬起头看屏幕的时候发现， 已经到了启动界面， 大串大串的字符再屏幕上跳动。。 笔者一时间也不敢强行关机，怕发生不太好的事情。 等到了2分钟之后， 屏幕卡住了， 应该是笔者目前的OpenCore版本不支持Big Sur的安装。 之后又等了几分钟， 没出现什么变化。 笔者就强行关机重启了。 重启之后，进入界面， 提示让笔者注册一个新的用户。 笔者不知道发生了什么，想着应该问题不大， 就注册了一个新的用户。 等注册结束之后， 笔者发现原来的用户还是存在的，所以就尝试登录原来的用户。 再登录的时候发现， 那个用户再输入密码之后会卡住。 小菊花一直在转， 进不去。 重启机器， 尝试登录新用户， 可以成功登录。 尝试切换用户， 登录老用户， 仍然卡死。 笔者此时决定切换到Windows，玩一会猎天使魔女再继续搞把。。 玩了两个多小时猎天使魔女之后， 笔者再Windows上尝试搜索原因， 笔者发现苹果官网似乎推荐可以尝试重置 NVRAM， SMC等。 重启电脑， 再系统选择界面的地方， 笔者发现了 Reset NVRAM 这个选项，所以就重置了下NVRAM。 ","date":"2021-04-05","objectID":"/periphery/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%9B%A0%E4%B8%BA%E5%A4%9A%E4%B8%AA%E6%84%8F%E5%A4%96%E6%83%85%E5%86%B5%E6%8C%82%E4%BA%86%E7%9A%84%E4%BA%8B%E6%83%85%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4/:0:2","tags":null,"title":"黑苹果因为多个意外情况挂了的事情的记录贴","uri":"/periphery/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%9B%A0%E4%B8%BA%E5%A4%9A%E4%B8%AA%E6%84%8F%E5%A4%96%E6%83%85%E5%86%B5%E6%8C%82%E4%BA%86%E7%9A%84%E4%BA%8B%E6%83%85%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4/"},{"categories":null,"content":"得而复失的感觉真奇妙 再次登录， 居然成功了。 可惜，虽然成功登录了， 但是还有新的问题： 应用程序基本都不见了， 并且之前安装的其他工具也都不见了(python3, homebrew 等)。 后来，经过一番搜索和探索， 笔者发现， 应用程序其实还在，只不过都被移动到了/System/Volumes/Data/Recovered Items 这个目录。 这个目录里面还有一些其他的系统级别的配置文件。 笔者大喜🤣🤣🤣， 赶忙把程序移动到 /Applications这个文件夹里面。 后来又找了下， 发现这个文件夹里面还有几个隐藏文件夹， usr,etc 仔细找找也有， etc 应该再一个叫做private的文件夹里面。 笔者这时想起自己原来要做的事情： 删除原来的 Time machine 备份， 这次尝试没有碰到任何问题，直接就成功的删除了。 之后便着手尝试恢复/usr/local/bin 等其他目录。 在恢复etc 文件夹的时候， 又出现了新的问题。。笔者直接使用原来的etc文件夹 进行了覆盖操作， 就是把现有的文件夹给覆盖掉了。 再覆盖之后，笔者发现笔者的密码无效了。 笔者的密码肯定是正确的，但是就是使用不了， 每次都提示错误。 笔者以为这是一个常规问题，所以进行了重启操作， 等重启之后发现， 这其实并不是一个常规问题， 现在连系统都登录不了了😢😢😢。 笔者尝试了若干操作， 发现就是使用不了密码， 同时另外一个新建的账户也登录不了了。 重启之后，进入恢复模式，使用 resetpassword工具进行密码重设， 重设了好几次，都没用 使用Reset NVRAM 选项 这时候，只有一个操作可以尝试了， 那就是： 重装系统。 笔者进入恢复模式， 选择重装系统的时候， 提示笔者需要网络才能重装。。 笔者没有配备免驱的网卡和无线网卡。。 在恢复模式下， 部分硬件不工作。。 没得办法， 笔者又去购买了一个免驱的无线网卡。 ","date":"2021-04-05","objectID":"/periphery/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%9B%A0%E4%B8%BA%E5%A4%9A%E4%B8%AA%E6%84%8F%E5%A4%96%E6%83%85%E5%86%B5%E6%8C%82%E4%BA%86%E7%9A%84%E4%BA%8B%E6%83%85%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4/:0:3","tags":null,"title":"黑苹果因为多个意外情况挂了的事情的记录贴","uri":"/periphery/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%9B%A0%E4%B8%BA%E5%A4%9A%E4%B8%AA%E6%84%8F%E5%A4%96%E6%83%85%E5%86%B5%E6%8C%82%E4%BA%86%E7%9A%84%E4%BA%8B%E6%83%85%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4/"},{"categories":null,"content":"大部分问题的解决之道： 重启 \u0026\u0026 重装系统 次日，等无线网卡装上之后， 就进行了重装系统的操作。 等待系统安装结束， 笔者发现可以使用原来的密码进行登录了！ 进入系统之后， 笔者发现很多窗口回来了， 又简单了熟悉的画面。 笔者表示很开心，折腾了这么久，终于好了。 😀😀😀 笔者尝试寻找了一下/System/Volumes/Data/Recovered Items这个文件夹， 然后发现该文件夹已经消失， 估计是再重装系统之后， 对这个文件夹进行了一个更改和应用。 mac 的系统分区和数据分区是分开的， 重装的时候 可以保留文件。 Windows也有类似的选项。 ","date":"2021-04-05","objectID":"/periphery/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%9B%A0%E4%B8%BA%E5%A4%9A%E4%B8%AA%E6%84%8F%E5%A4%96%E6%83%85%E5%86%B5%E6%8C%82%E4%BA%86%E7%9A%84%E4%BA%8B%E6%83%85%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4/:0:4","tags":null,"title":"黑苹果因为多个意外情况挂了的事情的记录贴","uri":"/periphery/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%9B%A0%E4%B8%BA%E5%A4%9A%E4%B8%AA%E6%84%8F%E5%A4%96%E6%83%85%E5%86%B5%E6%8C%82%E4%BA%86%E7%9A%84%E4%BA%8B%E6%83%85%E7%9A%84%E8%AE%B0%E5%BD%95%E8%B4%B4/"},{"categories":null,"content":"笔者碰到得问题有两个： 程序好像没执行 重定向输出到了文件，但是却没有看到文件。 笔者得有问题得时候，定时任务大概是这样得： # move film on 10AM at every saturday 0 10 * * 6 /Users/alias/Projects/self-use-scripts/trello/shMoveFilm.sh \u003e/Users/alias/temp/log/moveFilm.log 2\u003e\u00261 # move blog 35 2 * * 1 /Users/alias/Projects/self-use-scripts/trello/shMoveBlog.sh \u003e/Users/alias/temp/log/moveBlog.log 2\u003e\u00261 # clean blog 0 2 * * 3 /Users/alias/Projects/self-use-scripts/trello/shRun.sh clean blog \u003e\u003e/Users/alias/temp/log/clean.log 2\u003e\u00261 修改之后，能成功运行得脚本 大概是这样得： SHELL=/usr/bin/sh PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin # move film on 10AM at every saturday 0 2 * * 6 (/usr/bin/sh /home/yohello/soft/self-use-scripts/trello/shMoveFilm.sh 2\u003e\u00261) \u003e/home/yohello/log/trello/moveFilm.log # move blog 35 2 * * 0 (/usr/bin/sh /home/yohello/soft/self-use-scripts/trello/shMoveBlog.sh 2\u003e\u00261) \u003e/home/yohello/log/trello/moveBlog.log # clean blog 0 2 * * 3 (/usr/bin/sh /home/yohello/soft/self-use-scripts/trello/shRun.sh clean blog 2\u003e\u00261) \u003e\u003e/home/yohello/log/trello/clean.log 前面两行指定了 SHELL程序和环境变量，如果读者得脚本能成功运行，这两行有没有其实不重要， 如果读者得脚本在运行得时候提示xxx command not found 那可能就需要添加PATH了。 笔者得执行命令添加了 /usr/bin/sh 作为开头， SHELL 指定得程序可能不会使用把。。 😂 如果不添加2\u003e\u00261 ，程序得输出是可以重定向到文件得， 但是加了之后就不行了 当出现这个情况得时候，就需要使用括号把命令写到一起去， 然后把整个输出重定向到一个文件。 即 前面小括号里面得内容看做一个整体， 然后把这个整体得输出重定向到文件。 在整体得内部把错误输出重定向到输出中。 ","date":"2021-03-28","objectID":"/periphery/crontab%E7%A2%B0%E5%88%B0%E5%BE%97%E5%B0%8F%E9%97%AE%E9%A2%98/:0:0","tags":null,"title":"Crontab碰到得小问题","uri":"/periphery/crontab%E7%A2%B0%E5%88%B0%E5%BE%97%E5%B0%8F%E9%97%AE%E9%A2%98/"},{"categories":null,"content":"参考阅读 cron job not running with adding “2\u003e\u00261” ","date":"2021-03-28","objectID":"/periphery/crontab%E7%A2%B0%E5%88%B0%E5%BE%97%E5%B0%8F%E9%97%AE%E9%A2%98/:0:1","tags":null,"title":"Crontab碰到得小问题","uri":"/periphery/crontab%E7%A2%B0%E5%88%B0%E5%BE%97%E5%B0%8F%E9%97%AE%E9%A2%98/"},{"categories":null,"content":"本篇来描述一下类似 a + b + c 得运算内容。 同样，本篇只是说明一个可用于实现得概念模型， 并没有提供什么优化技巧。 ","date":"2021-03-21","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.2-%E5%A4%8D%E5%90%88%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/:0:0","tags":null,"title":"自制脚本语言[4.2] 复合数值运算","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.2-%E5%A4%8D%E5%90%88%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/"},{"categories":null,"content":"详细内容 上一节我们讨论了两元运算， 现在我们讨论一下存在更多元素得运算表达式。 下面来看一段代码。 a = 1; b = 2; c = 3; d = a + b + c; e = a - b - c; f = a * b + c; g = a + b * c; h = a + b + c + a + c; i = a + b * c + a ; ","date":"2021-03-21","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.2-%E5%A4%8D%E5%90%88%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/:1:0","tags":null,"title":"自制脚本语言[4.2] 复合数值运算","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.2-%E5%A4%8D%E5%90%88%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/"},{"categories":null,"content":"基本逻辑 上面得例子在运算得时候至少存在3个元素，这在实现上并不需要修改上节所实现得逻辑，而是需要在生成抽象语法树(AST)得地方下功夫。 先来看一下表达式 d = a + b + c; 得计算过程。 计算 a + b 得值 并保存， 假设为 t1 计算 t1 + c 得值并保存， 假设为 t2 将 t2得值 赋值给变量d 看到了吗， 这里得核心逻辑就是拆分， 把多个元素拆成二元运算来分别计算。 下面再来看一下表达式g = a + b * c; 得计算过程 计算b * c 得值 并保存， 假设为t1 计算a + t1 得值 并保存， 假设为t2 将t2得值， 赋值给变量d 这里和上面得例子， 有一点不同得是需要先计算b*c ，因为乘法得优先级比加法更高。 如果读者使用了 yacc 做AST(抽象语法树，下面都简称为AST)得生成，那么在指定了符号得优先级之后，yacc会自动处理这种问题。 其他的AST生成工具，应该也有类似得功能， 如果是自行实现AST生成，那么就需要注意这方面得问题了。 产生的AST结构大致如下图所示。 (点击可以查看大图) 要计算最顶层得+号，需要先计算他得子节点， 按照这个逻辑就可以实现符号优先级了。 ","date":"2021-03-21","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.2-%E5%A4%8D%E5%90%88%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/:1:1","tags":null,"title":"自制脚本语言[4.2] 复合数值运算","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.2-%E5%A4%8D%E5%90%88%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/"},{"categories":null,"content":"如果生成字节码得话 字节码就是指令序列，当前小节仅是提供一个思路。 根据优先级 按序生成即可。 下面给一段示例： // 本部分采用基于栈得指令来说明 // a + b + c push a // 将变量a得值压栈 push b // 将变量b得值压栈 add // 取出栈顶两个元素进行相加， 结果放回栈顶 push c // 将变量c得值压栈 add // 同上 // 此时栈顶就一个元素了，该元素是运算结果 // a + b * c // 此处使用新的栈 push b // 将变量b得值压栈 push c // 将变量c得值压栈 mul // 取出栈顶两个元素进行相乘， 结果放回栈顶 push a // 将变量a得值压栈 add // 取出栈顶两个元素进行相加， 结果放回栈顶 // 此时栈顶就一个元素了，该元素是运算结果 读者可能无法理解这部分内容，没关系，后面会懂得。 ","date":"2021-03-21","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.2-%E5%A4%8D%E5%90%88%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/:1:2","tags":null,"title":"自制脚本语言[4.2] 复合数值运算","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.2-%E5%A4%8D%E5%90%88%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/"},{"categories":null,"content":"笔者前些天去面试得时候碰到了一个比较蛋疼得笔试题，所以就再来谈谈面试题这个东西。 ","date":"2021-03-14","objectID":"/caprice/%E5%86%8D%E8%B0%88%E8%B0%88%E9%9D%A2%E8%AF%95%E9%A2%98/:0:0","tags":null,"title":"再谈谈面试题","uri":"/caprice/%E5%86%8D%E8%B0%88%E8%B0%88%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"面试题得格式 让笔者觉得无语得是那家公司得笔试题居然没有对代码进行对齐！ 下面这段代码是笔者依赖印象重现得。 具体代码记不清了，只是说明格式得问题😂 public class Father{ public int a = 1; } class Son extends Father{ public int a = 2; public static void main(String[] args){ Father f = new Son(); System.out.println(f.a); } } 让笔者想大为吐槽得有两点： 代码不对齐 关键字不高亮 这两点弄得笔者简直看不懂代码😂😂😂 关键字高亮了之后，虽然打印出来还是黑白文档，但是关键字会和别得代码有点区别， 让人容易辨认。 至于对齐就特么太伤了， 完全不适应。。。 笔者在笔试题上吐槽了对齐得问题，并说明pdf文档可以很方便得对齐得。。 不知道他们会不会修改一下。。 笔者还想吐槽得是， 他们部分题目得main方法直接写在了实体类里面， 笔者差点以为他们代码写错了。。 🤣🤣🤣 ","date":"2021-03-14","objectID":"/caprice/%E5%86%8D%E8%B0%88%E8%B0%88%E9%9D%A2%E8%AF%95%E9%A2%98/:0:1","tags":null,"title":"再谈谈面试题","uri":"/caprice/%E5%86%8D%E8%B0%88%E8%B0%88%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"劣质面试题 除了格式之外， 他们家笔试题还存在部分劣质笔试题， 不知道是不是直接百度了得。。 劣质面试题就是除了为难面试者之外完全没有其他价值得题目。 如果真的在工作中这么做可能还要被骂得代码。。 因为笔者一般情况下愿意追求高度得抽象或者简单方便得代码。 所以那些面试题有部分根本没见过，自然而然得就难以正确作答。。 这里笔者还有点想说得内容是： 如果想要获得这家或者出现类似面试题得公司得工作， 读者就需要对那些劣质面试题能进行作答。 简单来说，就是需要花费一些时间对那种千奇百怪得面试题进行学习，记忆。 虽然这些题目除了这种面试之外并没有其他什么作用了。。 这就好像上学得时候学习物理，化学，高数啥得， 出来之后很多东西基本上用不着。但是就算知道以后很可能用不着， 在上学得时候也得学习一样。。 ","date":"2021-03-14","objectID":"/caprice/%E5%86%8D%E8%B0%88%E8%B0%88%E9%9D%A2%E8%AF%95%E9%A2%98/:0:2","tags":null,"title":"再谈谈面试题","uri":"/caprice/%E5%86%8D%E8%B0%88%E8%B0%88%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"关于线程安全得Map 这是一个小插曲。 面试官： 你JAVA基础怎么样？ 说一说线程安全得Map 和ArrayList 把 笔者： 有一个叫Con 啥得Map。。。 面试官： 你在代码中不用这些类型吗？ 笔者： 用的很少， 基本上不怎么\u0010使用。。。 面试官： 你们怎么给玩家发消息得？ 笔者： SessionManager 面试官： 如何给指定得玩家发送消息？ 笔者： SessionManager里面有一个玩家Id为key得map。 这个map 是线程安全得。。 。。。。 笔者当时是真的不记得类名了， 因为这个类极少使用。。 而且IDE都有自动完成得功能。。 最近笔者去搜索了一下该类， 类名应该是ConcurrentHashMap 。 输入Con 会自动提示。。。 ArrayList得线程安全类 笔者后来记起来了， 应该是CopyOnWriteArrayList 。 笔者今天在读《深入了解JAVA虚拟机》这本书得时候得知， Vector, HashTable 也分别是线程安全得List,Map 不知道面试官是否在期待笔者回答这两个类。。。 java.util.concurrent 包里面类应该都是并发相关得。 再稍微聊下关于线程安全得手段： 加锁。 一般情况下， 笔者建议能不加锁就不要加锁， 因为加锁导致得性能下降还是比较严重得。 虽然现在得JVM对这部分内容做了很多得优化，但是如果能在框架设计层面就减少大量得加锁操作，那是最好得。 更多关于加锁会导致性能下降得文章，读者可以自行谷歌。 或者阅读《深入了解JAVA虚拟机》第五部分。 说真的， 笔者工作了5年多了， volatile 关键字基本上没用过。。 synchronized 少量得用过， 用的不多。 虽然有部分原因是因为笔者对两个关键字不熟，不太明白用法，但是更多得原因是因为笔者不需要使用这两个关键字。 在笔者做塔防项目得时候 （2017年），笔者是一个人处理战斗服功能得。 在笔者得设计中， 一个线程会驱动N个房间得运算， 此时房间内得大部分属性都是在单个线程运算得，所以基本上不需要加锁。 一般情况下，配置数据是共享的， 但是配置数据在加载之后就不会发生变化了， 所以只要能提前加载就OK 。 现在笔者推荐对配置数据使用ImmutableMap 之类得不可变类型， 这些类型本身就是线程安全得。 当然，笔者说了这么多不是给自己开脱， 想要通过这样得面试， 就需要知道面试官提出问题得答案。 笔者只是说出了一些关于线程安全得更多知识。 ","date":"2021-03-14","objectID":"/caprice/%E5%86%8D%E8%B0%88%E8%B0%88%E9%9D%A2%E8%AF%95%E9%A2%98/:0:3","tags":null,"title":"再谈谈面试题","uri":"/caprice/%E5%86%8D%E8%B0%88%E8%B0%88%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"本篇来描述一下数值运算相关的内容。 本篇描述的只是最简单的实现方式， 并没有提供什么优化技巧。 ","date":"2021-03-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/:0:0","tags":null,"title":"自制脚本语言[4.1] 数值运算","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/"},{"categories":null,"content":"详细内容 数值运算应该编程里必不可少的一部分， 所以一个脚本语言引擎应该需要实现数值运算的功能。 下面来看一段代码。 a = 1; b = 2; c = a + b; d = a - b; e = a / d; f = a * b; g = a % d; h = a ^ b; i = a | b; j = a \u0026 b; k = ~ a ; 大概需要实现的运算类型就是 加减乘除，取模以及位运算。 读者可以根据自己的需求只实现部分的运算符号， 或者实现更多的符号。 （自定义新的符号） ","date":"2021-03-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/:1:0","tags":null,"title":"自制脚本语言[4.1] 数值运算","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/"},{"categories":null,"content":"基本逻辑 这里只讨论单个运算符， 不讨论多个运算符的情况。 比如 d = a + b + c 这种暂时不讨论。 基本逻辑其实很简单。 取出N个数字 进行运算 将结果放回去 几个运算符的差异部分，基本就是第二步，进行运算的部分。 N个操作数， 产生一个结果的运算符（+，-，*，/等）的第一步和第三步的内容基本是一致的。 ","date":"2021-03-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/:1:1","tags":null,"title":"自制脚本语言[4.1] 数值运算","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/"},{"categories":null,"content":"基于Map 的实现逻辑 下面尝试解析一下 c = a + b 的实现过程。 从Map中取出key为a, b 的数字。 在宿主语言中进行运算 (c/cpp/java/…) 然后获得结果 将结果保存到Map中。 （Key为 c) 下面看一段示例代码 // java 代码， 代码并没有经过测试，只是解释思路使用 // c = a + b; public class Test { public void test (){ // key: 变量名， value: 变量值 Map\u003cString, Object\u003e map = new HashMap\u003c\u003e(); // 第一个操作数 String first = \"a\"; // 第二个操作数 String second = \"b\"; String result = \"c\"; // 1 Object a = map.get(first); Object b = map.get(second); // null check 和 类型check 这里就省略了。 // 2 // Number 是一个自定义类型， 因为篇幅问题，对声明进行了省略。 Number c = Number.add( ((Number) a), ((Number) b) ); // 3 map.put( result, c ); } } ","date":"2021-03-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/:1:2","tags":null,"title":"自制脚本语言[4.1] 数值运算","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/"},{"categories":null,"content":"基于栈的实现逻辑 本部分笔者并没有实现过，只是基于自己的知识和理解来写的内容。 下面同样尝试解析一下 c = a + b 的实现过程。 取出 a 对应的数值， 进行压栈 取出 b 对应的数值， 进行压栈 执行 加号指令 | 这里应该是基于栈的核心部分 取出栈顶的2个元素 进行相加 将结果压栈 将栈顶元素出栈，放入到c对应的位置。 这里使用局部变量表和栈进行配合使用， 而不使用Map。 下面看示例代码 // 同样使用 Java做示例， 代码只是演示说明使用 // c = a + b ; public class Test { // 局部变量表 private Object[] localVarTable = new Object [30]; // 栈 private Stack\u003cObject\u003e stack = new Stack\u003c\u003e(); /** * 根据变量名获取变量对应的 局部变量表的索引 */ public int getIndex(String name){ // todo return 0; } /** * 执行加号指令 */ public void add(){ // check size 和别的check 暂时都直接省略了 Number a = (Number) stack.pop(); Number b = (Number) stack.pop(); // 运算， 并将结果入栈 stack.push( Number.add(a,b) ); } public void test(){ // 第一个操作数 String first = \"a\"; // 第二个操作数 String second = \"b\"; String result = \"c\"; // 1, 2 // 因为要节省篇幅， 所以大部分的 error check 就不做了 Object a = localVarTable[getIndex(first)]; Object b = localVarTable[getIndex(second)]; // 入栈 stack.push(a); stack.push(b); // 3 add(); // 4 Object c = stack.pop(); localVarTable[getIndex(result)] = c; } } ","date":"2021-03-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/:1:3","tags":null,"title":"自制脚本语言[4.1] 数值运算","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/"},{"categories":null,"content":"基于 寄存器的实现逻辑 本部分笔者并没有实现过，只是基于自己的知识和理解来写的内容。 这里假设存在3个寄存器： a, b, c 。 每一个寄存器都可以放任意类型的值。 取出变量a的值， 放入a 寄存器 取出变量b的值， 放入b 寄存器 执行加法运算， 将结果放入c寄存器 取出c寄存器的值， 放回局部变量表 清空所有寄存器 下面看示例代码 // c = a + b ; public class Test { // 局部变量表 private Object[] localVarTable = new Object [30]; // 寄存器 private Object a = null; private Object b = null; private Object c = null; /** * 根据变量名获取变量对应的 局部变量表的索引 */ public int getIndex(String name){ // todo return 0; } /** * 清理寄存器 */ public void clearReg(){ a = b = c = null; } /** * 执行加法运算， 运算逻辑总是将 寄存器 a,b 相加，并把值放入寄存器 c */ public void add(){ // 将会省略 check c = Number.add( (Number) a, (Number) b ) ; } /** * 这里的变量名， 改用传参的形式 */ public void test(String first,String second, String result ){ // 1, 2 a = localVarTable[getIndex(first)]; b = localVarTable[getIndex(second)]; // 3 add(); // 4 localVarTable[getIndex(result)] = c; // 5 clearReg(); } } ","date":"2021-03-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/:1:4","tags":null,"title":"自制脚本语言[4.1] 数值运算","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/"},{"categories":null,"content":"其他 本篇介绍了几种实现机制， 读者可以根据自己的需求，能力进行选择。 关于复合运算(d = a + b + c)， 将会在下节进行介绍。 ","date":"2021-03-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/:2:0","tags":null,"title":"自制脚本语言[4.1] 数值运算","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%804.1-%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/"},{"categories":null,"content":"瞎写的内容。。。​ 😂 下面先看一些百度百科的内容。 成长，一般指长大、长成成人，也泛指事物走向成熟，摆脱稚嫩的过程。简而言之，就是自身不断变得成熟稳重的一个变化过程。 变化是汉语词汇，拼音是biàn huà；意思为事物被另外的事物取代，近义词为变动。出自《易·乾》：“乾道变化，各正性命。”换模型讲：变化是事物性质的体现。 随着年龄的增长， 人应该会有一个自然的成长过程， 这个过程不快不慢。 应该是一个最基本的进化基础， 主要的变现特征应该是我们从自己的经验中自动领悟出新的内容。 读书， 看教程视频是一个成长的捷径。 我们不必花费过多时间就可以获得很多成长， 是一个性价比极高的行为。 笔者认为这是因为书籍的作者在写书的时候需要去花费很多时间做研究，去学习。 他们把几年至几十年的经验汇聚成了一本书， 书中甚至包含了上一代人的知识。 我们在学习的时候就直接相当于获取了作者几十年的功力，所以很快捷的就可以获取到足够的知识。 除了知识上的成长之外， 还有肉体的成长的。 我们锻炼身体的话， 身体就会变得越来越棒。 随着年龄的增长， 身体会产生一些自然的成长。 我们似乎存在两种方式的成长： 主动式的和被动式的。 主动锻炼身体和主动学习算是主动式的。 没有刻意的情况下获取的知识是被动式的， 身体自然成长，衰老也是被动式的。 在没有前人经验的情况下，我们可能需要主动的花费很多时间去研究一件事，并从中感悟到知识。 笔者认为这个行为是主动式的。 下面谈一些关于生活上的内容把。 似乎大多数人都比较懒， 而在某些情况下，我们可以改善懒惰的影响。 比如： 如果笔者某天突然想读某本书，而此刻手中又真的有这本书的时候，就会去读。 而手上没有的话， 这个念头就会一闪而过。 笔者曾经比较喜欢买书， 但是不怎么喜欢看书。 有一段时间里，笔者觉得这是一件很浪费的行为。 直到后面笔者真的拿起了几本书看了一些。 虽然买的书还是有好多没翻过， 但是那些书的成本也不算很贵，所以不算很浪费。 而且关键的是 部分书笔者看完了， 从里面学习到了知识。 这可能会产生进一步的变化， 即 读更多的书。 因为实体书搬家太麻烦了，笔者最近喜欢用墨水屏看电子书居多。 这里的变化过程是这样的： 买书不看 ➡️ 看第一本书 ➡️ 看少量的书 ➡️ 看更多的书 这里并不是推荐读者去买书， 只是说可以考虑把想读的书 适量的买下来 或者下载下来。 让自己在想看的时候可以直接进行阅读。 笔者发现似乎很多人不喜欢写东西，之前刚开始写博客的时候 笔者在自己的群约了几个群友一起写。 但是他们似乎都没有坚持下来， 而笔者一直在坚持。 这似乎可以归功于笔者在几年前写小说的经历。 笔者写了一部非常烂的小说， 坚持了大约10W+字，这给笔者带来的好处是 笔者可以静下心写一些内容了。 走了第一步，不一定会走第二步。 但是，没走第一步的话，肯定走不出第二步。 ","date":"2021-02-28","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%88%90%E9%95%BF%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/:0:0","tags":null,"title":"关于成长的一些感想","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%88%90%E9%95%BF%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"前些天，不知道什么原因，家里突然跳闸了。等来电的时候，家里服务器就出现了一些状况，所以开帖记录一下是什么状况，以及笔者是如何处理的。 笔者的家用服务器使用的是ESXi 系统。 ESXi 系统本身没有什么问题， 大部分虚拟机也没有什么问题，只有一个debian 9 的虚拟机出现了问题。 而这个虚拟机运行了笔者大部分的服务，所以这次问题让笔者大感头痛。 ","date":"2021-02-27","objectID":"/periphery/%E5%AE%B6%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AA%81%E7%84%B6%E6%96%AD%E7%94%B5%E7%9A%84%E5%90%8E%E7%BB%AD%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/:0:0","tags":null,"title":"家用服务器突然断电的后续情况处理","uri":"/periphery/%E5%AE%B6%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AA%81%E7%84%B6%E6%96%AD%E7%94%B5%E7%9A%84%E5%90%8E%E7%BB%AD%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/"},{"categories":null,"content":"debian 9 的问题列表 ","date":"2021-02-27","objectID":"/periphery/%E5%AE%B6%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AA%81%E7%84%B6%E6%96%AD%E7%94%B5%E7%9A%84%E5%90%8E%E7%BB%AD%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/:1:0","tags":null,"title":"家用服务器突然断电的后续情况处理","uri":"/periphery/%E5%AE%B6%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AA%81%E7%84%B6%E6%96%AD%E7%94%B5%E7%9A%84%E5%90%8E%E7%BB%AD%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/"},{"categories":null,"content":"虚拟机启动 虚拟机无法启动，在启动的时候 提示文件系统有问题。 提示内容大概为： /dev/sda1 contains a file system with errors, check forced 解决方案是： At the (initramfs) prompt, type fsck -f /dev/sda1 to check/repair your file system. 大致意思是在可以输入命令的时候， 输入fsck -f /dev/sda1 进行文件系统的修复。 当碰到询问的时候输入 y 进行修复。 这个修复不是很完美的， 可能会导致部分文件内容出现问题。 ","date":"2021-02-27","objectID":"/periphery/%E5%AE%B6%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AA%81%E7%84%B6%E6%96%AD%E7%94%B5%E7%9A%84%E5%90%8E%E7%BB%AD%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/:1:1","tags":null,"title":"家用服务器突然断电的后续情况处理","uri":"/periphery/%E5%AE%B6%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AA%81%E7%84%B6%E6%96%AD%E7%94%B5%E7%9A%84%E5%90%8E%E7%BB%AD%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/"},{"categories":null,"content":"docker 容器全坏 笔者成功启动了debian 虚拟机之后， 发现虚拟机上的大部分docker 容器都坏了。 而且docker service 无法正常启动。 经过排查之后， 笔者发现是原来容器的配置文件都损坏了。 docker 数据存放的默认目录： /var/lib/docker containers 里面存放了所有的容器数据 volumes 存放了数据卷 容器的文件夹里面， 存在一个叫做config.v2.json 的文件， 记录了容器的配置。 笔者发现不少容器的这个配置文件都损坏了， 即该文件不在是一个json文件。 而是一个看似损坏了的二进制文件， 内容已经不再可用了。 解决方案： 删除原来坏掉的容器， 重新建立即可。 在动手删除旧的数据之前，记得先备份一下。 如果读者使用的是docker-compose 方式建立的话， 就可以很方便的重新恢复， 否则就麻烦一些。 如果读者使用的是文件夹映射，那么文件应该没有丢。 如果使用的是docker管理的卷的话， 数据应该也没有丢。 ","date":"2021-02-27","objectID":"/periphery/%E5%AE%B6%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AA%81%E7%84%B6%E6%96%AD%E7%94%B5%E7%9A%84%E5%90%8E%E7%BB%AD%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/:1:2","tags":null,"title":"家用服务器突然断电的后续情况处理","uri":"/periphery/%E5%AE%B6%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AA%81%E7%84%B6%E6%96%AD%E7%94%B5%E7%9A%84%E5%90%8E%E7%BB%AD%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/"},{"categories":null,"content":"mysql 无法启动 容器恢复之后， 笔者的mysql 也还是无法启动。。 原因不知。。 笔者每次家用服务器意外断电之后， mysql 基本上都会损坏。。 😂 折腾了一番， 笔者并没有发现很好的办法， 只得使用几个月前备份的sql文件恢复了。。 （因为笔者的数据也不算特别重要， 所以也懒得完全恢复了。。 ） 之后笔者写了几个脚本，添加了crontab 的任务，让mysql 每周自动备份一次。 ","date":"2021-02-27","objectID":"/periphery/%E5%AE%B6%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AA%81%E7%84%B6%E6%96%AD%E7%94%B5%E7%9A%84%E5%90%8E%E7%BB%AD%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/:1:3","tags":null,"title":"家用服务器突然断电的后续情况处理","uri":"/periphery/%E5%AE%B6%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AA%81%E7%84%B6%E6%96%AD%E7%94%B5%E7%9A%84%E5%90%8E%E7%BB%AD%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/"},{"categories":null,"content":"其他 每次恢复都需要时间和精力， 如果经常发生断电的话， 就很令人头疼。。 这时就可以考虑入手一个便宜的UPS。 在突然断电之后 给予服务器正常关机的时间。 （部分ups支持在断电后，自动给机器发送关机命令。 但是一般支持的都是Windows，Linux系统） 参考阅读： 家里的网络图示 ","date":"2021-02-27","objectID":"/periphery/%E5%AE%B6%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AA%81%E7%84%B6%E6%96%AD%E7%94%B5%E7%9A%84%E5%90%8E%E7%BB%AD%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/:2:0","tags":null,"title":"家用服务器突然断电的后续情况处理","uri":"/periphery/%E5%AE%B6%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AA%81%E7%84%B6%E6%96%AD%E7%94%B5%E7%9A%84%E5%90%8E%E7%BB%AD%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/"},{"categories":null,"content":"基本内容 在进行了正确的语法分析之后，会生成抽象语法树。 一般情况下是一段代码生成一个抽象语法树。 （常见的情况是一个文件或者一块代码。） 本篇来简单的描述一下抽象语法树的内容， 由于笔者的知识储备并不是特别的深，所以可能还需要读者阅读更多的资料。 抽象语法树就是一个树，树是一种基本的数据结构， 主要是由节点构成。 下面定义来自维基百科。 每个节点都只有有限个子节点或无子节点； 没有父节点的节点称为根节点； 每一个非根节点有且只有一个父节点； 除了根节点外，每个子节点可以分为多个不相交的子树； 树里面没有环路(cycle) 词法分析会从字符流中生成出词法单元， 然后由语法分析进行组装，产生一个AST（抽象语法树）。 基本上来说，树上的每一个节点都是一个词法单元。 下面来看一些示例图。(点击图片可以查看大图) 数值运算 if语句 实际上的树要比笔者给的图更加复杂， 因为在设计的时候， 会考虑如何复用， 所以会进行抽象。 再进行了一定的抽象之后， 会多出一些层次， 但是那些多出来的内容在理解AST的时候是不太重要的。 只要能够组织基本的AST， 那么复杂的其实也不难。 基本上来说， 复杂的AST只是一个量变和正常量变带来的些许复杂度。 ","date":"2021-02-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.2-%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/:1:0","tags":null,"title":"自制脚本语言[3.2]抽象语法树的简单介绍","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.2-%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"代码示例 下面给出一些langX的代码示例， 辅助读者理解这部分内容。 struct Node { NodeType type; // 在执行结束之后是否进行 free 操作 bool freeOnExecuted; // 当前节点的值 . 如果当前结点是一个常量数字， 则free 的时候会施放这个值得内存 Object *value; // 万能指针 ， 主要用于放置参数什么的 void *ptr_u; // 节点状态 NodeState state; // 当前节点所在的文件信息 NodeFileInfo fileinfo; // 后置值 ， 如果当前节点为一个 变量节点， 当前属性则为有用 Object *postposition; Variable *var_obj; Constant *con_obj; Operator *opr_obj; ArrayInfo *arr_obj; }; // 节点的文件信息 struct NodeFileInfo { // 文件名 // const char * filename; // 修改成 std::string 试试，上面的那个类型要处理一下 std::string filename; // 行号 int lineno; }; struct Constant { int iValue; double dValue; char* sValue; char cValue; // 当前常量是否是一个 bool 类型得元素 bool flagBool = false; }; // 数组声明时使用 struct XArrayNode { // 数组名字 char * name; // 数组长度 int length; // 变量长度索引 . 如果变量索引节点存在， 则使用这个， 否则使用 length Node * lengthNode; }; struct Operator { // 子节点列表 | 实现树的主要部分内容 struct Node** op; int op_count; // 操作符是什么 int opr; }; 本部分内容的代码在 Object.h文件里面。 如果读者阅读了langX的 代码， 会发现还有一个类似的结构， 叫做NodeLink。 这个不用深入探究，这个是因为笔者当时的知识水平有限， 误入了歧路而产生的东西。 ","date":"2021-02-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.2-%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/:2:0","tags":null,"title":"自制脚本语言[3.2]抽象语法树的简单介绍","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.2-%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"接上一篇的一些内容 由上面的代码示例可以看出， 每一个节点都有一个Object *value;的属性。 这个属性用于存放该节点的运算结果。 这种方式是属于直接再AST上进行运算， 不建议读者这么使用， 因为这个方式并不好， 会产生很多问题。 ","date":"2021-02-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.2-%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/:2:1","tags":null,"title":"自制脚本语言[3.2]抽象语法树的简单介绍","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.2-%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"本篇来描述一下 ”环境“相关的内容。 这部分内容是笔者从《两周自制脚本语言》这本书上学来的。 简单来说 环境就是一个K-V形式的Map。 Key 是变量名 Value 是 变量值 一个环境表示一个作用域。 比如函数内部，类内部，脚本内部等。 这里需要提一下， 如果读者使用Java语言来实现脚本语言引擎，或者读者只是想学习一下，或者读者只是追求一个简单的脚本语言引擎，那么建议使用这种方式， 否则，不建议使用这种方式。 如果读者想实现一个复杂的， 稳定的脚本语言引擎， 那么建议使用变量表的形式来实现环境。 一个例子是使用数组或者链表来存放变量的值，对变量的引用在编译期间转换成具体的索引，而非变量名。 由于笔者还没有实现过相关的方式，所以本篇不讨论相关内容。也许后面笔者实现过了之后 会写一篇博文进行相关介绍 😂😂😂 ","date":"2021-02-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.1-%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%8A%82%E7%82%B9%E8%BF%90%E7%AE%97%E7%9A%84%E5%80%BC/:0:0","tags":null,"title":"自制脚本语言[3.1] 环境与节点运算的值","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.1-%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%8A%82%E7%82%B9%E8%BF%90%E7%AE%97%E7%9A%84%E5%80%BC/"},{"categories":null,"content":"详细说明 我们先来讨论一下 最简单的赋值行为。 先看一下下面的代码。 // 本段代码的内容都是在一个脚本文件内部的。 a = 1; b = \"hello\"; c = new Test(); d = a + 1; 为了使变量这个功能得以实现， 我们需要保存变量的当前值， 以使未来在使用这个变量的时候可以获取到正确的值。 所以我们可以使用下面的方式进行实现。 新建一个新的 Map ，用于表示脚本的环境。 碰到 a = 1; 这条语句的时候， 把a的值 设置成 1 碰到 b = \"hello\"; 这条语句的时候， 把b的值设置成hello 碰到 c = new Test(); 的时候， 实例化 Test类，生成一个对象，并将对象的引用赋值给c 碰到 d = a + 1; 这条语句的时候， 首先取出a的值， 然后进行加法运算， 之后将结果赋值给 d 附注： 新建一个Map的地方， 可以考虑使用 std::map\u003ck,v\u003e 或者自定义的Enviroment 类之类的。 关于 new Test() 和 d = a + 1; 的语句 在后续文章会有更加详细的说明。 当所有语句执行结束之后，我们应该会得到一个如下的一个Map。 a: 1 b: hello c: 一个指向 Test对象的引用 d: 2 此时，我们追加执行一条语句 a = a + 1; 之后， a的值会被更新成2 。 现在新的Map 应该是如下这个样子的。 a: 2 b: hello c: 一个指向 Test对象的引用 d: 2 本篇只是提供了一些实现上的思路，并没有提供具体的代码。 想要看代码的读者可以看看langX里的相关实现。 langX中的相关实现都在 Enviroment.h 和Enviroment.cpp 两个文件中。 ","date":"2021-02-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.1-%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%8A%82%E7%82%B9%E8%BF%90%E7%AE%97%E7%9A%84%E5%80%BC/:1:0","tags":null,"title":"自制脚本语言[3.1] 环境与节点运算的值","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.1-%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%8A%82%E7%82%B9%E8%BF%90%E7%AE%97%E7%9A%84%E5%80%BC/"},{"categories":null,"content":"关于节点的一些简单说明 这里说的节点表示抽象语法树上的一个节点， 将会在下一篇中进行说明。 ","date":"2021-02-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.1-%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%8A%82%E7%82%B9%E8%BF%90%E7%AE%97%E7%9A%84%E5%80%BC/:2:0","tags":null,"title":"自制脚本语言[3.1] 环境与节点运算的值","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.1-%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%8A%82%E7%82%B9%E8%BF%90%E7%AE%97%E7%9A%84%E5%80%BC/"},{"categories":null,"content":"其他 在JAVA函数的实现中，存在一个叫做 局部变量表的东西， 这个表里的每一个元素都是变量的值，在使用这个表的时候，就是根据索引来操作的。 索引应该会在编译阶段产生，并生成到字节码里面。 ","date":"2021-02-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.1-%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%8A%82%E7%82%B9%E8%BF%90%E7%AE%97%E7%9A%84%E5%80%BC/:3:0","tags":null,"title":"自制脚本语言[3.1] 环境与节点运算的值","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%803.1-%E7%8E%AF%E5%A2%83%E4%B8%8E%E8%8A%82%E7%82%B9%E8%BF%90%E7%AE%97%E7%9A%84%E5%80%BC/"},{"categories":null,"content":"本篇来描述一下 类型相关的内容。 脚本语言引擎需要提供一些基本类型和至少一个复杂类型的抽象(类，表等)。 ","date":"2021-02-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%802-%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E7%9A%84%E4%BB%8B%E7%BB%8D/:0:0","tags":null,"title":"自制脚本语言[2] 类型相关内容的介绍","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%802-%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E7%9A%84%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"基本类型 就拿JAVA语言的基本类型来举例： boolean,byte,char,short,int,long,float,double 其中的每一个类型都是基本元素，基本上在使用的时候不会拆分成更小的类型。 除了上述的关于数值的类型之外， 常用的还有一个字符串类型。 （在Java中 字符串不算基本类型。算引用类型。但在读者自己开发的脚本语言中，则可以自己定义。） 笔者在langX中定义的基本类型有下面几个： 数值类型 （整数， 浮点数， 布尔） null 类型 字符串类型 数组 函数 别的复杂类型基本上都需要使用上述的类型进行组成。 ","date":"2021-02-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%802-%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E7%9A%84%E4%BB%8B%E7%BB%8D/:1:0","tags":null,"title":"自制脚本语言[2] 类型相关内容的介绍","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%802-%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E7%9A%84%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"复杂类型的抽象 基本上可以理解为JAVA里的类， lua里的表。 下面请看一个JAVA的代码片段。 @Data public class Student { // 唯一编号 private int id; // 姓名 private String name; // 年龄 private int age; // 是否毕业了 private boolean graduation; public boolean isGraduation(){ return graduation; } } 上面描述一个叫 Student的类， 即一个复杂类型。这个类由字段，方法，注解组成，其中大部分字段使用的基本类型， 还有部分字段使用的是复杂类型（字符串）。 这个类是一个具体的复杂类型， 为了使脚本语言引擎可以支持这个复杂类型， 我们需要实现一套机制。 这套机制可以表述一个复杂类型。 下面是一段示例代码（伪代码 ） 字段类 { 访问限制符 ; 字段类型 ; 字段名 ; } 类型类 { 字段列表 ; 方法列表 ; // 节省篇幅，省略了方法类 注解列表 ; // 同上 （其实就是懒 🤣🤣🤣 ） } 因为笔者的脚本语言引擎使用的 c++实现， 所以在名称后面加上了一个“类”。以表述该伪代码描述的是一个c++类 使用上面的伪代码可以表述 Student类， 基本上也就可以表示任何的复杂类型。这样，脚本语言引擎就可以支持复杂类型了。 如果读者只是想实现一个非常简单的脚本语言，或者DSL用作配置的话， 则可以考虑不实现这个， 而是实现具体的类型。之后在解释的时候， 一个字段对应一个字段的读取。 如果只是用作于配置文件， 并且读者使用JAVA的话， 使用 json/yaml 之类的可能更合适。 （因为JAVA存在反射机制，所以可以很方便的自动赋值。） 但是如果存在逻辑的话， 可能json/yaml 就不是很好使用了。（比如分支语句， 循环语句等。） ","date":"2021-02-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%802-%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E7%9A%84%E4%BB%8B%E7%BB%8D/:2:0","tags":null,"title":"自制脚本语言[2] 类型相关内容的介绍","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%802-%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E7%9A%84%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"总结 本篇只是大概的介绍了一下类型应该怎么做。 具体怎么样去做可能需要读者花时间去尝试。 这里在实现基本类型的时候 有一些参考性的指导内容。 使用类继承的方式， 比如定义一个 Object的基类。 之后定义一个Number 类，表示数值，并继承自Object 。 定义一个Null 类， 继承 Object 数组，函数， 对象 可能有点特殊。 笔者在实现langX的时候使用了下面的做法。 分别定义Array/Function/langXObject 表示对应的具体数据， 但是这些类并不继承Object。 定义新的类型ArrayRef/FunctionRef/langXObjectRef 来表示对上述类型的引用。 这些引用则继承自Object。 这样做的原因在后面章节说到 “节点的值” 的时候会进行解释。 使用一些内存技巧。 c/c++ 的内存布局里面没有多余的信息，并且可以进行强制类型转换。 // 下面代码的灵感来自于 lua源代码的阅读， 笔者并未真实实践 // 这里只是给读者一些思路 struct NumberType { int type; double value; } struct NullType { int type; } struct StringType{ int type; int len; char *value; } #define isNull(x) ((struct NullType*)x)-\u003etype == 1 #define isNumber(x) ((struct NullType*)x)-\u003etype == 2 #define isString(x) ((struct NullType*)x)-\u003etype == 3 void *ptr = ... ; // ... 获取值的代码进行了省略 if(isNull(ptr) ){ // null } else if (isNumber(ptr)){ auto value = ((struct NumberType*)ptr)-\u003evalue; // ... } else if (isString(ptr)) { auto stringPtr = (struct StringType*) ptr; // ... } 使用上面的技巧 可以避免定义类型。 简单来说，这个技巧就是： 使结构的前几个字段类型相同。 ","date":"2021-02-07","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%802-%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E7%9A%84%E4%BB%8B%E7%BB%8D/:3:0","tags":null,"title":"自制脚本语言[2] 类型相关内容的介绍","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%802-%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E7%9A%84%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"笔者曾经有一段时间发现，在Windows机器上设置了ipv4的dns服务器之后没有效果。 之前返回的是什么，修改之后返回的还是什么。。 在把ipv6关掉之后修改才会生效。 笔者最近发现是因为openwrt的 ipv6的dhcp服务的原因，把ipv6的dhcp服务关掉之后，一切就正常了，Windows机器也不需要禁用ipv6了。 笔者使用openwrt做旁路由，使用pfSense做主路由。 ipv4的dhcp服务由pfSense提供，pfSense会把openwrt的地址作为网关和dns服务器分配给客户机。 似乎是因为 windows 和安卓在开了ipv6得时候， 会主动使用ipv6得dns 而忽略ipv4的dns。 在openwrt中找到 network \u003e interface \u003e LAN edit \u003e DHCP Server \u003e IPV6 全部停用即可停用 LAN接口的服务， 如果存在多个接口，则可能需要每一个接口都设置一下。 ","date":"2021-01-25","objectID":"/periphery/openwrt%E7%9A%84ipv6%E7%9A%84dhcp%E5%8A%9F%E8%83%BD/:0:0","tags":null,"title":"Openwrt的ipv6的dhcp功能","uri":"/periphery/openwrt%E7%9A%84ipv6%E7%9A%84dhcp%E5%8A%9F%E8%83%BD/"},{"categories":null,"content":"本篇来描述如何做语法分析和词法分析。 有两种方式可以做词法分析和语法分析， 一是自己纯手写， 二是使用第三方工具。 手写的优势 灵活性比较高 可以提供较好的错误提示给脚本语言的用户 手写的劣势 在没有基础的情况下，可能会需要更多的时间来完成这件事 可能会出现一些BUG 使用第三方工具的优势 较为出名的第三方工具往往都比较稳定 只需要关心语法结构， 而不用特别关心如何实现。 使用第三方工具的劣势 不够灵活，如果某些特性第三方工具没有的话，很可能就实现不了了。 提供给脚本语言用户的错误提示可能不够精确。 一般来说，使用哪种方式看读者的喜好。 笔者下面介绍一下部分已知的工具是使用哪种方式实现的。 《两周自制脚本语言》 提供的是手写方式。 lua 是使用的手写方式。 早期的mysql 应该是使用的第三方工具。 （因为它给的提示特别烂。。） ","date":"2021-01-18","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%801-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/:0:0","tags":null,"title":"自制脚本语言[1] 词法分析与语法分析","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%801-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"},{"categories":null,"content":"第三方工具 因为使用第三方工具比较简单， 所以笔者采用第三方工具的方式来实现langX的词法解析与语法解析。 下面介绍一下笔者知道的几种工具。 词法分析器： flex(lex) doc 。 语法分析器： yacc(bison) doc 。 语法分析+词法分析： tree-sitter doc 。 笔者这里统一使用 lex 称呼 flex/lex , 使用yacc 称呼 yacc/bison， lex+yacc是一起配合使用的。 Tree-sitter 则是一个单独使用的工具， 下面笔者就来更详细的介绍一下这几个工具。 ","date":"2021-01-18","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%801-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/:1:0","tags":null,"title":"自制脚本语言[1] 词法分析与语法分析","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%801-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"},{"categories":null,"content":"Tree-sitter 这里先说一下tree-sitter 这个工具。 这个工具使用js 来编写语法文件， 可以配合atom的插件来实现语法高亮。 Atom 是一个代码编辑器， 和VS Code 类似。 Atom的功能没有大型IDE那么强大， 但是也勉强够用了。 Atom提供插件机制， 读者可以自行为读者的脚本语言编写一个语法高亮插件。 而Atom的语法高亮插件就是基于tree-sitter 提供的API的。 langX的Atom插件源码 , langX的tree-sitter源码 tree-sitter是基于 Node.js 来运行的， 在编写语法的时候 只需要编辑一个叫做grammer.js的文件。 tree-sitter 可以使用一些函数来简化语法文件的编写， 比如 optional(),repeat(),seq(), choice() 等。 而yacc则不能使用函数， 只能写规则。 tree-sitter可以生成在程序里面使用的语法分析文件(*.h,*.c)， 但是笔者并没有使用相关的内容。 更多详细的内容可以阅读官方文档： https://tree-sitter.github.io/tree-sitter/ ","date":"2021-01-18","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%801-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/:1:1","tags":null,"title":"自制脚本语言[1] 词法分析与语法分析","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%801-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"},{"categories":null,"content":"lex + yacc 在 https://github.com/Aincvy/langX/tree/dev/extern 这个目录里面的 a.l 是词法分析文件(lex)， a.y是语法分析文件(yacc)。 这两文件可能乍一看 内容很长， 但是其实并不复杂，都是按照一定的规则进行编写的。 词法分析工具lex flex 在mac平台上可以使用 brew install flex 进行安装。 在 debian/ubuntu 上可以考虑使用 sudo apt install flex 来进行安装。 lex的语法是使用 %% 符号进行分割, 整个文件将会被两个%% 分割成三块。 用户定义内容 词法规则 其他代码 下面的示例代码节选自 a.l 文件。 （语法高亮可能存在问题） // 用户定义内容 %{ #include \"y.tab.h\" // 当前行 int now_line = 1 ; // 当前列 int column = 0; void comment(void); void count(void); %} %% // 词法内容 \"/*\" { comment(); } \"//\"[^\\n]* { /* consume //-comment */ } \"auto\" {count(); return KEY_AUTO;} \"if\" {count(); return KEY_IF;} \"else\" {count(); return KEY_ELSE;} \"while\" {count(); return KEY_WHILE;} \\\"(\\\\.|[^\\\\\"\\n])*\\\" {count(); yylval.sValue = strdup(yytext); return TSTRING;} [$_a-zA-Z][$_a-zA-Z0-9]* {count(); yylval.sValue=strdup(yytext); return IDENTIFIER;} 0|([1-9][0-9]*) {count(); yylval.iValue = atoi(yytext); return TINTEGER; } (0|[1-9][0-9]*)\\.[0-9]+ { count(); yylval.dValue = atof(yytext); return TDOUBLE;} \"\u003e\" {count(); return '\u003e'; } \"\u003c\" {count(); return '\u003c'; } \"{\" {count(); return '{'; } \"}\" {count(); return '}'; } [\\n] {count(); now_line++; } %% // 其他代码内容 void comment(void) { char c, prev = 0; while ((c = yyinput()) != 0) /* (EOF maps to 0) */ { if (c == '\\n') { now_line++ ; column = 0; } if (c == '/' \u0026\u0026 prev == '*') return; prev = c; } //error(\"unterminated comment\"); } void count(void) { int i; for (i = 0; yytext[i] != '\\0'; i++) { if (yytext[i] == '\\n'){ column = 0; } else if (yytext[i] == '\\t') column += 8 - (column % 8); else { column++; } } // printf(\"after count %s, column: %d\\n\", yytext, column); } 其中 词法规则部分是匹配token 的关键地方。 token是语法分析的基本单位， 使用lex 识别的token会传递给yacc， 然后由yacc筛选和确定语法规则。 在 用户定义内容的地方可以使用 %{ 和 %} 来插入c/cpp代码。 而 其他代码内容则不需要符号，直接编写c/cpp代码即可。 读者可以先看看 langX的这部分代码是如何编写的， 然后再使用搜索引擎搜索一下lex相关的文章就明白了。 编写文件之后， 可以直接使用命令 lex a.l 来生成lex.yy.c 文件。 （lex [filename]） 语法分析工具 yacc yacc 在mac平台上使用命令brew install bison 来进行安装。 在debian/ubuntu平台上，可以使用sudo apt install bison 来进行安装。 默认情况下， yacc使用LR(1) 的方式进行语法分析， 但是可以使用%glr-parser 标记使其使用glr的方式进行语法分析。 Yacc 同样使用符号%% 进行三段式分割，使用 %{ 和%} 来插入c代码。 第一部分的部分内容的说明： %union{} 这个结构就是 在lex 中的变量yylval 的数据类型。 %token 用于声明token，每一个token 将会生成一个宏定义。 在源码包含y.tab.h 头文件之后即可使用。 在lex 中return 的也是这个。 %type\u003cX\u003e 用于声明一个并非token 的中间类型，主要方便语法文件的抽象。 X 则表示类型，具体值为%union{} 中的字段名 %nonassoc 无关联性的优先级指示。 %left 用于指定左结合的%token 。 例如： , + - 等等。 %right 用于指定右结合的%token。 例如：= += -= 等等 %glr-parser 指示 yacc使用 glr的方式解析语法。 %start 指定一个语法规则的入口 第二部分就是纯粹的语法规则了。 第三部分可以写一些c代码。在langX中，笔者在这段就只写了一个main 方法。 下面看一段语法规则的代码。 （即 第二部分） // 本部分内容只是一些示例，并不能直接使用 program : statement_list ; statement_list : statement_list statement { execAndFreeNode($2); } | ; statement : _extra_nothing { $$ = $1; } | out_declare_stmt { $$ = $1; } | con_ctl_stmt { $$ = $1; } | simple_stmt { $$ = $1; } | try_stmt { $$ = $1; } | TOKEN_END_OF_FILE { lexEOFWork(); $$ = nullptr; } ; _extra_nothing : ';' { $$ = NULL; } ; out_declare_stmt : func_declare_stmt { $$ = $1; } | class_declare_stmt { $$ = $1; } | namespace_declare_stmt { $$ = $1; } | namespace_ref_stmt { $$ = $1; } ; // 命名空间的声明语句 namespace_declare_stmt : KEY_SET KEY_PUBLIC '=' namespace_name_stmt { $$ = opr(OPR_CHANGE_NAME_SPACE, 1, $4); } ; // 引用命名空间 namespace_ref_stmt : KEY_REF namespace_name_stmt { $$ = opr(KEY_REF, 1, $2); } ; namespace_name_stmt : id_expr { $$ = opr(OPR_GET_NAME_SPACE, 2, NULL, $1); } | namespace_name_stmt '.' id_expr { $$ = opr(OPR_GET_NAME_SPACE, 2, $1, $3); } ; int_expr : TINTEGER { $$ = intNode($1); } ; double_expr : TDOUBLE { $$ = number($1); } ; 使用 分行是为了看起来更清晰方便， 下面是一些更详细的说明 语法规则基本上是 规则名称：子规则1 { 碰到这个子规则执行的语句} | 子规则2 {碰到这个规则执行的语句} ; $$ 表示规则名称的结果， 即当前规则向上返回的时候 返回的内容 $1,$2... $n表示第n个元素。 // 表示单行注释 number($1); intNode($1); 这些是笔者自定义的函数， 用于生成一个XNode* 。 上述代码中的double_expr/int_expr... 等等基本上都是使用 %type\u003cnode\u003e 进行声明的，所以都是一个XNode* 类型。 上述内容选自 文件： https://github.com/Aincvy/langX/blob/dev/extern/a.y 配合该文件一起看这篇博文可能更容易理解一些。 这里还有一些需要注意的地方是，仔细看statement_list 规则， 它可以是statement_list statement 或者一个空。 当statement_list 是空的时候， 会匹配只有一条statement 的规则。即: statement_list ","date":"2021-01-18","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%801-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/:1:2","tags":null,"title":"自制脚本语言[1] 词法分析与语法分析","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%801-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"},{"categories":null,"content":"其他 Tree-sitter 的文档还是比较丰富的， 只是需要一定的英文水平， 并且tree-sitter提供了一些开源的示例可以参考，所以难度应该不是很大。在笔者编写langX的时候好像还没有tree-sitter这个工具，所以当时就选择了lex+yacc, 笔者目前只是使用tree-sitter来做语法高亮。 在使用lex+yacc 的时候， 建议刚开始从一些小的文件开始， 慢慢熟悉结构了之后 自然就会把文件写的较为复杂了。 当复杂到一定程度之后 可能会碰到很多冲突(shift/reduce,reduce/reduce)的警告，此时就需要考虑对语法文件进行重构， 笔者建议使用思维导图进行整理思路。 注： 部分警告不是一定要解决的，但是建议能解决的都解决掉。 语法分析会产生一个抽象语法树，之后的操作大多是基于这个抽象语法树的。所以理论上来说词法分析和语法分析的实现是可替换的，即你目前可以选择lex+yacc,后面不爽了可以换成纯手写的。 （替换会产生成本就是了😂） ","date":"2021-01-18","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%801-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/:1:3","tags":null,"title":"自制脚本语言[1] 词法分析与语法分析","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%801-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"},{"categories":null,"content":"拓展阅读 本文的内容有点偏于介绍性，而非入门型， 所以建议笔者同时阅读下面的文章以深入了解lex\u0026\u0026yacc。 https://segmentfault.com/a/1190000000396608 https://www.jianshu.com/p/728e4011a61e 第三方词法分析器列表： https://en.wikipedia.org/wiki/Comparison_of_parser_generators 随便截取几个放到下方 C# Flex, C# Lex DFA Golex, JLex ANTLR3, ANTLR4 Bison, byacc AXE LPG, LISA AustenX BNFlite Canopy IronMeta ","date":"2021-01-18","objectID":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%801-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/:1:4","tags":null,"title":"自制脚本语言[1] 词法分析与语法分析","uri":"/non-menu/self-programming-lang/%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%801-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"},{"categories":null,"content":"这个小系列将会介绍如何自制一门脚本语言。 ","date":"2021-01-11","objectID":"/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/:0:0","tags":null,"title":"自制脚本语言 - 开篇","uri":"/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/"},{"categories":null,"content":"主要内容 ","date":"2021-01-11","objectID":"/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/:1:0","tags":null,"title":"自制脚本语言 - 开篇","uri":"/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/"},{"categories":null,"content":"优劣 自制脚本语言将会有下面的好处： 自己可以对脚本语言的语法，特性进行定制化 可以大概了解别的编程语言是如何运作的。 增强逻辑思维能力。 自制脚本语言将会有下面的坏处： 需要大量的时间进行学习，调试。 做出来的东西往往只是一个玩具。 想要实现一个成熟的脚本语言 很难。 编写脚本的库也需要很多时间。 ","date":"2021-01-11","objectID":"/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/:1:1","tags":null,"title":"自制脚本语言 - 开篇","uri":"/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/"},{"categories":null,"content":"langX 笔者曾经使用cpp尝试写了一门脚本语言， 目前已经开源。 地址是： https://github.com/Aincvy/langX 本系列将会引用该工程里面的代码和设计思想。不过，有一点需要注意的是，该项目目前还十分的不成熟。 ","date":"2021-01-11","objectID":"/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/:1:2","tags":null,"title":"自制脚本语言 - 开篇","uri":"/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/"},{"categories":null,"content":"推荐阅读书籍以及其他 两周自制脚本语言 笔者就是看这本书入门的， 但是这本书存在一个很大的方向性问题， 即： 本书并没有使用字节码和VM的方式来实现执行。 不过，还是值得一看的入门书籍。 本书是使用Java作为实现语言的。 深入理解Java虚拟机（第3版） 如果读者是一名JAVA程序员， 那么可以看看这本书， 了解一下jvm的内容。 无论是对于JAVA，还是对于自制脚本语言都有很大的帮助。 https://github.com/lua/lua 这是lua源代码， 也有阅读的价值。 ","date":"2021-01-11","objectID":"/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/:1:3","tags":null,"title":"自制脚本语言 - 开篇","uri":"/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/"},{"categories":null,"content":"脚本语言的结构介绍 一般情况下， 脚本语言可以划分为几个部分。 词法分析与语法分析 类型对象 （数值，字符串，对象，等） ⭐ 栈 或者 环境 ⭐ 虚拟机 或者 直接执行节点 ⭐ GC部分 其中， 词法分析与语法分析存在一些第三方工具可以使用， 笔者将会在下一篇博文中介绍。 ","date":"2021-01-11","objectID":"/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/:2:0","tags":null,"title":"自制脚本语言 - 开篇","uri":"/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/"},{"categories":null,"content":"虚拟机 与直接执行节点 语法分析之后会生成一个抽象语法树（Abstract Syntax Tree，AST） ， 树里面存在很多个节点。 直接执行节点在初期的时候比较方便， 但是当逻辑越来越复杂，语言特性越来越多的时候，似乎就不是很好用了。 在跳转语句上， 直接执行节点没有虚拟机方便，简单。 虚拟机是使用AST生成一个线性执行的字节码序列， 配合栈一起进行运算。但是初期实现起来可能比较困难。 如果读者想实现一个现代化的脚本语言， 建议你直接使用虚拟机的方式进行实现， 因为这样前期麻烦，但是后期简单。 如果只是想了解一下， 则可以考虑使用直接执行节点的方式。 ","date":"2021-01-11","objectID":"/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/:2:1","tags":null,"title":"自制脚本语言 - 开篇","uri":"/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/"},{"categories":null,"content":"其他 除了这种方式之外， 还可以考虑使用其他语言做后端进行实现。 比如， 基于JVM的语言有： Groovy JRuby Clojure Scala Kotlin 等等。。 还比如： https://github.com/vlang/v v语言会先编译成人类可读的c语言形式文件。 https://github.com/microsoft/TypeScript TypeScript 是基于JavaScript的一种语言 https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html 使用LLVM实现你的脚本语言。 这里多聊一下关于LLVM的内容。 这个框架笔者并没有实际使用过，只是有过一些简单的了解。 使用这个框架应该可以直接编译成机器码， 并且llvm会优化你的代码。 感兴趣的读者可以自己尝试阅读下相关文档。 ","date":"2021-01-11","objectID":"/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/:3:0","tags":null,"title":"自制脚本语言 - 开篇","uri":"/non-menu/self-programming-lang/%E5%A6%82%E4%BD%95%E8%87%AA%E5%88%B6%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80-%E5%BC%80%E7%AF%87/"},{"categories":null,"content":"简介 这个一个看板工具。 以前个人是免费得无限看板， 前一段时间被Atlassian 收购之后，最近好像只能以团队为单位了。（可能是收购，具体是什么情况笔者并不清楚。 但是现在trello属于Atlassian旗下了） 创建看板必需选择一个团队， 一个免费团队可以创建10个看板。如果需要更多看板， 就需要升级到企业服务。 企业服务得收费价格是： 如果按年计费，每位用户每月只需支付 $9.99 即可保留企业服务 。 好在一个免费用户可以创建多个团队，所以就可以拥有较多得看板。 实际在使用上来说，稍微节省一些，10个看板也是够用得。 Atlassian 旗下还有一款比较好用得git GUI客户端工具： Sourcetree.(免费) ","date":"2021-01-04","objectID":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/:1:0","tags":null,"title":"介绍以下trello这个看板工具","uri":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"详细内容 ","date":"2021-01-04","objectID":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/:2:0","tags":null,"title":"介绍以下trello这个看板工具","uri":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"看板得结构 一个团队可以拥有N个看板， 每个看板里面可以用于N个列表，每个列表里面可以拥有N个卡片。 所以trello主要有3个组件构成 ： 看板，列表，卡片。 看板和列表都比较简单，卡片得内容就复杂一些。 每个卡片都可以拥有下面得属性。 名字，描述 到期日 评论（可以评论N次） 标签（颜色标签，可以添加自定义得文字到标签上） 清单（就是一个todo列表，一个卡片可以存在多个清单） 附件 (上传图片附件得时候会自动在列表里面显示) 自定义字段 （需要一个Power-up） 等等 ","date":"2021-01-04","objectID":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/:2:1","tags":null,"title":"介绍以下trello这个看板工具","uri":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"拓展 PowerUps Trello 提供一些拓展， 用于增强看板得功能。 免费用户似乎每个看板只能安装1个power-up，而Trello Gold 可以安装3个，企业版本可以装无限个。 下面介绍一下笔者使用过得一些拓展。 自定义字段 可以给卡片增加自定义字段。 增加的字段可以显示在列表上。 有下面几个类型得字段可以添加 复选框 日期 下拉类型 编号 （可能就是数字） 文本 日历 可以将存在到期日的卡片显示在对应的日期上。 具体效果类似 google calendar diagrams.net 把diagrams.net 这个工具嵌入到看板里。 可以用于画流程图， 结构图等。 每个图保存出来得xml文件将作为卡片得附件依附到卡片上。 列表限值 给每个列表添加一个卡片上限。 如果超过了这个上限值就将突出显示这个列表。 卡片生命期 一个卡片如果若干时间不活动，则会褪色。 可以很明显得看到 那些卡片很久没有更新内容了。 等等等等。。 ","date":"2021-01-04","objectID":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/:2:2","tags":null,"title":"介绍以下trello这个看板工具","uri":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"Butler 内置得自动化工具 这个内置工具可以让你增加看板按钮，卡片按钮等进行一些快捷操作。 免费用户存在一些数量限制， Trello Gold 用户拥有更大的权限， 而企业用户似乎是无限制。 卡片按钮 显示在卡片上的按钮， 可以完成下面的行为。 移动当前卡片到别得看板得列表里面。 添加一个标签到当前得卡片上 过期日得相关操作 （更新到期日，设置到期日为完成状态等） 添加一个清单， 评论， 修改描述等 等等。。 看板按钮 显示在看板上得按钮，可以完成下列行为。 对列表得操作。 （创建新的列表，移动列表，归档列表等。） 对卡片得操作。 （在某个列表里面创建一个新卡，移动卡等。 ） 排序某个列表里面得卡片。 等等。。 Calendar Commands 。 基于日期得命令 这个命令存在一个Trigger 。 可以使用日期相关得内容做触发器。 比如，每周一， 每月1号， 每月最后一个星期天，每天等。 触发之后 可以执行得行为和 看板按钮得行为类似。 免费用户只能做一条这个命令， 而Gold 用户则可以做好多条 Due Date Command 。 基于过期日得命令 这个笔者使用得较少。 主要是和卡片得到期日有关。 这个命令也分两个部分， 触发器和行为。 触发器是围绕到期日展开得。 比如到期日， 到期日前两天， 到期日后两天等等 行为得话， 和卡片得行为是差不多类似得。 Rules 基于规则得一些行为。 这个命令也分两个部分， 触发器和行为。 触发器可以是： 卡片移动到某个列表 创建了一个新卡片 添加了一个附件到卡片上 添加了一个标签到卡片上 给某个卡片设置了到期日 给某个卡片添加了清单 等等等等 可以触发得行为和 卡片按钮得行为类似。 ","date":"2021-01-04","objectID":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/:2:3","tags":null,"title":"介绍以下trello这个看板工具","uri":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"Trello Gold 个人版本得收费服务 一年 45$ 。 笔者因为是重度用户，所以开了一年得这个会员， 感觉还可以。 注意： 这个和企业服务是不一样得。 免费用户 Trello Gold 移动端APP ✔️ ✔️ 每个看板3个Power-ups ❌ ✔️ 自定义看板背景，贴纸，emoji ❌ ✔️ 更好得贴纸 ❌ ✔️ 250MB 附件限制 ❌ ✔️ Saved Searches ❌ ✔️ Butler 使用限制放宽 ❌ ✔️ 笔者得推广链接 ，点点不要钱。 说是分享给朋友可以免费获取12个月得Gold。 ","date":"2021-01-04","objectID":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/:2:4","tags":null,"title":"介绍以下trello这个看板工具","uri":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"看板得用处 笔者使用看板管理项目内容， 书籍阅读规划，电影规划， 人生规划等。 理论上来说， 看板可以管理很多东西， 各方各面。 下面笔者简单得介绍一下笔者是如何管理书籍阅读相关的内容的。 笔者根据书籍得分类建立列表。 大概列表内容如下： Incoming, 还未分类得书籍 英语学习 小说类 经济学类 心理学类 杂项 准备阅读 已完成 笔者使用一个叫做“进行中”得看板来管理当前得一些生活任务， 现在正在读得书籍会发送到那个看板里。 笔者做了一个叫做“阅读本书”得卡片命令， 用于把书籍卡片从 “书籍阅读”看板发送到“进行中”看板。 因为书籍列表非常多，笔者需要大量得时间去阅读，所以就做了一个缓冲得队列， “准备阅读”列表。 看完得书籍会从 进行中 发送回 书籍阅读看板， 并加上一个文本为\"Done\"得蓝色标签。 笔者使用类似得方式 管理 要玩得游戏和要看得漫画。 ","date":"2021-01-04","objectID":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/:2:5","tags":null,"title":"介绍以下trello这个看板工具","uri":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"使用看板得好处 使用看板可以让项目得进度，工作内容更加清晰。 使用Trello 做统一管理， 这样就不用使用过多得工具。 也会节省记忆，因为内容都在看板上，所以我们不需要把很多内容记在大脑里面， 这样应该会减少大脑得负担。（可能也会使记忆力衰退😂） 人得感觉是一个不那么靠谱得东西， 而看板上得记录则比较靠谱。 读了几本书，看了几个电影，做了多少工作上得任务，都在上面罗列出来了。 还有一个好处是在做周报得时候可以使用。 （因为笔者得公司没有做周报得习惯，所以也没用上过​ 😂） ","date":"2021-01-04","objectID":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/:2:6","tags":null,"title":"介绍以下trello这个看板工具","uri":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"RESTful API 以及其他工具 Trello 提供了一套API 用于操作看板，列表，卡片等内容。 py-trello 是一个python版本得库，用于操作卡片。 可以使用这个库 代替 内置得Bulter 工具， 从而在免费得基础上，更好得享受trello。 Pro for Trello 一个Chrome得拓展。 支持显示和过滤 Tag,Hash。 还有一些其他得功能。 ","date":"2021-01-04","objectID":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/:2:7","tags":null,"title":"介绍以下trello这个看板工具","uri":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"其他 因为笔者是一个独行侠， 所以没有机会以团队合作得形式使用看板工具， 所以相关内容就不介绍了。 ","date":"2021-01-04","objectID":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/:3:0","tags":null,"title":"介绍以下trello这个看板工具","uri":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"部分内容截图 ","date":"2021-01-04","objectID":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/:3:1","tags":null,"title":"介绍以下trello这个看板工具","uri":"/periphery/%E4%BB%8B%E7%BB%8D%E4%BB%A5%E4%B8%8Btrello%E8%BF%99%E4%B8%AA%E7%9C%8B%E6%9D%BF%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"本文纯属闲谈。 以下几个原因导致笔者技术文章写的不是很多。 笔者自身得技术其实并不算厉害， 只是做事比较认真和负责。 笔者认为 技术是为人类服务得， 我们不应该过度追求技术。 （喜欢技术得除外。） 目前互联网上存在了大量得技术文章，笔者写了得话， 内容估计也和他们得类似。 单纯依靠技术很难让读者实现 类似财务自由得梦想。 先谈谈第一点， 笔者得技术其实很一般， 基础也算不上很好。 从数据结构和算法上来说， 笔者会的也就 冒泡排序（其实已经快忘记怎么实现得了😂 ) ，单向，双向得链表。 二叉树，快速排序什么得基本都不太会。。。 笔者得c/cpp 是自学得， 数据结构和算法书 当初看得时候也是自学得。 但是由于当初学的时候没学会，然后就一直放着没管了， 所以至今也不会😂 。 不过， 笔者从业 游戏开发行业5年左右，一直做JAVA后端得开发工作。 其实并没有碰到太多相关得内容。。链表，树，图啥得基本上完全用不着， 也就用个排序， JDK还提供了一些排序得接口让笔者调用。。 笔者认为，这些东西不是那么重要， 只要能完成策划得需求，性能不是太慢，没有内存泄露等问题就差不多了。 如果你真的用了花里胡哨得代码写法，很多你写的代码只有你一个人能看得懂。这就会造成了维护上得不便，那么这究竟是值得不值得呢？ 笔者之前面试得时候， 一个面试官和笔者说， 学习算法不是为了写它， 而且学习它得实现方式， 在别的地方上使用。 这些话乍一看是挺有道理得，仔细一看也还行。 但是如果尝试分析得话，就会发现一个问题， 如果这个“别的地方” 是个null ， 那么你就没有使用这些算法得机会。 现在来谈谈技术是为了人类服务得这个问题。 笔者认为技术是为了实现需求，解决问题得。 而笔者目前在解决问题中使用得技术都比较简单，一般。 笔者在完成一个功能需求得时候往往使用得都是一些基本得逻辑思考， 一些抽象原则。 而这些内容基本就是一套。不好作为技术文章不停得写啊写得。 笔者在平时工作得时候也没有碰到太多好玩得技术问题，所以也没啥值得好写得。 笔者现在比较喜欢需求驱动这个说法，当笔者需要某个技术得时候再去学习。对于不需要得技术就暂时忽略即可。 最后来谈谈关于赚钱得问题。 笔者相信大多数人打工只是为了赚钱而已， 技术是我们程序员打工使用得工具而已， 笔者认为我们可以而且应该把我们得工具打磨得锋利一些， 但是也就这样了。 没必要做到削铁为泥得程度。 因为从锋利变成削铁为泥需要很多很多时间，而我们都有自己得兴趣爱好，有家人，有其他想做得事情。 所以除非真的特别喜欢技术， 完全没有必要花那么多时间在上面。 笔者还认为，除非技术真的非常厉害，否则利用技术很难赚到很多钱。 给你发工资得人往往不懂技术， 行情往往是根据你得工作年限而非你得技术来给你确定薪水得。 与其花时间深究技术，不如花点时间了解下理财。 注意： 笔者并没有说不应该追求技术， 笔者想表达得内容是 不应该过分追求技术。 技术只是一个工具，笔者认为不应该把它神圣化。 ","date":"2020-12-28","objectID":"/caprice/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%AC%94%E8%80%85%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E5%86%99%E7%9A%84%E4%B8%8D%E5%A4%9A/:0:0","tags":null,"title":"为什么笔者技术文章写的不多","uri":"/caprice/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%AC%94%E8%80%85%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E5%86%99%E7%9A%84%E4%B8%8D%E5%A4%9A/"},{"categories":null,"content":"标题可能有点奇怪。。 整篇内容是笔者得瞎想， 并没有去搜索一些内容， 所以可能存在偏差。 ","date":"2020-12-21","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%BE%97%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:0:0","tags":null,"title":"关于知识得一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%BE%97%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"知识是什么 嗯， 笔者并不知道知识到底是什么，这里就来聊聊 知识大概是什么。 符号组成句子， 句子具有含义，这些含义就可以称之为知识。 1+1=2 可以说是非常简单得数学知识了。 数学是一个分类，是一个类别， 表示1+1=2是一个数学领域得知识。 对于没有接触过， 了解过数学得人 他们可能就不明白1+1=? 。 人类能理解知识，运用知识，创造知识应该是目前人类站在生物链顶层得重要原因之一。 ","date":"2020-12-21","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%BE%97%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:0:1","tags":null,"title":"关于知识得一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%BE%97%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"人和目前得人工智能 据笔者了解， 目前人工智能得运作方式和人类思考得方式并不一样。 在当前得时间(2020年)人类似乎并没有发现人类是如何进行思考得。 就目前得情况来看， 人工智能无法学习人类得知识。 而且人工智能得能源消耗和人脑得消耗完全没有可比性，所以人工智能代替人类可能还需要更多得时间。 ","date":"2020-12-21","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%BE%97%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:0:2","tags":null,"title":"关于知识得一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%BE%97%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"知识和工具 足球是一个娱乐得工具， 如何踢足球则可以算得上是一种知识。 比如如何带球过人，如何射门等等。 股票是一种交易工具， 而如何选股票， 如何判断走势 则是股票交易需要得知识。 cpp/java/c#/go 等编程语言是工具， 如何写代码 则是知识。 ","date":"2020-12-21","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%BE%97%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:0:3","tags":null,"title":"关于知识得一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%BE%97%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"知识得前置性 某些情况下， 知识A 是以知识B为前置得。 当这种情况下， 想学习知识A， 往往得先学习知识B。 比如， 初等数学和高等数学。 一般情况下， 我们都是先学习和理解了初等数学，然后再去学习高等数学， 然后是更高层次得数学。 比如， 现在让笔者开发一个厂商得进销存管理系统。 那么笔者就需要具有几个类别得知识才能完成这项工作。 分别是： 代码编写得能力、厂家得进销存是怎么运作得，流程是怎么样得 。 ","date":"2020-12-21","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%BE%97%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:0:4","tags":null,"title":"关于知识得一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%BE%97%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"书本与知识 这里得书本也代指其他类似书本得东西， 比如教程视频，交互课程等。 有一句话，笔者觉得说的很对， 那句话是 Writing is Thinking. 意思是说在你写作得时候就在思考，这表示完成一本书将是存在困难得工作。 （东拼西揍随意编写得书籍不算在内。） 这同时表示一本书籍将会存在不少知识。 一本书得内容一般较多， 而且存在一定得结构性。 这意味着书得作者往往需要在相关内容上下很多功夫，否则书籍得内容将会不连贯 或者有其他问题。 书籍存在大量得知识，而且不少书籍存在得是经过检验得知识。 所以笔者认为相对于自己探索， 书籍无疑是一种更快速得获取经验得方式。 ","date":"2020-12-21","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%BE%97%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:0:5","tags":null,"title":"关于知识得一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%BE%97%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"其他 人类能理解知识应该和人类得生理构造有关， 至少现代人应该是这样得。 所以一般情况下，除非某个人患了一些疾病，否则他应该具有学习这个世界上大多数知识得能力。 注意，这里笔者只是说那个人具有学习这些知识得能力。 真正得学习过程还需要时间，毅力，老师等其他因素。 笔者曾经看到一个TED演讲视频， 视频中得演讲者称“这个世界上绝大多数得技能都能在20个小时内入门。” 就是说，当你想学习一个新东西得时候，比如吉他，恰恰舞，做饭，写代码等。 你只要能坚持20个小时，基本都能入门。 （部分有生理要求和天赋可能除外， 比如唱歌🎤） ","date":"2020-12-21","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%BE%97%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:0:6","tags":null,"title":"关于知识得一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%9F%A5%E8%AF%86%E5%BE%97%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"就是一些很简单得介绍。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:0:0","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"策划 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:1:0","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"制作人 制作人一般情况下是整个项目得负责人，如果是创业公司得话，制作人可能会由老板担当。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:1:1","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"主策划 策划得头目，基本上负责整个策划部门得管理。 主策划有时候是由制作人兼任得。 在主策划和制作人是两个人得时候， 主策划往往需要听从制作人得指示做事。 不过一般情况下，制作人给得意见可能都是一个比较宽阔得，而具体细化和拆分任务是主策划得工作。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:1:2","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"数值策划 调整数值得人员，一般被主策划管理。 一般情况下，每个项目都至少有一个数值。 数值策划得主要工作职责是做装备得属性， 关卡得难度等内容。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:1:3","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"剧情策划 一般是写故事得话。 除非非常大型得项目，否则一般公司没有这个人员把。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:1:4","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"文案策划 类似剧情策划，主要是做一些起名得工作把， 可能还会有翻译得工作。 一般小公司没有这个职位。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:1:5","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"执行策划 简称， 打杂得。 基本上就是很多策划得活都做一些。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:1:6","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"系统策划 负责外围系统得功能设计，表格设计等。 一般可能和执行策划得工作是混在一起得。 工作职责大概如下： 设计一个活动 设计一个功能 （签到， 每日任务，成就等） 跟踪程序实现得进度 可能还需要对功能进行简单得测试。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:1:7","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"前端 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:2:0","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"前端主程 前端程序得头目。 一般可能负责框架得建立，功能任务得分发。 项目初期得时候可能很忙， 到了中后期应该会慢慢得闲下来。 但是也不好说， 中后期可能会去参加业务功能得开发。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:2:1","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"中高级 前端程序 主要是根据策划得需求， 来实现一些业务逻辑得功能。 大多是铺功能得， 一般不会过多得涉及框架相关得内容。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:2:2","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"初级 前端程序 一般公司可能不招这个岗位， 毕竟很多公司招人都是一年工作经验起步。 这时，笔者又想起了那副图： 我该如何在没有经验得情况下去找到一份需要工作经验得工作。。？ 😂 这个职位约等于实习生了把， 可能主要以学习为主， 开发得任务一般都比较少把。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:2:3","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"后端 后端得结构和前端类似， 这里就直接略过了。 一般情况下， 一个功能得实现需要前后端至少各一人。 前端需要和美术进行交流， 而后端不需要。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:3:0","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"美术 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:4:0","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"主美 美术部门得头头。 指导和确定美术风格，管理和分发美术任务。 因为笔者并没有和美术部分交流过。。 所以部分内容可能不准确。。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:4:1","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"特效 负责游戏内 特效得制作。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:4:2","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"原画 负责游戏内 原画得制作。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:4:3","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"动作 负责游戏内得动作制作。 人物动作， 怪物动作， 可以简单得理解成动画。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:4:4","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"模型 可能3D项目才会有这个职位， 工作内容一般是制作人物模型，怪物模型，建筑模型等。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:4:5","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"贴图 可能没有这个职位， 是笔者瞎猜得。。 😂 如果有得话， 估计一般是由原画担任得。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:4:6","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"场景 这个应该也是大型项目才有得职位，一般负责场景得建立。 组合建筑模型， npc模型， 特效等建立一个场景。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:4:7","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"测试 测试部分可能是多个项目共用得， 如果是创业公司得话， 可能是没有测试部门得，仅是一名测试。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:5:0","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"主测试 测试部门得头目。 不过似乎一般不称呼为主测试。 管理和分发测试任务。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:5:1","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"测试人员。 测试游戏功能， 报告游戏bug。 跟踪bug得解决。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:5:2","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"运营 项目开发中参与不是很大得一个部门。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:6:0","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"主运营 运营部门得头头， 似乎一般不会这么称呼这个岗位， 可能一般叫 “X哥\"得情况较多。 确定运营方向，管理任务分配。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:6:1","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"活动运营 这个职位一般和活动有关系。 会提出活动功能得需求， 在活动上线后，控制活动得开启和关闭，以及活动奖励等。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:6:2","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"客服 部分公司会把客服放到运营部门下， 部分公司似乎会把客服单独拉出来作为一个部门。 一般职责如下： 处理玩家反馈。 加入玩家群， 获取玩家得消息和给游戏做托 测试游戏 占榜。 电话回访玩家。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:6:3","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"其他 一个游戏公司大概就是这些岗位， 部分岗位是可以根据公司规模省略得。 ","date":"2020-12-14","objectID":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/:7:0","tags":null,"title":"浅谈游戏公司的各个职业","uri":"/periphery/%E6%B5%85%E8%B0%88%E6%B8%B8%E6%88%8F%E5%85%AC%E5%8F%B8%E7%9A%84%E5%90%84%E4%B8%AA%E8%81%8C%E4%B8%9A/"},{"categories":null,"content":"笔者前几天在使用cpp(c++)写代码得时候， 发现一个很蛋疼得问题， 在使用lldb进行调试得时候，程序完全正常，没有错误。 而退出调试模式， 使用命令行运行程序得时候， 则会触发内存错误。 经过一番查找之后发现， 笔者发现有些类得属性没有进行初始化。 。。 这可能是一个非常基础得错误。。 但是笔者一般写Java得时候 是不需要考虑这个问题得。。😂😂 😂 大致情况是这样得。 // 物品类， 占位使用 class Thing { } class Person { public: void take(Thing* thing){ if( m_onHand == nullptr ){ // do something .. } // do something .. } private: // 手里正在拿得东西 Thing* m_onHand; } 在调试模式下， 上述代码得属性部分 m_onHand 是一个nullptr，这会产生预期的行为。 而非调试模式下，似乎就不是一个nullptr ， 则会产生不可预期得内存错误。 😢😢😢 笔者使用得解决办法就是在声明得时候这么写： Thing* m_onHand = nullptr; 除此之外， 笔者还搜索到了一种可能性。 链接在此： https://stackoverflow.com/questions/186237/program-only-crashes-as-release-build-how-to-debug/186285#186285 下面是原文引用： In 100% of the cases I’ve seen or heard of, where a C or C++ program runs fine in the debugger but fails when run outside, the cause has been writing past the end of a function local array. (The debugger puts more on the stack, so you’re less likely to overwrite something important.) ","date":"2020-12-14","objectID":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%9C%A8%E8%B0%83%E8%AF%95%E6%A8%A1%E5%BC%8F%E4%B8%8B%E6%AD%A3%E5%B8%B8%E5%9C%A8%E5%B8%B8%E8%A7%84%E6%A8%A1%E5%BC%8F%E5%B0%B1%E5%B4%A9%E6%BA%83%E5%BE%97%E6%83%85%E5%86%B5/:0:0","tags":null,"title":"Cpp程序在调试模式下正常，在常规模式就崩溃得情况","uri":"/program/cpp%E7%A8%8B%E5%BA%8F%E5%9C%A8%E8%B0%83%E8%AF%95%E6%A8%A1%E5%BC%8F%E4%B8%8B%E6%AD%A3%E5%B8%B8%E5%9C%A8%E5%B8%B8%E8%A7%84%E6%A8%A1%E5%BC%8F%E5%B0%B1%E5%B4%A9%E6%BA%83%E5%BE%97%E6%83%85%E5%86%B5/"},{"categories":null,"content":"[噩梦人的梦呓] 我来到了一座宫殿里面，只是一个念头而已，我就来到了这座宫殿，我并不知道我是如何进来的，我只知道我现在在这里。 宫殿里有四个柱子做支撑，每个柱子上都雕刻着龙飞凤舞的图案，很是震撼。 每个柱子旁边都有一个火盆🔥，火盆放在支架上面。由于没有什么风进来，火盆里面的火苗没有什么太多变化。 柱子向外也有不少空间的样子， 但是因为没有足够的光线，所以无法看清那里到底有什么。 我的正前方有一个王座。 是的， 是一个王座。 它。。 该怎么描述呢。。。 该死，我记得不是很清楚。 它似乎镶金刻银十分富丽堂皇，又似乎没有任何装饰只是一个铁王座，有时候似乎又是一个非常简陋的木凳子。它时而真实而凝聚，时而虚幻而飘渺。 王座下没有阶梯， 是这座宫殿里面的唯一一个椅子。 老实说，虽然我不能确定这个王座的样子，但是我内心的声音却告诉我： ”你得坐上去，坐上去你就可以拥有整座天下了。“ 我知道这十分可笑，明明只是一张不能确定存不存在的椅子而已，坐上去怎么会让人得到天下呢？ 不过，这句话仿佛具有魔力一样，深深的控制住了我的思维。我几乎瞬间就深深的相信了这句话， 是的， 我打算去坐上去看看。从我的目光上来看，这个椅子离我不是很远，走几步就可以到达那儿，之后我就可以仔细的观察它到底是金子做的， 还是一个平凡的铁王座，异或别的什么。到那时，想必坐在上面也是一件轻而易举的事情。 我抬起了一只脚。 一股巨大的寒冷瞬间充斥在了我的全身上，冷的简直让我无法思考。 我的大脑里面充斥着寒冷的感觉，我不由得全身直打哆嗦。我本来就驼着的背更加的弯曲了，我的双手紧紧的抱在胸前，我慢慢的蹲下了，双手抱在双腿上，全身蜷缩成一个球状，乞求这样能让我感觉到温暖。 也不知道过了多久，我似乎终于适应了这样的寒冷，我缓慢的睁开双眼，映入眼帘的是无边的寒冰。此时此刻，我正站在一片巨大的冰床上。 周边不少高低起伏的冰壁，也有很多冰柱充斥在周围，我的身边没有太多阻挡物，冷风可以轻而易举的吹到我的身上来。 我感觉我赤身裸体的蜷缩这片巨大的冰床上面。冷风一阵阵的刮过，我就随着一次次的全身发抖。我已经完全忘记宫殿的事情了，我的思维似乎开始慢慢的被冻住了。🧊🧊🧊 我的眼睛因为发冷而感觉到疼痛，我只好闭上双眼，希望眼皮可以阻挡冷风的侵袭。 我的身体开始慢慢的变得僵硬，血液似乎要结冰了一样， 我连随着冷风发抖都已经做不到了了。 啊。 我似乎快要就这么死去了。 我突然的这么想到。 对死亡的恐惧使我的思维活跃了一些，我的大脑开始可以转动了。 我不能就这么倒下，我不能就这么死去。 我不甘心的想要睁开双眼，想要确认下环境，想要寻求生机。 可是我的眼皮十分沉重，难以睁开，好像已经冻在了一起。 我想抬起双手揉一揉眼睛， 好让眼睛能够睁开。 我的大脑下达了指令，但是什么都没有发生，我发现我渐渐的感觉不到我的双手了。 现在，我感觉到了更深刻的恐惧，无助。 我似乎无法改变死亡的结局了。 我的大脑开始混乱了，思绪开始发散，我想到了我的小时候，想到了以前暗恋的女生，想到了过去做过的蠢事，想到了许下但没有完成的承诺。 我渐渐的无法控制大脑的思维了，思维就像脱缰的野马在大脑里面乱窜。 我开始感觉到不安，恐惧，愤怒，生存的渴望，嫉妒，强大等一堆情绪，这些情绪纠结在一起，似乎想要冲破我的身体跑出来，让我感觉十分的难受。 好像我要被内部的情绪冲的破破烂烂了的一样。 突然，我的大脑一片清明，似乎所有的思绪，所有因为思绪而产生的声音都消失不见了，我感觉到非常宁静。我并不知道因为什么我恢复了理智，我只知道这理智是暂时的。 这时的我已经无法感觉到身体的各个部分，但是我仍然想，仍然尝试睁开双眼， 就算此时此刻会死亡，我也不想死在这么漆黑的意识牢笼里面。 大脑的世界时而暴躁，混乱，思维无法统一，时而理智，在我能理智的这些时间里，我会尽力的尝试睁开双眼。 似乎过了很久，又似乎只是几个瞬间。 我的身体早已冻住，没有知觉， 只剩意识在大脑里面活跃，甚至这活跃也不是特别清晰。我清醒的时间越来越少，混沌的感觉越来越多，我都怀疑我是不是早已死亡，意识早就开始准备转生或者消散了。 此时，一缕白色的光芒照进了意识的世界。 我的双眼终于睁开了一点，我能勉强的看清前面的画面了。 原来我还没有死去，活着的感觉真好啊。 虽然我已经感受不到其他部分的躯体了。 我产生了一丝乐观的念头。 视觉的恢复让我暂时的将大脑思绪稳住了，我能进行更长久的逻辑思考了。 我慢慢的睁开双眼，尽力的向远方望去，但是我的脖子仍然处于僵硬状态，我只能转动眼球。 场景似乎和我被冰冻之前并没有太大的区别，不过我能看清稍近处的蓝色的冰柱了，里面似乎有一个赤裸的人影，又似乎是别的东西。 我吓了一跳，急忙想要注视那个冰柱， 但是我始终无法确定里面到底是不是存在一个人。 我的眼睛终于承受不住压力，我的视线开始从远方回来，然后又从我的膝盖到蓝色的冻冰地面。 这时，我发现地面像镜面一样，映照出一个人物。 那个人身上穿着正常的衣物，他一只脚向前踏出并处于悬空状态，一只脚在后。 那个人的双眼空洞无神，他双臂深深的抱在胸前，全身在不停的发抖着，他似乎很冷。 诶？ 这个人不就是我吗？ 💡 这么想的瞬间，我的思维回到了身体，我抬起的脚向地面落下。 咚，一声轻响之后，我又回到了大厅里面。 支柱旁的火盆仍然在燃烧着， 大厅里面的温度并不是很低，但是我却仍然在发抖着。 慢慢的，我停止了发抖。 我的目光再一次望向王座。 ","date":"2020-12-08","objectID":"/non-menu/story-palace/%E5%AE%AB%E6%AE%BF1/:0:0","tags":null,"title":"宫殿、一","uri":"/non-menu/story-palace/%E5%AE%AB%E6%AE%BF1/"},{"categories":null,"content":"命名规范 ","date":"2020-12-07","objectID":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/:1:0","tags":null,"title":"代码规范建议","uri":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"# 1. 属性/成员 命名 静态常量属性 即使用 static final 修饰的属性， 属性名全部大写并添加javadoc的注释。 比如下面的例子 /** * 消息的线程数量 */ public static final int MSG_THREAD_NUM = 8; /** * redis 连接池的 线程数量 */ public static final int REDIS_CONNECTION_POOL_SIZE = 4; 私有的实例属性 采用 驼峰命名法。 并需要使用单行注释 简单说明下含义、 经常出现的变量名可以不写注释。 Map Or MapSubMap 需要写明 key 和 value的含义。 如果是关键字开头的命名，比如 do ,for 可用_ 下划线开头， 比如_forConsole, _doWorkTime 尽量不要使用这种关键字开头的命名 😄。 方法名采用 驼峰命名法， 并需要添加 javadoc 注释， 在必要的时候 也需要写明参数的含义。 公有静态变量， 首字母大写。 私有的静态属性采用驼峰命名法。 ","date":"2020-12-07","objectID":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/:1:1","tags":null,"title":"代码规范建议","uri":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"# 2. 选取有意义的命名 要选取有意义的名称。 下面的名称是可取的 👍👍👍 PlayerInfo getPlayer(String roleId); // 1 PlayerInfo getPlayerByRoleId(String str); // 2 下面的名称是 不可取的 🙅‍♂️🙅‍♂️🙅‍♂️ PlayerInfo getPlayer(String str); // 3 PlayerInfo getPlayerByString(String str); // 4 上述示例中， 1和2 都是自解释的方法签名， 一看就知道该方法的作用是根据roleId获取一个玩家对象。 3和4 则不是自解释的。 我们目前无法得知参数需要的是roleId 还是 roleName， 亦或是其他什么属性。 这时候如果方法还没有注释， 我们就必须要打开源代码去确认方法的作用了。 有意义的类名也比较重要。 ConfigManager 和 SessionManager 就是比较有意义的名称。 如果我们需要一个配置文件的数据，我们将会知道从ConfigManager中获取，而非SessionManager。 同样，如果我们需要给某个玩家发送消息，则我们知道SessionManager类里面应该有这样一个方法。 如果你看不懂上述说明， 则你可能需要加强一下你的英语了。 Config - 配置; 配置文件; 布局; Session - 会话; 会议; 会期; 上述内容来自 网易有道词典 相对来说， 如果把玩家会话相关的内容放到一个叫做BananaManager 的类里面， 看到的人可能就会非常困惑： 我们项目里面有香蕉吗？ 为什么要管理香蕉？ 而在使用的时候，也增加了记忆的负担。 如果一个类里面的功能过于复杂， 起一个有意义的类名 可能就比较困难了。此时，较好的做法是根据逻辑或者其他规则划分类的内容 进行重构。 还有一种做法是笔者特别讨厌的。。 即 复制代码的时候只修改内容，不修改名称。 如果一个方法的内容和你的需求类似， 但不完全相同。 首选的处理方式是 以添加参数或者拆分方法的形式进行处理， 而非复制一份，然后稍微修改下。 如果你非要复制一份进行修改， 也是可以的（非常勉强的情况下 才能视为 可以）。 当出现这种情况的时候，你一定要修改方法的名字。 比如一个在类A里方法：List\u003cPlayerInfo\u003e findPlayers(String roleId); 你将它复制到了类B里面的时候，把检测roleId的地方换成了 roleName, 但是你却没有修改方法名。 当这种情况出现的时候， 别人在使用这些方法的时候就会出错， 他们同样也会很困惑。 笔者有个同事简直更离谱，有时候方法名和方法内容会出现完全没有关系情况， 当笔者问他的时候，他会回答说『哦，我复制的』😶 😶 😶 ","date":"2020-12-07","objectID":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/:1:2","tags":null,"title":"代码规范建议","uri":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"# 3. 类似功能的方法命名 看下面几个方法 void setFlag(int v, int index); bool hasFlag(int v, int flag); void clearFlag(int v, int index); 不知道读者有没有发现， hasFlag方法的第二个参数是一个flag ，而不是一个index。 这就存在一些问题了， 在使用hasFlag的时候需要把index先转换成flag， 而其他两个方法则不需要。 笔者不建议写这样的代码。 最好把hasFlag的第二个参数也做成index。 这样可以减少误会。 ","date":"2020-12-07","objectID":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/:1:3","tags":null,"title":"代码规范建议","uri":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"其他要点 ","date":"2020-12-07","objectID":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/:2:0","tags":null,"title":"代码规范建议","uri":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"# 1.注释 规则 注释部分是一定要写的， 但是不必写的特别详细。 一般来说， 除非方法名是自解释的，否则一定要加上注释。 参数名若有歧义也需要加上注释。 类的实例属性也需要加上注释。 使用 // 的单行注释即可 类，类的实例方法， 静态方法，静态属性尽量加上注释， 注释采用 javadoc的风格。 若名称带有歧义，则一定 要加上注释。 方法内的逻辑若十分复杂， 流程较长也需要添加注释。 数据库里的数据表字段， 也需要适当的添加注释。 对于部分int类型字段， 可能需要添加释义。 比如性别： 0未知，1女，2男等 对于部分Map 类型的字段， 需要指定Key以及Value的含义。 比如玩家会话map, key: 玩家id, value: 会话信息 好处 这里用小A代指一个写了注释的同事。 在同事B接手小A的工作的时候，同事B不需要和小A有太多交流就可以完成他的工作。 这样节省了小A和同事B两人的时间。 ⏱️⏱️⏱️ 在同事B需要调用小A写的接口的时候，也不需要打扰到小A。 这同样会节省较多时间。 节省了时间意味着什么呢？ 你完全可以不用加班， 或者只需要少量加班。 当你在上班的时候空闲了下来， 你可以去学习一些新技术， 去聊天群吹水， 甚至看看小说漫画。 项目周期可能会缩短一些， 也可能会提前拿到一些奖金。 注释可以帮助小A 更好的回忆几个月之前写的逻辑。 在小A因为某些原因辞职的时候，甚至不需要写交接文档，辞职需要的时间也大大的缩减了。 虽然可能会因为交接时间变少，而在离职前做更多的工作😂 😂 其他 关于上方的注释和 右方的注释。 笔者偏好于上方的注释， 因为右边的注释在看的时候可能不太方便。 如果读者更想看代码， 而非注释， 那么注释应该写在右边。 按照笔者的分块想法， 注释和代码块往往是一起的。有时候浏览代码，看了注释就可以跳过代码块的部分了。 如果代码有bug 或者注释写的问题，这种情况是不太好。🤔 🤔 ","date":"2020-12-07","objectID":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/:2:1","tags":null,"title":"代码规范建议","uri":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"# 2.代码块 代码分块， 不要全部的逻辑写在一起， 不要写成一大坨的样子。 基本的分块逻辑是按照类别和功能划分， 比如声明语句放在一些， 一个小功能的内容放在一起。 中间使用一行空行分割。 声明语句块之外的其他代码块 应该适当的添加一些单行注释，表明下面的代码是用来做什么的。 如果可以的话， 分成若干个小方法也可以。 这样做的好处是 便于观看，修改。 （我想，你也不愿意修了1个bug,又添加了3个把。。） if,else, while, for 等关键字，都需要添加 {}用于区分。 即使关键字后只有一条语句也需要添加。 这样做会使代码风格统一， 且不会出现不必要的麻烦或者问题。 使用Idea的时候，快捷键CMD/CTRL+SHIFT+ENTER 会自动追加 {} 也不需要手动添加。 ","date":"2020-12-07","objectID":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/:2:2","tags":null,"title":"代码规范建议","uri":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"# 3. 杂项 Tab 设置成 4个空格 ， 部分IDE默认情况应该是这个，不需要修改。 2个空格和4个空格相比，笔者更偏好4个空格/tab。 毕竟手打4个空格是有点麻烦啊😆 😆 笔者觉得8个空格是很难接受的一件事， 因为实在是太长了。 但是每个项目组的要求可能不一样，如果不是规则的制定者， 那么建议读者遵循规则即可。 ","date":"2020-12-07","objectID":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/:2:3","tags":null,"title":"代码规范建议","uri":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"# 4. 空行 笔者的代码风格是比较随意的那种， 即笔者之前是不怎么在乎空行问题的。 换句话说就是， 笔者会在想空行的时候空行， 空一行，两行都有可能。 后来在一家公司工作的时候， 同事提醒我说这种格式不规范。 应该统一规范， 什么地方空行，什么地方不空行。 因为提醒笔者的是笔者的头头，所以没办法只好遵从了 😅 😅 😅 后来笔者发现， 注意了空行之后确实会显得代码比较规范。 笔者现在建议， 适当空行即可。 ","date":"2020-12-07","objectID":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/:2:4","tags":null,"title":"代码规范建议","uri":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"# 5. 代码可读性和强规范 笔者是比较排斥强规范的。 首先， 需要适应这个规范 其次， 如果换了工作， 这个规范可能就需要重新适应 再者， 这个规范并不会对逻辑产生什么太多影响。 还是那句话，如果做小弟，就只能遵守规范。。。 笔者写代码除了注意组织结构之外， 还会考虑阅读性。 笔者会为了方便阅读而刻意做一些行为。 比如， 在声明方法的时候， 如果参数所占的字符过多， 笔者会换行。 参数类型名过长，或者参数个数过多的情况。 在进行方法调用的时候， 如果参数个数较多且每个参数的表达式较长， 或者大部分的参数表达式过长， 那么笔者会使用换行处理， 每行一个参数。 在进行stream/linq方法调用的时候， 如果语句过长， 笔者偏好于每次方法调用分开写。 即一行写一个调用。 笔者认为这样更清晰。 笔者会刻意让一行的代码不要过长。 笔者的代码风格是比较松散的风格。 ","date":"2020-12-07","objectID":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/:2:5","tags":null,"title":"代码规范建议","uri":"/program/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"因为面试笔者得那个人给了笔者极其不舒服得感觉，所以笔者决定将此次面试记录下来。 公司名之类得就不透露了。 面试笔者得总共两个人， 挨个写一下流程把。 ","date":"2020-12-02","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/:0:0","tags":null,"title":"关于笔者今天面试得事情","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/"},{"categories":null,"content":"第一个人得面试 笔者并不清楚第一个人得职位， 或者笔者忘记了。。 不过在此处暂时称之为制作人。 因为制作人说他不懂技术。 聊的一般般把， 让笔者感觉突兀，奇怪得有下面几点。 ","date":"2020-12-02","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/:1:0","tags":null,"title":"关于笔者今天面试得事情","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/"},{"categories":null,"content":"一、 问了笔者未来五年得规划 笔者工作了好几年， 面试也经过了不少， 问笔者规划得公司到不多。 所以笔者表示有点strange。 当然，这可能也是一个常规问题， 只是笔者经历得较少。 笔者在这里猜测得是： 判断笔者会不会在这里工作很长久，以及笔者得性格等。 笔者得回答比较简单： 笔者是个俗人， 比较想要金钱越来越多。 技术上，笔者得谷歌技术已经到达一个驴火纯青得地步了，所以一般上来说没有碰到太多得技术问题。 而且笔者得技术偏好已经从探索变成了实用派系， 快速开发才是真事， 又不是研究院院士， 搞那么多算法没必要。 （实际情况当然不是这么说得，知识大意差不多是这样 😂 😂 😂） 制作人又问： 你有什么喜欢得书，或者电视剧吗？ 什么时候开始喜欢得？ 因为什么喜欢得？ 喜欢多久了？ 笔者回答： 没有。 因为笔者确实没有。。 😂😂😂 ​ 之前在别的文章里提到过， 笔者略微有一点抑郁症， 所以对大多数事情都不感兴趣。 ","date":"2020-12-02","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/:1:1","tags":null,"title":"关于笔者今天面试得事情","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/"},{"categories":null,"content":"二、 谈论薪资得时候 制作人： 你得期望薪资是多少？ 笔者： N 到 M 把 制作人： 你的期望就是N 把？ 笔者当时就震惊了， 笔者得期望确实是 N-M啊。。 笔者只有在极其劣势得情况下才会选择N 。 笔者并不知道是不是行业就是这样得， 笔者得想法是， 看看公司有没有诚意。 如果每家公司都是这样得话， 笔者会考虑提高价格，让对方砍一下。 如果笔者有机会创建自己得公司得话， 肯定会薪资透明，完全透明。 ","date":"2020-12-02","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/:1:2","tags":null,"title":"关于笔者今天面试得事情","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/"},{"categories":null,"content":"三、你觉得后端最重要得是什么 笔者是第一次听到这个问题， 下意识得回答了“稳定”。 ","date":"2020-12-02","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/:1:3","tags":null,"title":"关于笔者今天面试得事情","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/"},{"categories":null,"content":"四、 上班时间 制作人： “我们早上10点上班， 晚上9点走， 大小周。 中午休息2个小时，晚饭1个小时。” 笔者：“好的”。 这里吐槽一下这个工作时间， 这样真的不如中午休息1个小时， 下午7点走。 笔者这里恶意得猜测一下， 有两种可能： 午休或者晚饭得时候有人来烦你， 让你做点其他东西。 为了以后缩减休息时间做准备。 笔者最近得面试基本都是这种工作时间， 比996稍好，但是好不到哪里去。。 阿西吧 😢 ","date":"2020-12-02","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/:1:4","tags":null,"title":"关于笔者今天面试得事情","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/"},{"categories":null,"content":"五、Demo部分 笔者： 项目是否已经过了Demo阶段？ 制作人： 我们使用视频做Demo， 这样成本较小，弄出来得速度也比较快。 使用程序做Demo，需要消耗得时间，精力，成本较大， 而且可能会得到不想要得结果。 笔者： 团队现在总共几个人？ 制作人： 4个 笔者： 团队现在没有技术吗？ 都是策划和美术？ 制作人： 是得。 笔者认为，这种情况下是非常危险得，因为前端后主程往往很大程度上决定了产品得质量。而且他们得想法并没有和技术沟通过。。 ","date":"2020-12-02","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/:1:5","tags":null,"title":"关于笔者今天面试得事情","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/"},{"categories":null,"content":"第二个人得面试 这个人是面试技术得。 暂且称之为面试官把。 面试官刚开始问了笔者得学历，是哪里人。 也勉强算很常规把。 之后 面试官问笔者后端在和前端交流得时候使用得什么协议？ 笔者下意识回答道protobuf。 我们项目使用得主要协议就是protobuf。 其实没太大问题。 面试官听到笔者得回答之后就用恨铁不成钢得语气和我说：“你一个协议直接扔给前端吗？” （只是大致内容，具体对话 笔者记得不是很清楚， 下面得内容都类似。） 笔者听到这句话， 情绪一下就起来了。 笔者面试这么多， 这样得情况倒是第一次见。 面试官得语气下透露着一股暴躁和不耐烦得情绪， 不知道觉得笔者浪费了他得时间。 此时，笔者观察了一下面试官得样貌。 （此处并不恶意，这是描述下。） 面试官应该30~35岁左右， 白头发不少，双眼充满血丝， 神志略微有点不清晰，以及大多数话语里面充满了暴躁，或者是鄙视得情绪。 可能面试官在一边看简历， 一边和我聊天，因为分神了，所以给我一种他有点神志不是很清晰得感觉。 后来笔者回忆了一下，又回复给面试官说，我们使用得是自定义协议，大概按照长度，命令，protobuf协议这样得排列顺序。 之后面试官没有接话，就问了下一个问题。 下面就几个面试官问我问题做一些闲聊。 ","date":"2020-12-02","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/:2:0","tags":null,"title":"关于笔者今天面试得事情","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/"},{"categories":null,"content":"你用得技术都是五年前得了，现在都不这样做了 是得，面试官在面试得时候这么和我说了。 非常明显得优越感。 当时得情况是 笔者描述了一下笔者在做塔防游戏得时候所使用得技术。 那个塔防游戏是笔者得第二家公司，当时在2016年得时候做得， 笔者当时一个人负责得战斗内容， 因为主程基本不管事，纯混。实现得方式参考得是minecraft 服务端得实现方式， 采用实体和tick得方式做。 塔防游戏， 肯定可以做成房间得形式来计算。所以笔者选择用1个线程tick N个房间，怪物，主角，塔得行为都是由tick驱动得。 当笔者描述完了之后， 面试官说 “这已经是五年前得技术了， 现在都不这样做了。我们给怪物挂定时器。” （笔者得记忆力是真的差，所以具体内容忘记了，但是肯定是类似得内容）。 笔者询问了一个在盛趣做后端得朋友(cpp) ，他得大致说法是 当怪物比较少得时候，挂定时器到怪物身上勉强还是OK得，但是当怪物到达10W个怪得时候，定时器得性能消耗就非常巨大了。 当然，由于笔者并不知道面试官所选用得框架是什么样子得 ，而且笔者并不清楚面试官得项目有没有上线，所以不好明确得辩论。 下面是笔者得朋友得一些言论得节选： 其实我这边之前就是用定时器来驱动 ai 的 定时器是时间轮的实现，本身是非常高效的 但是后面性能测试，发现巨量定时器，会对服务器的整体处理能力形成极大的挤压 最后我们把每个怪一个定时器，简化成了一个地图一个定时器 性能得到了极大的提升 这就是一个定时器本身的处理消耗 1微妙，定时器触发后的业务逻辑消耗 5 微妙 那么 10w 个怪，10w 个定时器触发，光定时器本身的处理就要消耗 100 毫秒的时间 要是 1 秒 ai 触发 3 次，那一秒里有 300 毫秒都在处理定时器本身的消耗 让笔者想吐槽得除了面试官得给怪物挂定时器之外， 还有他得话语和口气。 笔者是来面试得，又不是来问他要钱得，笔者之前也不认识他，也并没有占他便宜。。 笔者感觉就很怪。 除此之外， 五年前得技术难道不是技术吗？五年前得技术是不能实现需求还是有明显得漏洞？ 如果笔者问这句话，估计面试官会回答说：“你得学习新技术啊， 了解新知识啊。” 面试官也并没有说明新技术有什么明显得优点。 ","date":"2020-12-02","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/:2:1","tags":null,"title":"关于笔者今天面试得事情","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/"},{"categories":null,"content":"如果让你做一个任务系统， 你需要几天？ 面试官： 如果让你从零开始做一个任务系统， 你需要几天？ 笔者： 之前说得那个具有任务列表， 可以完成得那个吗？ 面试官： 嗯 笔者： 这得分情况看。。。 面试官打断了笔者得话，说： 你直接告诉我需要几天就可以了 笔者： 用我上家公司得那个框架，开发加自测，大概两三天把。 笔者感觉面试官对于笔者得谈话有点不耐烦得感觉， 非常急躁。 原因未知。 笔者并不能确定他说得从0开始是什么。 整个框架都没有？ 还是已经有了？ 框架有得情况下， 工具类是否都充足？ 使用CPP 还是JAVA？ 任务功能所需得其他前缀是否都存在？ 上述得每一个答案得不同 都影响工时。 笔者上家得框架是一个较为完善得框架， 做任务功能所需得各种前置都已经满足了，而且还是笔者所熟悉得JAVA语言， 所以开发起来非常快。 ","date":"2020-12-02","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/:2:2","tags":null,"title":"关于笔者今天面试得事情","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/"},{"categories":null,"content":"你懂排序算法吗？ 作为一个JAVA程序员， 这方面用的极少， JDK自带了排序算法， 所以都没有怎么了解过。 笔者曾经在自学cpp 得时候了解过一些，但是基本都忘记了。 之后 面试官又问了， 树算法你知道吗？ 当然， 笔者对于这个也是七窍通了六窍 —— 一窍不通。 除了上述得内容之外， 面试官还问了笔者 关于生成 如何生成UUID 得算法。 大致对话如下： 你知道怎么生成唯一id 吗？ 笔者： java有自带得， 还有mongodb 得链接库也带一个生成唯一id 得接口 研究过具体得实现吗？ 笔者： 没必要重复造轮子啊 没让你造轮子啊， 只是你看他们的算法， 知道了， 就能再别的场景上应用。 笔者觉得面试官这里说的内容是对得， 但是他得语气并不是很好。 当然，这里再小小得反驳一下。 在一般情况下， 笔者会去查看碰到得，或者需要得内容，很明显，笔者并不需要知道如何生成UUID ， 所以就没有了解过。 这和笔者得工作策略也有关系， 笔者一般不太喜欢重复造轮子， 某个功能已经存在了之后，笔者一般不会去深究它， 因为笔者觉得没必要， 完全可以把这部分时间用于做其他得事情。 面试官透露了自己懂得很多算法得背景， 无情得藐视了我。 😂😂😂 CPP 程序员在面试得时候，这些算法可能都是需要了解得。 ","date":"2020-12-02","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/:2:3","tags":null,"title":"关于笔者今天面试得事情","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/"},{"categories":null,"content":"如果一个网关同时在线100W玩家，该怎么处理无效连接 面试官得提问， 他还附加了规则： “不能使用心跳包， 因为100W个心跳同时进行性能消耗太大了。这里有一个算法。” 笔者： “不能使用多个网关划分压力吗？ ” 面试官： “这题得限制就是1个网关， 有一个算法得。” 笔者考虑了一会， 回答：“我想不出来。。” 因为笔者最近几年得状态不太好， 很难做空中楼阁得思考，笔者平时在思考得时候极度的依赖纸笔。 当然，就这题来说，有纸笔 笔者也做不出来。 目前来说，笔者就一个想法，记录最后一次收到客户端包得时间，然后检测时间做超时。 不过这种做法也是来源于心跳得， 如果没有心跳得话，这种做法不是很准确。 这里有一个吐槽： 到了最后， 面试官也没和我说这个算法到底是啥算法。。 这里有一个关键吐槽： 这题基本上来说完全没有现实意义。因为就像笔者说得，可以使用多网关得方式来分割压力。 其次， 100W同时在线， 做到这项壮举得 自古至今有多少游戏？ 能有1W人同时在线就非常值得乐呵了。 这里可能有读者认为笔者没有理想， 笔者只是说出自己知道得现实而已。 我们从另外一个思路来考虑这个问题， 加入1个网关同时在线100W玩家， 然后假设每个玩家1秒钟得流量是5K， 则 一秒钟得总流量是“500W KB” ， 换算为 “4882.81 MB” ，即 “4.76 GB” 。 目前有哪个机器得带宽有这么高吗？ 如果要换算成比特得话，则为： “38.14 Gb/s” 。 而这知识假设5K， 如果波动到10K得话， 带宽需要就翻一倍。 关于单机得CPU算力和内存 应该更不需要讨论了。 ","date":"2020-12-02","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/:2:4","tags":null,"title":"关于笔者今天面试得事情","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/"},{"categories":null,"content":"关于让笔者学习实现原理得内容 笔者认为实现原理这个东西，可以了解， 也可以不了解。 了解一下，增加自己得知识，技巧， 是好事。 但是如果你用不到这些技巧，学习得过程所需要得时间就浪费了。 当然，如果你享受学习得过程，那么你可以学习。 不了解实现过程， 并不会影响你使用这个接口。 你把这部分时间用于做更多得业务， 缩短开发周期， 或者用于自己感兴趣得事情不好吗？ 笔者除非在某种情况下， 需要某种算法， 但是又没有实现，才会尝试自己去实现。 笔者以前对技术抱有兴趣， 但目前得情况下， 兴趣则比较少了。 原因很简单， 兴趣并不能赚钱，生产才能。 这里并不是说钻研技术不能赚钱，而是想表达 钻研技术比较难以赚钱。 因为你很可能在钻研是他人实现过得内容，这部分内容你再重新实现一遍， 并不会产生新的价值。 ","date":"2020-12-02","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/:2:5","tags":null,"title":"关于笔者今天面试得事情","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/"},{"categories":null,"content":"结尾 面试官在面试过程中有一种一直在教育笔者得感觉在里面，这也让笔者极其不舒服。 ","date":"2020-12-02","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/:2:6","tags":null,"title":"关于笔者今天面试得事情","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/"},{"categories":null,"content":"其他 ","date":"2020-12-02","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/:3:0","tags":null,"title":"关于笔者今天面试得事情","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/"},{"categories":null,"content":"KISS 原则 这让笔者在能选择简单得时候 绝不想选择麻烦得道路，这样虽然很可能会导致笔者得思考能力越来越下滑，但是笔者在大部分时间得思考都比较简单，这样很多问题就不会出错，而且效率会较高。 虽然各种算法都是在解决实际得问题，学习算法应该可以在解决问题得时候提供更多得思路。 但是，笔者能够独立得解决自己得问题（指谷歌） ，也不需要追求什么极致得性能，也不需要开创新的算法，也不需要实现指定类型得算法，所以学习算法对笔者来说用处不大。 ","date":"2020-12-02","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/:3:1","tags":null,"title":"关于笔者今天面试得事情","uri":"/caprice/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%80%85%E4%BB%8A%E5%A4%A9%E9%9D%A2%E8%AF%95%E5%BE%97%E4%BA%8B%E6%83%85/"},{"categories":null,"content":"因为有不少公司都实行996工作制，笔者想对996的工作时间发表一些浅谈。 众所周知， 996就是朝九晚九，一周六天班。 至于谁先开始的，怎么流行的，笔者并没有仔细考虑过，所以笔者决定跳过这部分。 当然，996相关的文章较多，大家都可以在网上搜索一下， 看一下。 笔者在本篇并不批判996，只是想尝试说明一下相关的利弊。 ","date":"2020-11-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E996%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:0:0","tags":null,"title":"关于996工作时间的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E996%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"闲谈 关于工作时长 996相对于965， 意味着工作时间的大幅度增加， 一周大约增加工时27个小时。 (12*6 - 9*5) 27个小时， 相对于朝九晚六的时间来说，每周要多上3天班的工作时间。 996的理论基础应该是：随着工作时长的增加，产出也随之增加。 如果实行996的公司违背了这个基础，应该就可以说是该公司是为了加班而加班。 至于为了加班而加班的理由则较多了。 下列仅列出一些初创公司老板可能的想法和偏好。 阿里，腾讯，华为实行的政策，会有错误嘛？ 人家加班，我们肯定也要加班才有机会生存 公司老板不愿意深度思考，盲从行业领头的做法。 我付那么多钱给这些员工，他们不加班对得起我吗？ 因为上述想法，或者上述想法的类似想法而决定让公司加班的老板，笔者认为他们稍微有点不负责任。 笔者认为： 在965的公司突然切换到996之后，可能会有一段时间的产出提升，但之后，产出将随时间下降。 至于下降后的产出会比在965的时候是高还是低，不同公司应该不太一样。 这里的背后的原因是 身体能力随着长时间高负荷工作而产生的下降。笔者前些天去一家公司面试， 该公司实行996的工作制， 带笔者面试的那个人， 笔者对其的印象就是： 非常浓厚的黑眼圈。 还有一个网友，该网友长期在996的公司工作， 有次闲聊的时候他说，运动之后会感觉大脑明显变得清晰多了。 这说明他可能长期处在一个大脑不是那么清晰的工作状态下。 有趣的是，这种工作状态下，人仍然是可以工作的，只是产生BUG的可能性也比较高。 （有时候，尽管你不知道自己在做什么， 但是你仍然可以工作😂 😂😂 只是出错的可能性更高了。) As we all know, 产出 = 工作效率 * 工作时长 如果员工在996的时候划水， 则效率将进一步下降。 ","date":"2020-11-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E996%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:1:0","tags":null,"title":"关于996工作时间的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E996%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"996对公司的作用 这个其实较为简单。。 产出增加， 公司盈利增加， 老板更快的买车买房。。。 如果公司是大型公司，或者中型公司，那么高层和中层应该也会加快的买车， 买房的进程。 笔者在BOSS直聘上寻找工作的时候，和一个创业的老哥在聊天的时候，他说了一句这样的话： 一个游戏行业的初创团队，朝九晚五，不就等着解散吗？ 这句话令笔者完全无法反驳。。 因为笔者虽然在好几家965的公司工作过，但是确实没有在一家盈利的965公司呆过。。 不过，就算这样， 笔者仍然觉得创业公司是否能盈利和965并没有直接的关系。 创业公司实行996工作制，对打工人来说其实非常不利。 因为就算996，公司该倒闭还是得倒闭， 公司如果盈利了，拿绝大部分利润的是老板，不是小员工。 996只能增加工作时长，不能增加智商，更不能增加有效的策略和知识。 （当然，如果你有大部分时间可以用于学习，则可以增加知识。） 笔者认为， 初创公司能否存活下来，有很多因素在内。 （这里只讨论下游戏公司） 几只雄狮带领几只绵羊的人员划分会比较合理。 如果雄狮不够高大威猛， 失败的几率则会显著提升。 程序的执行能力。 再好的想法，创意， 实现不了都是扯淡，毫无作用的。 策划的想法，表达，组织能力。 程序的执行能力够， 也经不住策划的折腾。 做了删， 删了又要， 要了又删，完全浪费所有人的时间。 策划的想法不够完善，整个游戏充满了不协调的感觉，以及比较傻逼的玩法等，也会导致项目失败。 老板的眼光，策略，用人技巧等。 行情。 笔者认为创业公司确实需要非常快速的创造第一个收入来源，但笔者认为项目的成败基于很多原因，996能增加的胜算并没有那么大。 ","date":"2020-11-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E996%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:2:0","tags":null,"title":"关于996工作时间的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E996%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"996 对 个人的作用和影响 这里可能要分为几个部分来谈论一下。 ","date":"2020-11-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E996%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:3:0","tags":null,"title":"关于996工作时间的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E996%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"一、能力 能力肯定会提升的，只是幅度可能会相当有限。 能力的提升依赖于工作， 但是同时也依赖于学习。 在没有学习的情况下，重复的做着相同的工作内容，能力提升将会十分有限。（比如，在部分互联网公司内部做增删改查。） 如果你的工作内容有不少你以前没有接触过的， 那么你将获得学习机会， 充分利用机会， 你就可以学习更多的知识，能力将得到提升。(exp +1) 但是，如果你愿意自学的话， 965学习到的知识 一般来说肯定要比996学习到的多。。 当然，很多人在下班后喜欢玩游戏，看视频等， 学习的不多。 但是如果某人真的学习了，那么他学习到的知识也可能会增加工作上的效率，这是无疑的。 ","date":"2020-11-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E996%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:3:1","tags":null,"title":"关于996工作时间的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E996%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"二、身体 一般来说，笔者认为身体素质肯定会每况愈下。。 因为下列原因： 将没有足够的时间运动， 甚至完全没有时间运动。 没有足够的时间社交（虽然有时间也不一定会进行社交活动。。 但是至少在有时间的情况下，想去是可以去的。。 ） 时间久了就会得 职业病。 （这里需要注意一下，很多职业病可能会发展成慢性病。 慢性病是什么意思？ 就是目前来说很难，甚至是无法治好的疾病。） 之前聊过，健康的身体一般需要合理的运动，休息， 健康的饮食。 运动除了会影响健康之外，还会影响大脑的思维清晰程度。 笔者认为： 良好的社交活动可以增加心理健康。 参考阅读： 程序员可能的职业病 ","date":"2020-11-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E996%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:3:2","tags":null,"title":"关于996工作时间的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E996%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"三、薪资 一般情况下， 996的工作时间，并不会额外付钱， 付的钱只是谈好的薪资。 就笔者的情况，从965切换到996， 如果涨薪在3K左右的话，时薪是降低的。 而且，想要薪资上具有竞争力， 还是要不断学习，要不断进步，最好能做出一些服务很多人的产品或者组件，而这可能需要被996剥夺掉的那部分时间。 试想一下， 如果你在996工作的时候，一天工作那么久，回到家之后全身疲劳，只想倒头就睡，哪有机会学习？ 而不学习 很容易失去竞争力。 ","date":"2020-11-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E996%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:3:3","tags":null,"title":"关于996工作时间的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E996%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"结论 如果你在初创公司， 很可能会出现你奋斗几年，老板买车买房了， 而你落得一身病。 除非所有的奖金全部写在劳动合同里面， 否则你的奖金没有太多保障的。 虽然我这么说有点悲观， 但是有相当的可能性在里面， 所以笔者认为996在没有签订合法协议的情况下，是一笔不划算的买卖。 但是现在迫于形势， 很可能如果不去996的公司，就找不到工作，也是令人相当难受的。 就算996是奋斗，笔者认为那个奋斗的结果可能和你想的也不太一样。 下面贴出来一部分笔者觉得有道理的内容。 以下是高金波老师写的文章的一部分，贴上来与大家共勉。 “工作996，生病ICU”，是最近全民热议的话题。 但全民的热议却并未让传统科技公司冷静下来，认真反思到底什么是创新？反而抛出了“加班是一种福气！” 到底创新是什么？ 发明流水线的福特汽车给出我们的答案是这样的。 1、工资翻倍，普通工人的周薪由每周2.5美元涨到5美元，年收入可以购买一辆T型车。当时，汽车在全球范围还属于奢侈品。 2、工时减半。由全天工作13小时降至8小时，由没有休息时间变成双休。 福特汽车的举措，让其他企业被迫跟进，使全社会劳动者的时间减半，薪酬翻倍，美国成为车轮上的、最富裕的国家。 社会效率=总产出/总工时，如果我们付出的总工时下降50%，产出不变，意味着我们的社会效率提升100%。 反之，如果我们的企业在科技公司的影响下，大家都跟着加班加点，付出的总工时增加50%，产出不变，意味着我们的社会效率下降33%。 因此，996.ICU本质是一种竞底，而非奋斗。 – 上述内容来自 https://www.jianshu.com/p/4ee9f031cc95 的评论部分 ","date":"2020-11-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E996%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/:4:0","tags":null,"title":"关于996工作时间的一点闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E996%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"笔者曾经有几年的时候感觉人生没有意义，甚至目前来说，笔者感觉到的人生意义也不是特别大。 本文纯属有感而发，毫无根据而且比较肤浅，请读者仅当参考阅读。 ","date":"2020-11-23","objectID":"/caprice/%E6%B4%BB%E7%9D%80%E7%9A%84%E6%84%8F%E4%B9%89%E7%9A%84%E9%97%B2%E8%B0%88/:0:0","tags":null,"title":"关于失去了活着的意义的闲谈","uri":"/caprice/%E6%B4%BB%E7%9D%80%E7%9A%84%E6%84%8F%E4%B9%89%E7%9A%84%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"我感觉到人生/活着失去了意义 我现在什么都不想做，我感觉我的人生已经失去了意义。。。 我感觉我活着没有什么意义了。。 我要寻找生活的意义。。 意义到底是什么呢？ 为什么人生会失去意义呢？ 我们的人生本来是否具有意义？ 这三个问题的答案， 笔者并没有仔细的思考或者研究过。 笔者这里谈论的，说的，只是一些想法。 在笔者看来，人生的意义，在此处，从某种角度上来说约等于行动的动机。 失去了人生的意义， 往往就变得失去了行动的动机，这个行动可以指任意行动， 也可以指全部的行动。 ","date":"2020-11-23","objectID":"/caprice/%E6%B4%BB%E7%9D%80%E7%9A%84%E6%84%8F%E4%B9%89%E7%9A%84%E9%97%B2%E8%B0%88/:1:0","tags":null,"title":"关于失去了活着的意义的闲谈","uri":"/caprice/%E6%B4%BB%E7%9D%80%E7%9A%84%E6%84%8F%E4%B9%89%E7%9A%84%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"某类人 有一类人可能较为容易失去活着的意义， 因为他们对活着的意义的感受一直不深刻。 这类人存在下列特点： 他们不能很好的表达自己的需求 在童年的时候，他们的需求并没有被良好的满足。 上面说过， 笔者认为活着的意义往往表示行动的动机，而动机往往来自于内心。 换句话说，当一个人想做某事的时候，他基本上就有了做某事的动机。 反过来看， 当一个人不想做某事的时候， 他基本上就没有了做某事的动机。当一个人各种事情都不想做的时候，他就失去了活着的意义。 而这类人不能很好的表达自己的需求，他们行动的动机在某种角度上来看是较为微小的。 下面列举下他们可能的心理活动： 如果我要求XX做某事的话，他估计会拒绝的， 还是算了把 考试拿高分啊？ 这肯定很难，我做不到的。。 这类人很可能会经常自我否定， 这是相当严重的自我限制思维，同样，这也会削弱他们的动机。因为我们为什么要去做一件我们不可能完成的事情呢？ 为什么要去做一件让自己丢脸的事情呢？ 尽管那些事情可能是很简单的事情。 这里笔者有一句话想说一下： 我们来到这个世界上，不是为了满足他人需求的。 无论他人是陌生人，还是我们最亲近的人。 请在合理的范围内坚持自己的需求。 这类人 这是一个分类后的表示，并无他意。 ","date":"2020-11-23","objectID":"/caprice/%E6%B4%BB%E7%9D%80%E7%9A%84%E6%84%8F%E4%B9%89%E7%9A%84%E9%97%B2%E8%B0%88/:2:0","tags":null,"title":"关于失去了活着的意义的闲谈","uri":"/caprice/%E6%B4%BB%E7%9D%80%E7%9A%84%E6%84%8F%E4%B9%89%E7%9A%84%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"因为XX，所以句式 我失恋了，失去了她/他， 我的人生已经没有意义了 我的公司破产了，我一生的心血毁于一旦， 我的人生没有意义了。。 上述情况，往往是因为某些事 而失去了人生的意义。 下面做一些简单的分析： 失恋了，天塌了。 此时因为心理，生理的变化导致某人什么都不想做，所以可以说那个人暂时失去了全部行动的动机， 所以他会感觉失去人生的意义。 因为事件总会过去， 明天总会到来， 除了死亡和不可逆的生理性病变之外，大部分事情都会过去。 所以美好的一天总会到来，仅仅是需要点时间而已。 当这天来临的时候，曾经失恋但是乐观的人很可能会说“我的人生现在充满了意义！” 😄😄😄 公司破产了的情况和失恋可能不太一样， 因为公司破产了可能会出现欠债的情况。 欠了巨大的债务，不知道什么时候能还清， 不知道什么时候能翻身。 对于这种情况，那个人不光需要走出心理的巨大打击，还需要走出经济上的巨大债务。 这是非常困难的一件事，很可能会导致一个人失去全部的行动动机。 从俭入奢易，由奢入俭难。 过惯了有钱人的生活， 变成穷人 可不好过。 如果那个人觉得他肯定会东山再起， 那么他可能就不会感觉到人生失去意义。 ","date":"2020-11-23","objectID":"/caprice/%E6%B4%BB%E7%9D%80%E7%9A%84%E6%84%8F%E4%B9%89%E7%9A%84%E9%97%B2%E8%B0%88/:3:0","tags":null,"title":"关于失去了活着的意义的闲谈","uri":"/caprice/%E6%B4%BB%E7%9D%80%E7%9A%84%E6%84%8F%E4%B9%89%E7%9A%84%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"如何找回活着的意义呢？ 尝试寻找生活中美好的事情， 培养一些喜欢的活动。 玩玩电脑游戏，学习学习音乐，跳舞啥的。 在合理的范围内坚持自己的需求。 如果可以的话， 请避免饮鸩止渴。 ​ 做一些自己由衷感觉到开心的事情把。 这件事可能较为难以寻找， 但是绝对值得寻找。当你感觉到活着真好的时候， 你应该就已经找回了活着的意义。 ​ 请注意： 在网络上发表文章一般是不需要负责任的。 ","date":"2020-11-23","objectID":"/caprice/%E6%B4%BB%E7%9D%80%E7%9A%84%E6%84%8F%E4%B9%89%E7%9A%84%E9%97%B2%E8%B0%88/:4:0","tags":null,"title":"关于失去了活着的意义的闲谈","uri":"/caprice/%E6%B4%BB%E7%9D%80%E7%9A%84%E6%84%8F%E4%B9%89%E7%9A%84%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"刚发售就订购了的 Air4 ，最近使用了一段时间， 来写写感受。 其实是实在不知道博客写什么了，来凑的内容😂😂😂。。。 ","date":"2020-11-16","objectID":"/periphery/ipad-air4-%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E5%BE%97%E6%84%9F%E6%83%B3/:0:0","tags":null,"title":"iPad Air4 使用了一段时间后得感想","uri":"/periphery/ipad-air4-%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E5%BE%97%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"随便说说 我购买的主要目的是： 看番剧和漫画，以及偶尔看看股票。 基本来说， iPad已经满足了我的需求。 我也买了手写笔， 目前主要画趋势线的时候用一下，平时不怎么用。 笔者没学过画画， 也没准备用这个做笔记。 因为笔者这个人的好奇心比较严重， 所以用了一段时间之后就想看看iPad还能做些什么。 所以去知乎、谷歌搜了搜，发现似乎大多数推荐的用途都是上课和做笔记。 笔者不是学生，一般不看网课什么的，所以使用iPad记笔记对笔者来说没啥吸引力。。 笔者学习新知识的时候一般选择看书的方式，在看书的时候如果有什么想法会使用手机记录下来（使用一个叫做Day one 的日记程序）。 笔者突然想找点游戏玩玩（估计也是找一找，下一下，然后不玩。。因为没什么时间）。 不搜不知道， 一搜吓一跳。 完全没看到什么好玩的游戏。。 笔者想找那些单机的RPG类游戏， 然后发现大多数的推荐都是一样的几种游戏， 感觉都不是很好玩。 不少被推荐的游戏都是像素画风，笔者不喜欢这类，笔者较为喜欢3A画质类的游戏。 后来，笔者和朋友聊天的时候，无意间听到朋友说“iPad不就是个大号的手机嘛”。笔者考虑了一下，觉得这句话说的也对啊， 把iPad当成一个大号的手机使用也不错。 然后就把 社交工具，邮件工具，斗鱼等下载了一下，又安装了Trello 等工具。 最近，笔者突然想起来一个叫steam link的应用可以用于流式传输玩游戏。简单来说就是，我在自己的电脑上安装steam，然后下载几个想玩的游戏到电脑上。 在 iPad上安装steam link这个应用， 设置好之后就可以在iPad上玩电脑的游戏了。 笔者试玩了一下 奥日与黑暗森林，感觉还可以， 没有出现什么卡顿的现象，操作也较为流畅。笔者使用的是屏幕上的虚拟手柄， 这样的好处是可以把iPad拿起来玩。 当然也可以使用xbox手柄， ps手柄等。 注意： iPad和电脑要处于同一局域网下，连接速度最好要大于100M。 在这种体系下，笔者推测 iPad充当的角色为： 显示器+音频播放器+控制输入， 实际的运算还是PC上完成的。（可能绝大多数的云游戏都是这类把。） ","date":"2020-11-16","objectID":"/periphery/ipad-air4-%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E5%BE%97%E6%84%9F%E6%83%B3/:1:0","tags":null,"title":"iPad Air4 使用了一段时间后得感想","uri":"/periphery/ipad-air4-%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E5%BE%97%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"保护方面 笔者购买了保护套和钢化膜， 下面简单的谈谈这两个东西。 ","date":"2020-11-16","objectID":"/periphery/ipad-air4-%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E5%BE%97%E6%84%9F%E6%83%B3/:2:0","tags":null,"title":"iPad Air4 使用了一段时间后得感想","uri":"/periphery/ipad-air4-%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E5%BE%97%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"钢化膜 这玩意像镜子一样， 当屏幕是黑色的和镜子的区别不是特别大。 在使用的时候，部分情况下，也很像镜子， 反光严重， 影响使用。 好处呢就是，在目前的情况下，我感觉指纹不是特别多了，而且现在不怕擦， 用卫生纸沾点水在上面擦擦也完全不担心了。还有就是边吃饭边使用iPad的时候不怕油飞到屏幕上了。 ","date":"2020-11-16","objectID":"/periphery/ipad-air4-%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E5%BE%97%E6%84%9F%E6%83%B3/:2:1","tags":null,"title":"iPad Air4 使用了一段时间后得感想","uri":"/periphery/ipad-air4-%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E5%BE%97%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"保护套 这玩意真重， 感觉重量和iPad本身不相上下，甚至可能比iPad还重。 好处嘛，因为选择的是定制的，所以我觉得自己选的图都很漂亮。 其次可以让屏幕站起来， 在放在桌子上和床上的时候比较方面，不用手拿。 将保护套合上的时候，可以防水防尘把。 ","date":"2020-11-16","objectID":"/periphery/ipad-air4-%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E5%BE%97%E6%84%9F%E6%83%B3/:2:2","tags":null,"title":"iPad Air4 使用了一段时间后得感想","uri":"/periphery/ipad-air4-%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E5%BE%97%E6%84%9F%E6%83%B3/"},{"categories":null,"content":"总结 目前，笔者考虑减少在电脑前面坐着的时间，而iPad看起来是一个不错的工具。 相比 MacBook pro ， iPad尺寸比较小，重量比较轻，较为方便。 浏览器在默认情况下访问都是查看桌面版网站。 看推特，新闻，股票K线的时候 用起来感觉都还不错。 看漫画， 番剧比手机爽多了 可以拿到床上使用。 （ 据说在床上使用这类工具，会影响入睡，笔者暂时不确定真假） 可以串流玩部分电脑游戏。 （虽然一般也就玩玩手柄支持的单机游戏，但比没得玩强多了。） 看B站视频， 看直播。 综上所述， iPad可以做不少电脑可以做的事情， 不过因为屏幕较电脑来说稍小，所以部分应用可能没有电脑上的观感好。 这里笔者不推荐读者购买或者不购买， 因为我觉得都可以，因为iPad的价格不算低。 如果读者是一个强迫症患者，中意了iPad并且又有能力购买的话， 估计大概率会购买。 因为没买的时候可能会一直想着，念叨着。。 就笔者来说，iPad肯定是无法代替电脑的，因为笔者是个程序员， 而流行的IDE在iPad上基本都没有。 其次，笔者觉得iPad上打字不太方便（笔者没有接蓝牙键盘的打算）。 对了， iPad还有一个致命的缺点， iPad似乎无法安装第三方应用，以及应用都没有插件体系。虽然笔者使用的插件不多，但是如果不能安装插件则会使笔者非常头疼， 而iPad上的chrome就完全无法安装插件， 所以 笔者现在在iPad上使用chrome的时候只会进行一些简单的搜索行为。这让我有一段时间在考虑是否要购买一个新的surface。 参考阅读： Kindle的一些简单介绍 ","date":"2020-11-16","objectID":"/periphery/ipad-air4-%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E5%BE%97%E6%84%9F%E6%83%B3/:3:0","tags":null,"title":"iPad Air4 使用了一段时间后得感想","uri":"/periphery/ipad-air4-%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E5%BE%97%E6%84%9F%E6%83%B3/"},{"categories":null,"content":" 自利代表你由权利为了自己而生存。它不代表你可以伤害别人，也不代表你必需舍弃心爱的人以满足自身的需求，更不代表你可以为了自身利益而剥削他人。 ​ 来自 《专业投机原理》 维克托·斯波朗迪 我以前总觉得自利是一个贬义词，当然自私也是。 但是在我接触了上述概念之后，我的想法发生了一些改变。 ​ 下面的 自私，自利的含义都是常规含义， 和上述引用的内容含义不相同。 一般来说，我们很少说自己 自私，自利。 我们都是指责别人自私，自利。 这些指责的潜台词应该是“你应该帮助我， 你应该分享你的东西给我， 等等” 。 这些潜台词的含义是让他人对我产生好处， 而不是让我对他人产生好处。 所以， 当某人说你自私，自利的时候， 往往代表了你没有满足他对你的需求，预期等。 所以一般情况下，你可以不用特别在乎这些评价。 ​ 当然，在下面的例子中，稍微有点不同。 A 因为想购买一件心怡的物品，所以向B借了200块钱。 B同意了借钱给A。 A 按时还钱给了 B。 过了一段时间。 B因为手头不足，所以开口向A借了300块钱。 A以自己没钱拒绝了 （其实有而且近期不会使用这笔钱）。 在上述的例子中， A 就有一些自私。 （笔者并不建议做A这种类型的人。。） ​ 追求更好的生活是需要付出代价的， 你需要努力学习，工作，减少休息和娱乐的时间。 所以在你取得一定成就之后， 你可以分享给别人一些成果， 但是你绝对没有义务分享给别人。无论他人是否指责你自私，自利。 帮助别人是一种美德。 但你不应该将它视为义务。 一般情况下，你不应该优先考虑它，你应该优先考虑的应该只有你自己。 （这是不是典型的自私语句？ 😂） 我们来到这个世界上不是为了满足他人预期的。 （他人 包括任何人） ","date":"2020-11-09","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E8%87%AA%E5%88%A9%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/:0:0","tags":null,"title":"关于自利的一些闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8E%E8%87%AA%E5%88%A9%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"这是一个较为人知的Jetbrains 家族的破解插件，基本上百度搜一搜就能下载的到。 本插件的作者已经不更新了， 作者博文地址： https://zhile.io/2018/08/25/jetbrains-license-server-crack.html 就笔者的经验来看， 基本上 2020.1.3及以下版本应该是可以正常使用的，再高的版本就需要填写激活参数。 目前可以尝试下面的链接进行激活， 但是估计过段时间就不能使用了。 https://justcode.ikeepstudying.com/2020/10/2020-10-28-%e4%ba%b2%e6%b5%8b%e6%9c%89%e6%95%88%ef%bc%9aintellij-idea-2020-2-3-%e6%9c%80%e6%96%b0%e6%bf%80%e6%b4%bb%e7%a0%b4%e8%a7%a3%e6%96%b9%e6%b3%95-%e6%bf%80%e6%b4%bb%e5%88%b0-2089-%e5%b9%b4/ ​ 笔者目前还不清楚这种做法的原理是什么， 但是有以下猜测。 估计激活参数会对应一些内容， 可以使用的账号 或者激活服务器等。 在一定时间之后，发布者把绑定的账号或者激活服务器关掉， 参数就不能再使用了， 需要使用别的参数重新激活。 实在觉得麻烦，或者找不到相关内容的时候 可以试试淘宝激活。 在淘宝购买的时候，推荐购买 激活码/自定义账号的方式， 千万不要购买破解版以及插件啥的。 店家给你远程安装的那种方式也不建议。 这里的意思是说完全没必要花钱去购买一个可以免费获取且不稳定的东西。 就笔者来说， 曾经再2018年的时候买过一次自定义账号激活的方式，使用的时候没发现什么问题。 前段时间又买了一次， 目前还没有什么问题。 但是笔者刚刚查看购买记录，发现店家已经把宝贝删除了，估计那个店铺是一个临时店铺， 所以这个账号能用到什么时候，笔者也不是很清楚。。 ​ 附： 使用插件破解了的IDE，在打开之后如果不关闭的话， 应该一直是可以使用的。（笔者在Mac系统下基本不会关闭 ） ","date":"2020-11-09","objectID":"/caprice/%E5%85%B3%E4%BA%8Ejetbrains-agent%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/:0:0","tags":null,"title":"关于jetbrains Agent的一些闲谈","uri":"/caprice/%E5%85%B3%E4%BA%8Ejetbrains-agent%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%B2%E8%B0%88/"},{"categories":null,"content":"如果你喜欢看电子书，或者黑白漫画， 笔者建议你购买一个Kindle。 喜欢看漫画 可以买32G的， 不喜欢则可以购买8G的。 如果你两样都不喜欢， 笔者则不建议你购买Kindle。 ","date":"2020-11-02","objectID":"/periphery/kindle%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/:0:0","tags":null,"title":"Kindle的一些简单介绍以及家里设备的使用范围","uri":"/periphery/kindle%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"简述 笔者使用Kindle 已经是第11个月了，基本上使用频率比较高。 笔者主要用来看电子书和漫画。 网上盗版资源非常多，可以很方便的下载到很多书籍。 这里要声明一下：在有经济能力的情况下， 建议购买正版，支持创作者。 但是在没有经济能力的情况下，建议观看盗版，增加自己的知识。等到自己的经济能力上来之后，可以再补票。 其次，书籍还是看一看内容才知道好不好， 购买了一本骗钱的书籍，就会白白浪费金钱。 而先看看免费资源则会避免这个问题。 建议，支持正版书籍 👍👍👍 笔者今年看过的书籍如下 笔者在去年看过的书籍不超过3本 ","date":"2020-11-02","objectID":"/periphery/kindle%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/:1:0","tags":null,"title":"Kindle的一些简单介绍以及家里设备的使用范围","uri":"/periphery/kindle%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"对比 ","date":"2020-11-02","objectID":"/periphery/kindle%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/:2:0","tags":null,"title":"Kindle的一些简单介绍以及家里设备的使用范围","uri":"/periphery/kindle%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"实体书对比 相比于实体书， kindle搬家的时候特别轻便， 这个是我购买Kindle的主要原因。 实体书真的太重了， 太多了。笔者之前比较喜欢买书，但是不怎么喜欢看书 😂 现在书架上还有一半以上没翻过的书籍。。。 实体书比较大， 拿起来的时候也不方便。（相对来说） 实体书比较有威势，会吓退我阅读的欲望。。 因为感觉太厚了。。 kindle则比较轻薄，并且我使用kindle看书的时候不会在意字数有多少，一般也不在意什么时候能读完。 相对来说， 实体书也是有一些有点的。 实体书在做小的笔记的时候非常好用。 可以购买很漂亮的书签， 增加看书的愉悦度。 可以用一些标签纸在页码上打标记， 这样在后面用到的时候比较好快速查找。 ","date":"2020-11-02","objectID":"/periphery/kindle%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/:2:1","tags":null,"title":"Kindle的一些简单介绍以及家里设备的使用范围","uri":"/periphery/kindle%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"手机对比 可能就是屏幕的优势了把。。 kindle的屏幕是墨水屏，对比手机来说， 没有那么伤眼。 kindle上分心的东西不多，原装系统没有任何娱乐应用（游戏，视频等）。 电量充足， 我一般好久才会充一次kindle， 而手机天天充电。 屏幕稍大。 ","date":"2020-11-02","objectID":"/periphery/kindle%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/:2:2","tags":null,"title":"Kindle的一些简单介绍以及家里设备的使用范围","uri":"/periphery/kindle%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"平板对比 屏幕区别， 以及应用区别。 相对于支持手写笔的平板， kindle 做笔记不方便， 另外屏幕稍小一些。 笔者一般在地铁上或者睡前使用kindle阅读书籍，漫画。 书籍会看一些知识类的， 也会看小说。 漫画则看些自己感兴趣的。 笔者对手机的使用不是特别热衷。 笔者不怎么玩手游，最近一次玩大型手游还是17年的时候玩崩坏3。 如果你对手游特别感兴趣，也不是很建议你购买kindle， 因为没必要买来吃灰嘛，一发648不好嘛？ ","date":"2020-11-02","objectID":"/periphery/kindle%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/:2:3","tags":null,"title":"Kindle的一些简单介绍以及家里设备的使用范围","uri":"/periphery/kindle%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"家里设备的使用范围 下面是笔者拥有设备的使用范围： 手机 - 日常使用 支付宝 - 用于付钱 微信 - 用于聊天 网易云音乐 - 听歌 雪盈证券 - 交易美股 饿了么 - 外卖 淘宝，京东 - 购物 Telegram - 看看新闻 企业微信 - 工作 哔哩哔哩 - 偶尔看看番剧， 视频。 （最近给我推送的视频都是什么鸟玩意，完全没有看下去的欲望，辣鸡 ） 斗鱼 - 偶尔看看直播。 电脑 （ Mac 系统 ） - 私人项目使用 写博客 写代码 整理月账单 弄弄思维导图 电脑 （ Windows 系统 ） - 游戏机 Steam 游戏 LOL Kindle - 读书和漫画 iPad 最近到手的 iPad Air 4， 小是小了点，不过也还行把。 nPlayer - 看番剧 （ 比手机大好几倍的屏幕用起来是爽啊） TradingView - 看看股票K线 以及别人的评论 斗鱼 \u0026\u0026 哔哩哔哩 - 偶尔看看直播，视频 QQ - 偶尔聊聊天 腾讯动漫 - 看彩色漫画 观看 Youtube 视频。 （励志视频，科普视频等） 如果有钱的话， 12.9英寸的iPad Pro 看番剧应该更舒服（可能没必要就是了）。 没钱的话，笔者认为 iPad air 4 也能接受。 Macbook pro 15.6寸 17款 之前没装黑苹果的时候，充当 Mac系统的作用。 现在吃灰。 哦不对，我装包了，不会吃灰。 😂 偶尔出去旅游的时候 可以用上。 Surface pro 4 iPad 到手之前用于看彩色漫画。 12.3英寸的屏幕看起来也挺爽的。 之前摔过一次，电池有点接触不良， WIFI组件也有点坏了。 不能拿来看番剧。 现在估计要吃灰了。 小米投影仪 - 每周六晚上看一部电影， 平时吃灰。 HTC Vive - 偶尔玩下VR游戏， 平时吃灰。 Pine64 arm开发板 - 搞错用途了， 吃灰。 Dpt-rp1 索尼的电子纸 13寸左右的墨水屏， 配一只手写笔。 可以用于看技术书籍 （因为kindle比较小，看图和大段代码的时候估计不方便） 可以用于写笔记， 签名啥的。 我主要用于写点东西 尝试性的股票分析 最近的规划 功能逻辑设计的草稿等 二手服务器 软路由 下载机 家用 Nas (SMB) 以及 TimeMachine 备份的服务器 云盘 笔者平时上班的时候带手机和kindle， 最近考虑把iPad也带上。 其他。 双十一马上到了， 各位在购买物品的时候最好提前查下价格有没有上升。 笔者有点不太明白， 国庆节的时候似乎没什么降价促销活动，而自创的双十一则各种降价。。 ","date":"2020-11-02","objectID":"/periphery/kindle%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/:3:0","tags":null,"title":"Kindle的一些简单介绍以及家里设备的使用范围","uri":"/periphery/kindle%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"公司安装的黑苹果系统， 在浏览部分网站的时候死机， 鼠标和键盘都没反应，只能强制重启。 我的解决方案是： 关闭Chrome 的硬件加速。 相关链接在此： https://support.google.com/chrome/thread/16089385?hl=en\u0026msgid=16383919 就笔者目前来说，下列情况触发了死机操作： 在知乎浏览的时候，点击 gif图片的缩略图。 （经过上述操作，现在已经解决 ✅) 浏览其他部分网站的时候， 打开该网站就直接死机。 （因为忘记了是哪些网站，所以没有办法再进行测试） 使用 网易MuMu模拟器打开龙族幻想的时候。 笔者目前在公司使用的是AMD 的580 显卡， 经过沟通得知，该卡是一张矿卡， 性能上可能不稳定。 平时使用的时候没什么问题，运行耗费性能的程序可能就会挂了。 笔者家里使用是一张新购的蓝宝石 5700XT， 暂时没发现死机的情况， 可以正常使用。 所以其他软件触发的死机可能是显卡的问题。 ","date":"2020-11-02","objectID":"/periphery/%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%BD%BF%E7%94%A8chrome%E6%B5%8F%E8%A7%88%E7%BD%91%E9%A1%B5%E7%9A%84%E6%97%B6%E5%80%99%E6%AD%BB%E6%9C%BA%E7%9A%84%E9%97%AE%E9%A2%98/:0:0","tags":null,"title":"黑苹果使用chrome浏览网页的时候死机的问题","uri":"/periphery/%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%BD%BF%E7%94%A8chrome%E6%B5%8F%E8%A7%88%E7%BD%91%E9%A1%B5%E7%9A%84%E6%97%B6%E5%80%99%E6%AD%BB%E6%9C%BA%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":null,"content":"从我的安装经验来看， 黑苹果的安装非常简单，只是有点耗时而已。 教程地址： https://dortania.github.io/OpenCore-Install-Guide/prerequisites.html 下面是使用教程的几个前提： 你有一定的英文阅读水平。 你具有耐心， 可以使用搜索引擎去尝试解决问题。 你使用 Intel 的CPU 和 AMD的显卡， 或者你将要更换。 （非必需 😂） 有一个大于8G的空闲U盘。 当前电脑可以运行一个系统（Windows/Linux 都可以) 在选购硬件的时候，笔者建议选购一个不带无线网卡的主板， 然后自购一个免驱网卡（大多数都带蓝牙）。 而这个网卡再Windows下基本上也都有驱动，可以正常使用。 如果一个电脑有两个物理蓝牙设备，就有点麻烦。 笔者跟随这个教程，成功在公司电脑， 个人家里电脑上安装了 Mac 系统的 Catalina 版本。 关于AMD的CPU，有一些功能会在成功安装后无法使用。 以下引用上面教程原文 Unfortunately many features in macOS are outright unsupported with AMD and many others being partially broken. These include: Virtual Machines relying on AppleHV This includes VMWare, Parallels, Docker, Android Studios, etc VirtualBox is the sole exception as they have their own hypervisor VMware 10 and Parallels 13.1.0 do support their own hypervisor, however using such outdated VM software poses a large security threat Adobe Support Most of Adobe’s suite relies on Intel’s Memfast instruction set, resulting in crashes with AMD CPUs You can disable functionality like RAW support to avoid the crashing: Adobe Fixes 32-Bit support For those still relying on 32-Bit software in Mojave and below, note that the Vanilla patches do not support 32-bit instructions A work-around is to install a custom kernel, however you lose iMessage support Stability issues on many apps Audio-based apps are the most prone to issues, ie. Logic Pro DaVinci Resolve has been known to have sporadic issues as well N卡的话， 则是因为在mac上没有驱动， 只能使用老旧的 webDriver，所以不推荐。 AMD的GPU， 笔者尝试的 Rx580, 5700XT 都是免驱的，装好系统，插上显卡就可以使用了。 耐心看几遍上面的教程， 选好硬件， 很容易就可以安装了。 笔者家里的电脑安装的是 Mac/Windows双系统， Windows用于打游戏， Mac用于编码，写作等。 这样选择的原因是想工作/娱乐分离， 在公司安装黑苹果是因为想使用一套软件工具。 还有另外一个原因是， 我之前公司电脑是Windows的。 平时我都不关机，有一日我早上到公司的时候 发现系统的注册表坏了， 就莫名其妙的坏了， 我不知道发生了什么。。 我只好拿同事的注册表复制过来，试试。 折腾了一段时间，勉强能用了， 但是还有不少问题。。 一般来说， Mac就不会有这个问题。 但 Mac有些别的问题。。 Mac在系统升级之后，部分软件可能就无法使用了， 就需要更新软件，而部分软件授权是跟着版本来的。 （不过因为Mac系统升级是需要手动确认的， 不更新就没什么问题。） Mac上的软件正版大多都很贵。。 还有一个TimeMachine相关的内容 我之前使用的淘宝购买的 Macbook pro 15.6寸的。 因为预算问题，购买的128G硬盘空间。 后来使用过程中发现 内存有点不够，所以购买了一个1T的 M.2 SSD 和一个硬盘盒。这样当做外接硬盘使用，我给硬盘分了两个分区， 一个叫 mac_extend 给mac使用， 还有一部分想给Windows使用（虽然一次也没使用过😂) 在设置TimeMachine的时候， 手动把备份mac_extend的屏蔽项 去掉， 让TimeMachine备份 mac_extend 分区。 在对家里电脑安装黑苹果的时候，我把外接的硬盘拆掉，放进主板里给黑苹果使用。 因为部分配置的问题，我在安装过程中，把全盘格掉了。 后来折腾了一下， 成功进入了mac系统的安装界面。 我选择了 从TimeMachine中恢复系统的选项， 等恢复结束之后， 我发现我的 mac_extend 分区没了。。 经过一番折腾， 我发现TimeMachine里面的文件还是存在的， 按照下面的方法就可以恢复。 利用磁盘工具 建立一个叫做 mac_extend的分区。 （和之前的分区保持相同的名字） 划分的空间要比备份的大， 但是不必完全一样。 文件系统我是用的 APFS。 进入TimeMachine ， 找到 XXX的iMac 这个目录，会发现里面有一个叫做mac_extend的目录， 进入之后会发现 文件还在。 我是进入这个目录之后， 使用CMD+A全选， 然后点击下面的恢复。 等待若干时间之后就成功恢复了全部的文件。 （部分文件可能需要输入密码才能恢复） 使用TimeMachine恢复系统， 会有部分软件丢失配置， 部分变成未激活状态。 以上。 ","date":"2020-10-19","objectID":"/periphery/%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%9A%84%E5%87%A0%E6%AC%A1%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:0:0","tags":null,"title":"黑苹果的几次安装记录","uri":"/periphery/%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%9A%84%E5%87%A0%E6%AC%A1%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"前言： 听说 AMD 的 CPU 现在性能已经吊打Intel， 而且价格还比 Intel 的低， 所以就在年初的时候入手了3900X+X570 PRO ， 结果在装机的时候闹出了些笑话。。 大神直接略过本篇就可以了， 当然也可以当个乐子看。 如果你和我一样也是一个小白的话， 希望本文能帮助到你。 简单的列出一下笔者使用的配置 AMD 3900X 华硕 PRIME X570 PRO 微星 GTX1070 金士顿 8G * 2 之前买的闪迪 500G SSD 长城 650W 金牌G6全模组电源 ","date":"2020-10-12","objectID":"/periphery/%E5%B0%8F%E7%99%BD%E8%A3%85%E6%9C%BA%E8%AE%B0%E5%BD%95%E8%B4%B4%E9%A6%96%E6%AC%A1%E5%B0%9D%E8%AF%95amd/:0:0","tags":null,"title":"小白装机记录贴(首次尝试AMD)","uri":"/periphery/%E5%B0%8F%E7%99%BD%E8%A3%85%E6%9C%BA%E8%AE%B0%E5%BD%95%E8%B4%B4%E9%A6%96%E6%AC%A1%E5%B0%9D%E8%AF%95amd/"},{"categories":null,"content":"踩坑记录 ","date":"2020-10-12","objectID":"/periphery/%E5%B0%8F%E7%99%BD%E8%A3%85%E6%9C%BA%E8%AE%B0%E5%BD%95%E8%B4%B4%E9%A6%96%E6%AC%A1%E5%B0%9D%E8%AF%95amd/:1:0","tags":null,"title":"小白装机记录贴(首次尝试AMD)","uri":"/periphery/%E5%B0%8F%E7%99%BD%E8%A3%85%E6%9C%BA%E8%AE%B0%E5%BD%95%E8%B4%B4%E9%A6%96%E6%AC%A1%E5%B0%9D%E8%AF%95amd/"},{"categories":null,"content":"AMD 的主流 CPU是不带核显的 我本来以为AMD 和英特尔一样 有个核显， 而装机的时候本着用少量配件快速点亮机器的想法，我就没装显卡。。。 结果开机的时候，就一直卡在主板的 VGA 白灯上，进不去系统。 根据我以前的经验， 可能是哪点没插好，我就重新拔插内存， 硬盘啥的， 都没用。。 后来百度搜了下， 看到有人说： 可能是 CPU 问题。 我就想着把 CPU重新拔插下， 结果。。 在弄 CPU 的时候手滑了， CPU 磕到了机箱上了， 针脚直接弯了不少（AMD 的针脚在 CPU 上， 而非主板上）。 因为机器并没有成功点亮， 所以 CPU 和散热器上的硅脂会粘的很紧， 而 AMD 的自带硅脂又是粘中粘，所以摘下来的时候极其费劲。。 一个不小心， CPU 就砸在机箱上了。 参考阅读： AMD的CPU哪些是带核显的，怎么看出？ - 木头龙的回答 - 知乎 https://www.zhihu.com/question/340201779/answer/785923927 ","date":"2020-10-12","objectID":"/periphery/%E5%B0%8F%E7%99%BD%E8%A3%85%E6%9C%BA%E8%AE%B0%E5%BD%95%E8%B4%B4%E9%A6%96%E6%AC%A1%E5%B0%9D%E8%AF%95amd/:1:1","tags":null,"title":"小白装机记录贴(首次尝试AMD)","uri":"/periphery/%E5%B0%8F%E7%99%BD%E8%A3%85%E6%9C%BA%E8%AE%B0%E5%BD%95%E8%B4%B4%E9%A6%96%E6%AC%A1%E5%B0%9D%E8%AF%95amd/"},{"categories":null,"content":"AMD CPU 的针脚弯了怎么办 针脚弯了之后，我尝试去找了下修电脑的， 他们都不给修理。。 在搜索了一段时间之后， 我发现可以尝试用缝衣服的针 或者自动铅笔尝试弄直针脚。 （缝衣针超市没买到，而裁缝那里也不卖给我。。 自动铅笔就比较好买了，文具店就有） 看到视频有用刀片的， 那个我也没有。 银行卡太大了， 完全用不了， 所以我就尝试用自动铅笔进行操作了。 从结果来看，勉强还行把。 笔者用自动铅笔 + 放大镜（手机相机） 把针脚全部弄直了。 如果在放入主板的时候，出现了没有直接放进去的情况，则说明有部分针脚还是弯的。 注意： AMD 的 CPU 如果针脚弯了，则不保修了。 Intel 的 CPU 上则没有针脚 这里是完全不保修了， 京东送过去之后， 人家先检测针脚是否弯了， 如果弯了直接原物返还。 这增加了我购买英特尔 CPU 的倾向。 在用自动铅笔弄直了之后， 我放入 CPU，插上显卡之后 就点亮了电脑。 然鹅好景不长，在6个月之后的某一天，我打开电脑，输入完登录密码之后， 低头看两分钟手机，再抬起头的时候就发现电脑黑屏了，然后就再也打不开了。 拆开机箱， 我发现启动的时候再次卡在了主板的 VGA白灯上。 我更换了显卡，不行。 主板去送修， 京东说主板没有问题。 CPU 去送修，则原物返回。。。 这让我极其难受😭😭😭 考虑到我要安装黑苹果用于工作， 所以我就索性把板U 都换掉了， 换成了 i9 10900KF + 微星 MPG Z490。 黑苹果在 AMD CPU 上可能会出现更多的小毛病，笔者觉得不太适合日常工作使用。 反正 CPU 都坏了，就全部都更换了把。。 ","date":"2020-10-12","objectID":"/periphery/%E5%B0%8F%E7%99%BD%E8%A3%85%E6%9C%BA%E8%AE%B0%E5%BD%95%E8%B4%B4%E9%A6%96%E6%AC%A1%E5%B0%9D%E8%AF%95amd/:1:2","tags":null,"title":"小白装机记录贴(首次尝试AMD)","uri":"/periphery/%E5%B0%8F%E7%99%BD%E8%A3%85%E6%9C%BA%E8%AE%B0%E5%BD%95%E8%B4%B4%E9%A6%96%E6%AC%A1%E5%B0%9D%E8%AF%95amd/"},{"categories":null,"content":"显卡插主板的哪个槽 一般情况下， 要插在距离 CPU 最近的那个的槽位上。 仔细看主板上的 PCI-e 的 x16插槽， 从上到下看， 离 CPU 最近的插槽是满针脚的，第二个只有第一个的一半针脚（可能是 x8的）， 第三个只有第二个的一半针脚（可能是 x4的） 。 现在用娱乐大师（鲁大师）看硬件的时候， 似乎会指明显卡的槽位， 请确认是 x16 。 笔者前一台电脑也是自己组装的， 但是在笔者的记忆里面， 显卡是随便插的。。 所以我就插在了第二个 插槽上。。 结果在玩 PUBG 的时候，老是闪退， 最后靠降低显卡频率，调低画质才能正常玩。。 有几天，我还在想为啥新电脑还没有我的旧电脑性能强劲。。。 不过，现在想想， 我仍然用中间的插槽玩了 半条命：艾力克斯， 刺客信条：起源 等几个游戏。。 ","date":"2020-10-12","objectID":"/periphery/%E5%B0%8F%E7%99%BD%E8%A3%85%E6%9C%BA%E8%AE%B0%E5%BD%95%E8%B4%B4%E9%A6%96%E6%AC%A1%E5%B0%9D%E8%AF%95amd/:1:3","tags":null,"title":"小白装机记录贴(首次尝试AMD)","uri":"/periphery/%E5%B0%8F%E7%99%BD%E8%A3%85%E6%9C%BA%E8%AE%B0%E5%BD%95%E8%B4%B4%E9%A6%96%E6%AC%A1%E5%B0%9D%E8%AF%95amd/"},{"categories":null,"content":"机箱风扇装反 因为风扇上灰尘比较多， 而且新的主板大多有 IO 挡板，不太容易放回我的老机箱里面， 所以就拆掉了两个风扇， 等装回去的时候 我想错了机箱风道。。 风扇装反了。。 这个情况下， 一玩 PUBG 一段时间就闪退，CPU 的温度差不多到了100度左右。。 （自带的散热器） 后来在看别人发的机箱风道图的时候才发现， 我好像装反了。。 在矫正之后，我也购买了一个猫头鹰 D15S 的散热器，用上之后 CPU 的温度是降了不少。。 顺便说一下。。 我的散热器也装反了 😂😂😂 ​ 在这种情况下， 我很难把显卡插在第一个槽上。。 散热器上的标志和字是朝上的，就是正的，否则是反的。 ","date":"2020-10-12","objectID":"/periphery/%E5%B0%8F%E7%99%BD%E8%A3%85%E6%9C%BA%E8%AE%B0%E5%BD%95%E8%B4%B4%E9%A6%96%E6%AC%A1%E5%B0%9D%E8%AF%95amd/:1:4","tags":null,"title":"小白装机记录贴(首次尝试AMD)","uri":"/periphery/%E5%B0%8F%E7%99%BD%E8%A3%85%E6%9C%BA%E8%AE%B0%E5%BD%95%E8%B4%B4%E9%A6%96%E6%AC%A1%E5%B0%9D%E8%AF%95amd/"},{"categories":null,"content":"其他 金钱损失大约5000+ RMB，略微有点心痛，但是一想到是沉没成本，也就不是特别在意了。 看似是一次装机操作失误的事情， 实际上可能是笔者个人心态的问题。 笔者个人的心态可能偏向于了： 自大 懒惰 傲慢 对于完全没有做过一次的事情， 进行错误的判断和预测， 如果笔者能在装机之前随便浏览一下 AMD 的装机记录贴， 应该都回避免上述不少问题。。 笔者决定如果再出现需要做某类笔者完全没有做过的事情的时候， 要去了解一下。 即使已经做过类似的事情， 也要去稍微了解下。 ","date":"2020-10-12","objectID":"/periphery/%E5%B0%8F%E7%99%BD%E8%A3%85%E6%9C%BA%E8%AE%B0%E5%BD%95%E8%B4%B4%E9%A6%96%E6%AC%A1%E5%B0%9D%E8%AF%95amd/:2:0","tags":null,"title":"小白装机记录贴(首次尝试AMD)","uri":"/periphery/%E5%B0%8F%E7%99%BD%E8%A3%85%E6%9C%BA%E8%AE%B0%E5%BD%95%E8%B4%B4%E9%A6%96%E6%AC%A1%E5%B0%9D%E8%AF%95amd/"},{"categories":null,"content":"编程语言： Java 因为笔者并没有完成过单元测试， 所以本篇内容比较少，也是一些小想法。 笔者在项目开发到了一定阶段的时候，考虑加入单元测试辅助开发。 但是呢，在搜索文档和简单测试的时候发现， 笔者现在的项目结构似乎无法进行单元测试， 所以就没再继续下去。 ","date":"2020-10-05","objectID":"/program/%E5%85%B3%E4%BA%8E%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E6%83%B3%E6%B3%95/:0:0","tags":null,"title":"关于单元测试的一点小想法","uri":"/program/%E5%85%B3%E4%BA%8E%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E6%83%B3%E6%B3%95/"},{"categories":null,"content":"一些建议 单元测试一定要从项目开始的时候就进行规划， 否则开发中可能会很难再添加单元测试。 笔者搜索到的是一个叫做mockito 的工具， 这个工具不需要建立很长的依赖内容， 它可以让你断言某个方法的执行次数。 但是，这个工具对单例模式似乎不太友好。 什么意思呢， 就是说当你的代码中使用大量的单例模式的时候，这个框架可能就不太好用了。 原因是mockito基本上可以mock一个类，接口或者一个实例对象。 当类A依赖类B的时候，你在 mock 类 A 的时候，似乎会自动创建一个类 B。当然，你可以手动 mock 一下类 B，然后赋值给类 A 的属性。 在使用单例模式的时候， 代码中会存在大量类似ConfigManager.getInstance().getShopData(shopGoodsId)的代码，这里是直接使用 ConfigManager 类的单例的， 在执行测试方法的时候可能会出现异常。 如果想把 ConfigManager做成 mock 之后的类，则可能需要做一个接口替换 ConfigManager 的 Instance属性, 而这无疑会破坏单例模式。 ","date":"2020-10-05","objectID":"/program/%E5%85%B3%E4%BA%8E%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E6%83%B3%E6%B3%95/:1:0","tags":null,"title":"关于单元测试的一点小想法","uri":"/program/%E5%85%B3%E4%BA%8E%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E6%83%B3%E6%B3%95/"},{"categories":null,"content":"其他内容 当你无法使用这类单元测试的框架之后， 你可以试着考虑做一个自动化测试的工具。 如果你使用Jenkins之类的工具 做持续集成， 那么就可以在打包发布之后 执行下自动化测试，并可以考虑生成一个 html 页面的报告。 本文如果有什么错误的地方， 欢迎指正。 😄😄😄 ","date":"2020-10-05","objectID":"/program/%E5%85%B3%E4%BA%8E%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E6%83%B3%E6%B3%95/:2:0","tags":null,"title":"关于单元测试的一点小想法","uri":"/program/%E5%85%B3%E4%BA%8E%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E6%83%B3%E6%B3%95/"},{"categories":null,"content":"简述 前些天，公司缺了一个做web后台的人，因为公司做后端的人就剩我一个了，所以面试的任务就交给我了。 笔者个人来说， 是第一次面试别人， 且笔者对 web 技术并不熟悉。 因为笔者是做游戏开发的，对 web 开发并不是很感兴趣，所以了解的不多。 仔细考虑了一下之后，笔者决定出两道很基本面试题来过滤一下面试者，笔者认为如果能完成这两道题，则说明基本逻辑的编写应该没有问题，那样就可以干活了。 ","date":"2020-09-28","objectID":"/program/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:1:0","tags":null,"title":"公司面试使用的面试题","uri":"/program/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"面试题内容 一、 有下面代码 // file: Student.java // 学生信息类 @Data public class Student { // 学号 private int no; // 姓名 private String name; // 年龄 private int age; // 年级 1-16 private int grade; } // file: StudentFilter.java // 学生信息筛选的方法 public class StudentFilter{ public static void test(){ var list = new ArrayList\u003cStudent\u003e(); list.add(new Student(1,\"学生1\", 7, 2)); // 此处省略添加 学生信息 N 个 // 问题： 请输出8~10岁（都包含） 在上三年级的学生数量，以及信息 // PS： 将grade = 3 视作三年级即可 // 在下面空白处作答 即可。 } } 二、 SQL语句问题 -- 年级表 CREATE TABLE `grade` ( id INT(11) PRIMARY KEY , `name` VARCHAR(255) NOT NULL COMMENT '年级的名字', `type` INT(11) NOT NULL DEFAULT 1 COMMENT '1小学，2初中，3....' ); -- 学生表 CREATE TABLE `student` ( `no` INT(11) PRIMARY KEY COMMENT '学号', `name` VARCHAR(255) NOT NULL COMMENT '学生姓名', `age` INT(11) NOT NULL DEFAULT 1 COMMENT '年龄', `grade` INT(11) NOT NULL DEFAULT 1 COMMENT '年级表id' ); -- 问题: 请查询出小学生的数量 （写SQL语句即可） ","date":"2020-09-28","objectID":"/program/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:2:0","tags":null,"title":"公司面试使用的面试题","uri":"/program/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"面试题解答 ","date":"2020-09-28","objectID":"/program/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:3:0","tags":null,"title":"公司面试使用的面试题","uri":"/program/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"第一题 第一题是很简单的内容，基本上有些经验的人都能完成。 但是笔者发现很多自称两年，三年经验的人并不能完成这份笔试。。 本题主要考察下面几个点： Lombok。 自动生成 Getter ,Setter,toString() 的工具 基本逻辑思维以及代码编写经验。 写过大量java 代码的程序员， 我觉得是可以记住这个问题里所使用的 API 的。 Java8 - stream 方便操作集合的工具。 过滤，以及转换成 list。 认真的阅读需求的能力 这里希望首先输出数量，其次输出学生的信息。 绝大部分完成的人都是先输出的信息，之后再输出数量。（他们并没有使用 stream，而是使用一个临时变量记录数量，问题也算不大把。） Java10 - var 关键字 用于局部的类型推导。 笔者大概试了10个人左右，并没有发现一个满足全部需求的人， 基本上都是缺了一些内容。 而且还有部分来面试的人 做不出来这题。（讲真，我感觉到很惊讶😐） 🥳 下面是示例的解题代码。 （纯手写， 并没有经过 IDE 测试） var result = list.stream().filter(s -\u003e s.getGrade() == 3) // 过滤年级 .filter(s -\u003e s.getAge() \u003e= 8 \u0026\u0026 s.getAge() \u003c= 10) // 过滤年龄 .collect(Collectors.toList()); // 输出数量以及信息 System.out.println(result.size()); System.out.println(result); 这里在额外多说几句， 写注释也是一个非常重要的内容。如果你的方法名是自解释的，则可以考虑不写。 但是其他情况，尤其是逻辑比较长且复杂的时候， 一定要写上注释。 ","date":"2020-09-28","objectID":"/program/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:3:1","tags":null,"title":"公司面试使用的面试题","uri":"/program/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"第二题 两表联合查询的 sql，也是非常简单的。 本题参考了上家公司的面试题。 本题主要考察下面几个点： sql 语句的阅读能力 两表联合查询的能力 下面给出一个示例的解题 sql 语句。（同样纯手写， 并没有经过 IDE 测试） SELECT COUNT(1) FROM student s,grade g WHERE s.grade = g.id AND g.type = 1 ","date":"2020-09-28","objectID":"/program/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:3:2","tags":null,"title":"公司面试使用的面试题","uri":"/program/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"后续 这里说一个小插曲。 有一个人和我约了面试之后，在面试当日和我说他不来了。 不来嘛就算了，但是呢，大约20天左右之后吧，那个人突然来到我们公司要求进行面试。 这人来之前并没有和我取得任何联系， 同事和我说有面试的时候，我是极其惊讶的，因为我记得我并没有约任何一个人哇！因为笔者脾气还算 OK，所以还是打印简历让他进行面试了， 结果嘛，不用说，当然是 PASS 掉了。 我有问过他为什么又要过来面试了， 他回答说：“我后来又看了一下你们公司职位描述，感觉你们公司挺好的，所以就来试试。” 这种有点我行我素的人， 笔者基本是不会考虑录用的。如果碰到一个脾气大的面试官，可能直接就让他走了， 面试都不面试。 （笔者基本上也是走个流程，随便问问。虽然只有这个人的第一题输出是按照规则来的，但是笔者仍然不会选择录用他。） 这里笔者也建议你不要这样做， 因为基本上是在浪费自己的时间。 如果你爽约了，还想再尝试一次，你一定要先和面试官取得联系。 总之，笔试题是一个很好用的过滤器， 如果你也需要面试别人， 建议你使用一下。 🎉🎉🎉晚安，中秋节快乐，国庆节快乐。🎉🎉🎉 ","date":"2020-09-28","objectID":"/program/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/:4:0","tags":null,"title":"公司面试使用的面试题","uri":"/program/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E4%BD%BF%E7%94%A8%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"byte[]和 int 互相转换 // 将 byte[] 转换成 int byte[] input = {(byte)0x65, (byte)0xFF, (byte)0x31 }; // 使用大端的方式转换成 int ： x == 0x65FF31 int x = (input[0] \u0026 0xFF) \u003c\u003c 16 | (input[1] \u0026 0xFF) \u003c\u003c 8 | (input[2] \u0026 0xFF) \u003c\u003c 0; // 使用小端的方式转换成 int : y == 0x31FF65 int y = (input[0] \u0026 0xFF) \u003c\u003c 0 | (input[1] \u0026 0xFF) \u003c\u003c 8 | (input[2] \u0026 0xFF) \u003c\u003c 16; 介绍一些概念 一个 int 由4个字节组成，分别记作 x0,x1,x2,x3 一个字节由8个位(bit) 组成， 每个 bit的值只能为1或者0 一个 int 由 32个位(bit) 组成。 | 是按位或的操作符， 当第一项的第n位或者第二项的第n位的值为1 ，结果的第 n 位就是1 \u0026 是按位与的操作符， 当两项中的第 n 位的值都是1， 则结果的第 n 位的值就是1 解释 在大端模式下， 组成 int 的字节数量不够的时候， 省略左边的值（我猜的😂）。 所以此时 x0 = 0 就无视了。 (因为此时只存在3个字节) 将第一个 byte 左移16位， 会让它占据在第二个字节的位置 （x1)。 将第二个 byte 左移8位， 会让它占据在第三个字节的位置（x2)。 将第三个 byte 左移0位， 会让它占据在 第四个字节的位置（x3)。 使用按位或操作符 拼一下 就得到了一个正确的结果值。 0xFF 的二进制就是 1111 1111 将 input[0] 与 0xFF 进行按位与操作得到的应该就是input[0] 原值 (还是我猜测的) 如果需要给 x0赋值， 则将该字节 左移 24位即可。 在小端模式下， 只是字节放置的顺序变化了。 参考阅读： 大小端模式 - 百度百科 Java 位运算(移位、位与、或、异或、非） // 将 int 转换成 byte[] int x = 0x31FF65; // 使用大端的方式转换: { 0x65, 0xFF, 0x31} byte[] c = { (byte) ( x \u003e\u003e 16 ), (byte) ( x \u003e\u003e 8), (byte) ( x \u0026 0xFF) }; // 使用小端的方式转换: { 0x31, 0xFF, 0x65 } byte[] d = { (byte) ( x \u0026 0xFF), (byte) ( x \u003e\u003e 8), (byte) ( x \u003e\u003e 16) }; 解释 右移 8位 转换成 byte类型， 会得到第二个字节。 右移 16位 转换成 byte类型， 会得到第三个字节。 右移 24位 转换成 byte类型， 会得到第四个字节。 因为 int -\u003e byte 的转变，是向下类型转换，所以会进行截断。 x \u0026 0xFF 会得到 第一个字节。 因为 0xFF 的值是 1111 1111 而按位与需要两项第 n 位都为1的时候结果才为1。 0xFF 可以理解成 0x000000FF 所以在这8个1之前还有24个0 ，那些值将会被忽略。 ","date":"2020-09-21","objectID":"/program/java%E5%AD%97%E8%8A%82%E6%93%8D%E4%BD%9C%E7%9A%84%E7%AE%80%E5%8D%95%E6%8F%8F%E8%BF%B0/:1:0","tags":null,"title":"Java字节操作的简单描述","uri":"/program/java%E5%AD%97%E8%8A%82%E6%93%8D%E4%BD%9C%E7%9A%84%E7%AE%80%E5%8D%95%E6%8F%8F%E8%BF%B0/"},{"categories":null,"content":"操作位 bool f = (i \u0026 1 \u003c\u003c n ) != 0; // 检测第 n 位是否为1 i |= 1 \u003c\u003c n; // 将第 n 位设置为 1 i \u0026= ~(1 \u003c\u003c n); // 将第 n 位设置为 0 i ^= 1 \u003c\u003c n; // 切换第 n 位的值 （1变0， 0变1） ","date":"2020-09-21","objectID":"/program/java%E5%AD%97%E8%8A%82%E6%93%8D%E4%BD%9C%E7%9A%84%E7%AE%80%E5%8D%95%E6%8F%8F%E8%BF%B0/:2:0","tags":null,"title":"Java字节操作的简单描述","uri":"/program/java%E5%AD%97%E8%8A%82%E6%93%8D%E4%BD%9C%E7%9A%84%E7%AE%80%E5%8D%95%E6%8F%8F%E8%BF%B0/"},{"categories":null,"content":"在脚本里面使用rsync 这个命令的时候， 需要根据文件的情况动态的给予参数，所以考虑使用变量来实现这个需求。 笔者刚开始在做这件事的时候碰到了一个比较蛋疼的事情。 拼接的参数会自动使用一个引号括起来， rsync 识别不到那么多参数， 好像只是识别到了第一个，后面的都被忽略掉了。 我刚开始好像是使用一个单一的变量来尝试控制参数。（大约1，2个月以前的东西​，记得不是很清楚😂) # 本部分代码没有经过测试， 只是给个示例来说明一下。 include_arg='--include=\"*.jar\"' # 如果本地存在 config.json 文件， 就发送过去 if [[ test -e \"$folder/config.json\" ]] then include_arg='$include_arg --include=\"*config.json\"' fi sshpass -e rsync -avz \"$include_arg\" --exclude=\"*\" ./ root@xx:/root 上述代码中， 最后一段里面的 \"$include_arg\" 变量，经过我的测试，基本都会被解释成\"--include=*.jar --include=*config.json\" 。 这个参数肯定是有问题的，rsync识别不出来。 经过在stackOverflow 上的搜索，发现使用数组可以处理掉这个问题。 代码修改成如下所示的情况， 就可以正常使用了。 # 本部分代码没有经过测试， 只是给个示例来说明一下。 include_arg=(--include=\"*.jar\" --include=\"lib\") # 如果本地存在 config.json 文件， 就发送过去 if [[ test -e \"$folder/config.json\" ]] then include_arg+=(--include=\"*config.json\") fi sshpass -e rsync -avz \"${include_arg[@]}\" --exclude=\"*\" ./ root@xx:/root 修改成这样之后， ${include_arg[@]} 会展开成3个独立的参数传给rsync。 ","date":"2020-09-14","objectID":"/periphery/%E5%9C%A8bash%E8%84%9A%E6%9C%AC%E4%B8%AD%E6%8B%BC%E6%8E%A5%E5%8F%82%E6%95%B0%E7%9A%84%E9%97%AE%E9%A2%98/:0:0","tags":null,"title":"在bash脚本中拼接参数的问题","uri":"/periphery/%E5%9C%A8bash%E8%84%9A%E6%9C%AC%E4%B8%AD%E6%8B%BC%E6%8E%A5%E5%8F%82%E6%95%B0%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":null,"content":"简述 基本上来说，健康的生活习惯，就下面几点。 合理而全面的膳食，适当的蔬菜，水果。 规律，心率保持较高且持续一段时间的运动 规律的作息时间 充足的休息时间 健康，愉快的心理状态 能做到这些的话，应该就会成为一个比较健康的人。 （前提是你没有什么疾病） 下面的内容大多是扯淡， 可当个乐子看， 也可以不看。 ","date":"2020-09-07","objectID":"/caprice/%E7%94%9F%E6%B4%BB%E4%B9%A0%E6%83%AF%E5%BB%BA%E8%AE%AE/:1:0","tags":null,"title":"生活习惯建议","uri":"/caprice/%E7%94%9F%E6%B4%BB%E4%B9%A0%E6%83%AF%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"详细内容 ","date":"2020-09-07","objectID":"/caprice/%E7%94%9F%E6%B4%BB%E4%B9%A0%E6%83%AF%E5%BB%BA%E8%AE%AE/:2:0","tags":null,"title":"生活习惯建议","uri":"/caprice/%E7%94%9F%E6%B4%BB%E4%B9%A0%E6%83%AF%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"膳食 就拿膳食来说，很多人更关注的是好不好吃，而不是营养不营养。在身体没什么大毛病且体重不超标的情况下，笔者个人觉得也还好。 笔者现在的做法是，尽量吃的全一些，每天吃的内容尽量不一样。 这里建议适当的吃一些蔬菜水果。 什么叫适当呢？ 就是喜欢吃就多吃点，不喜欢就少吃点。而且可以吃点或者喝点水果的变种， 汁。 笔者非常不喜欢吃胡萝卜， 但是对味全每日的胡萝卜汁就感觉还好， 喝的下去。 就水果来说， 你不喜欢吃苹果，可以试着吃点橙子，橘子，火龙果什么的。不喜欢吃青菜，可以试着吃点芹菜之类的， 或者就不吃。 这里需要提一下的是，肥胖会引起其他很多疾病，减肥不光为了好看。 ","date":"2020-09-07","objectID":"/caprice/%E7%94%9F%E6%B4%BB%E4%B9%A0%E6%83%AF%E5%BB%BA%E8%AE%AE/:2:1","tags":null,"title":"生活习惯建议","uri":"/caprice/%E7%94%9F%E6%B4%BB%E4%B9%A0%E6%83%AF%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"运动 运动也很难做到，尤其是运动不方便的时候。 笔者以前住的地方到健身房要走路20分钟，去的频率就非常少， 一周去1次， 1次运动1个小时左右。 而现在的话，小区内有塑胶跑道，每天我都会慢跑20分钟。 对于程序员这类不怎么活动的职业来说， 运动真的挺重要的。 很多程序朋友都有脑袋越来越昏沉，不清楚的感觉， 但是他们运动之后就会发现脑袋清醒很多。 要想坚持运动，一个相对来说简单的办法就是每天都进行运动。 ","date":"2020-09-07","objectID":"/caprice/%E7%94%9F%E6%B4%BB%E4%B9%A0%E6%83%AF%E5%BB%BA%E8%AE%AE/:2:2","tags":null,"title":"生活习惯建议","uri":"/caprice/%E7%94%9F%E6%B4%BB%E4%B9%A0%E6%83%AF%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"作息时间 对于比较随意的人来说，遵守作息时间应该挺难的， 反正我感觉我是挺难遵守的😂😂😂。 如果你没有用什么辅助手段(薰衣草精油，ASMR 之类的)睡觉的话， 笔者建议你遵守固定的作息时间。 如果一直使用同一个时间入睡， 那么在入睡的时候会比较简单， 没几分钟就睡着了。 如果打破作息一两次的话， 那也还好，也可以很简单的入睡。 但是如果一直打破作息，入睡就会变得困难。至于其他的副作用， 笔者并没有多少了解。 但是就入睡困难来说，它会影响休息的总时长，然后影响次日的工作状态，可能会产生一连串的副作用，代价还是挺高的。 笔者对昼伏夜出不发表意见，每个人都有自己的生活方式。 ","date":"2020-09-07","objectID":"/caprice/%E7%94%9F%E6%B4%BB%E4%B9%A0%E6%83%AF%E5%BB%BA%E8%AE%AE/:2:3","tags":null,"title":"生活习惯建议","uri":"/caprice/%E7%94%9F%E6%B4%BB%E4%B9%A0%E6%83%AF%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"休息时间与心理状态 科学研究报告，长期的睡眠不足6个小时， 可能会导致早死。 （是不是伪科学，我也不知道） 睡眠不足的时候，笔者个人感觉很难受， 所以为了更舒服的生活，还是尽量保持充足的睡眠把。 当然，过量的睡眠时间也不好， 也没必要。建议的成年人的睡眠时间似乎是7~9个小时，范围内的睡眠时间应该都挺健康的。 就算你有了一个很大的目标，并且愿意付出努力去实现它，笔者也建议你规划一下休息的时间，人都是需要休息的， 而且越大的目标往往可以对应越长的马拉松， 基本上没有任何人能不吃不喝的跑一周的马拉松。 关于心理状态， 如果你不是独居的话， 这个问题就比较好说。 没事的时候和朋友吹吹牛逼，吃吃饭，打打游戏。 心理应该不会差到哪去。 如果谈恋爱的话， 分手的时候可能会受到打击， 但是也还好。 就平时来说，应该是快乐大于不开心的。 但， 如果你是独居的话， 记得时长和家里人联系。 如果可以的话， 可以试着养一个或者两个宠物。 心理状态对健康的影响也十分的巨大， 千万不要忽视它。 ","date":"2020-09-07","objectID":"/caprice/%E7%94%9F%E6%B4%BB%E4%B9%A0%E6%83%AF%E5%BB%BA%E8%AE%AE/:2:4","tags":null,"title":"生活习惯建议","uri":"/caprice/%E7%94%9F%E6%B4%BB%E4%B9%A0%E6%83%AF%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"结语 其实， 笔者现在并不是一个很健康的人， 睡眠质量还是算比较差， 但是对比之前最差的那段时间， 现在好很多了。 笔者最难熬的那段时间里，经常性的休息不好，基本每天都在熬。有好多次在晚上只睡着了半个小时左右就醒了，然后就2，3个小时睡不着。 有一天仅仅睡着了3个小时，然后上了一天班。 你可能会觉得没什么， 睡了3个小时，你也扛得住。 但是笔者的睡眠时间其实一直都很多， 在生病之前的睡眠时间大约需要9个小时左右。 目前的话，大约从23点睡到7.40左右。 夜间会起来几次，上班大多是可以正常上班。 虽然睡眠质量也不是很好， 但是相比于那段时间来说，好了太多太多。 说这些并不是想抱怨什么， 只是对比一下告诉你，运动，水果，酸奶的重要性。 再小小的啰嗦一下， 在你打 LOL，或者吃鸡这些和别人 PVP 的游戏的时候， 你的大脑清醒与否很大程度上决定了你的战绩。清醒的大脑各种秀别人， 昏沉的大脑各种被别人秀，为了能虐别人，运动也是值得的。 ","date":"2020-09-07","objectID":"/caprice/%E7%94%9F%E6%B4%BB%E4%B9%A0%E6%83%AF%E5%BB%BA%E8%AE%AE/:3:0","tags":null,"title":"生活习惯建议","uri":"/caprice/%E7%94%9F%E6%B4%BB%E4%B9%A0%E6%83%AF%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"本文是笔者猜测，加上一些个人经历以及观察公司同事。 先说原因。 久坐 不运动 长期在电脑面前 喝水少（可能） 长期吃油腻的。 ","date":"2020-09-07","objectID":"/caprice/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%8F%AF%E8%83%BD%E7%9A%84%E8%81%8C%E4%B8%9A%E7%97%85/:0:0","tags":null,"title":"程序员可能的职业病","uri":"/caprice/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%8F%AF%E8%83%BD%E7%9A%84%E8%81%8C%E4%B8%9A%E7%97%85/"},{"categories":null,"content":"疾病列表 本文描述得症状仅作参考， 要想确诊，请自行去医院挂号。 列表如下： 干眼症 如果可以得话， 可以尝试购买一个抗蓝光得眼镜， 也许有用。（笔者自己有戴） 这个去医院检测得话， 很简单， 基本上几分钟结束。 拿药的话，一般应该是 玻璃酸钠眼药水。 原因一般都是电子产品用太多， 树木，绿叶等看的太少。 前列腺炎 如果可以， 尽量不要得这个病。 如果得得是慢性得， 是治不好得。 去医院拿药可能也没什么用处。 轻度得时候去医院看病， 拿药吃， 说不定能好。 反复轻度也会变成慢性得。 诱因一般是 久坐，憋尿。 处理办法： 运动， 慢跑，打篮球，踢足球，羽毛球 等持续性运动应该可以缓解症状和预防这个疾病。 左侧精索静脉曲张 诱因一般是 久坐。 造成得后果为： 有时候睾丸会很疼痛， 站立得时候明显。 至于判断得话， 应该是用手摸， 会感觉到一团变得很粗得静脉。 长期久坐， 右侧也可能会出现。 冠状动脉粥样硬化 诱因可能是 不运动， 长期吃得很油腻。 前期没有什么症状， 但是到了中年可能会引起『中风』，『肾功能衰竭』，『冠状动脉疾病』等 脂肪肝 诱因可能是 不运动， 长期吃得很油腻。 是可逆转得病情（来自维基百科） 腰间盘突出 诱因猜测是 加班过度， 长期久坐，过度紧张不能放松自己。 刚开始发作得时候，吃点药 注意保养应该都会变好。 但是这个病，似乎也无法痊愈， 到目前为止， 笔者还是偶尔会出现症状。 睡觉得时候拿个枕头垫在腰部正确得位置， 会缓解症状。 手腕疼痛 诱因可能是 鼠标 用多了。 发作得时候， 手腕很疼痛 预防措施可以是 平时注意休息和活动手腕， 不要 总是保持一个姿势。 颈椎病 经常活动下脖子可能能预防。 肾结晶/肾结石 肾结晶是肾结石得前兆。 诱因可能是 不运动， 喝水少。 笔者自身是右肾结晶， 有同事发作过肾结石。 建议： 多运动， 多喝水。 笔者有一些生活习惯得建议分享， 点击查看。 ","date":"2020-09-07","objectID":"/caprice/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%8F%AF%E8%83%BD%E7%9A%84%E8%81%8C%E4%B8%9A%E7%97%85/:1:0","tags":null,"title":"程序员可能的职业病","uri":"/caprice/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%8F%AF%E8%83%BD%E7%9A%84%E8%81%8C%E4%B8%9A%E7%97%85/"},{"categories":null,"content":"在链接字符串尾部添加参数 serverTimezone=Asia/Shanghai 即可让 mysql 的链接使用上海的时区。 ","date":"2020-09-07","objectID":"/program/mysql-%E6%97%B6%E5%8C%BA%E7%9A%84%E9%97%AE%E9%A2%98/:0:0","tags":null,"title":"Mysql 时区的问题","uri":"/program/mysql-%E6%97%B6%E5%8C%BA%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":null,"content":"其他说明 我刚开始尝试的是 serverTimezone=GMT+8 但是不知道为啥，没有生效。 目前考虑可能是 +的问题, 使用GMT%2b8 可能有效（笔者没有尝试）。 这是 URLEncode 之后的代码。 如果在服务器上使用 yum/apt 等包管理器进行安装， mysql应该会使用系统的时区， 这个时候得客户端一般是不需要指定时区的。 我们这次是使用 docker 安装的， 默认可能是 GMT+0 的时区。 ","date":"2020-09-07","objectID":"/program/mysql-%E6%97%B6%E5%8C%BA%E7%9A%84%E9%97%AE%E9%A2%98/:0:1","tags":null,"title":"Mysql 时区的问题","uri":"/program/mysql-%E6%97%B6%E5%8C%BA%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":null,"content":"图示 ","date":"2020-08-29","objectID":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/:1:0","tags":null,"title":"家里的网络图示","uri":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/"},{"categories":null,"content":"其他说明 我家里就一台二手服务器,所有的虚拟机都在这台服务器里。 ","date":"2020-08-29","objectID":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/:2:0","tags":null,"title":"家里的网络图示","uri":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/"},{"categories":null,"content":"pfSense 的作用 pppoe 拨号上网 DHCP 服务 推送的网关为 192.168.200.2 即 openwrt的地址， 而非pfSense自身的地址。 推送的 dns 服务器为192.168.200.33 即debian-work的地址，而非pfSense的地址。 squid 透明缓存静态资源 | 估计图片，视频比较多把。。 但是我目前只能缓存 http 的。httpds 的则会被跳过。 DNS 服务器 主要是自己家里用的域名解析 然后再请求外部的 DNS 服务器 ","date":"2020-08-29","objectID":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/:2:1","tags":null,"title":"家里的网络图示","uri":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/"},{"categories":null,"content":"openwrt 的作用 旁路由 科学上网 ","date":"2020-08-29","objectID":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/:2:2","tags":null,"title":"家里的网络图示","uri":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/"},{"categories":null,"content":"debian-work 的作用 主要使用 docker 放一些服务 (mysql/redis/xxx...) nextcloud 类似owncloud 。 用于外网可访问的私人存储服务，我主要存储些流程图，思维导图，代码 之类的。 pi-hole 是一个按照域名阻止广告的服务， 但是好像没啥用。 这个还能做域名黑名单，防止其他人浏览， 但是我一个人住， 这个对我来说也没啥用。 git 服务， gogs是我在外网使用的服务， 里面主要存储一些小的代码库。 gitlab则是我在家里的使用的服务， 一般用于存储unity的项目， 里面的资源文件比较多。 ","date":"2020-08-29","objectID":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/:2:3","tags":null,"title":"家里的网络图示","uri":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/"},{"categories":null,"content":"openmediavalut 的作用 充当 NAS 。 家里的主要存储服务 主要存储游戏，电影，系统镜像，软件镜像等的内容 开启 苹果的文件协议，支持 TimeMachine 进行备份。 开启 SMB 协议， 支持这个协议的电脑，手机 都可以访问里面的文件。 （小米投影仪也支持） PLEX ，安装了之后可以在外网看家里的电影， 但是清晰度似乎不是很好。 ","date":"2020-08-29","objectID":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/:2:4","tags":null,"title":"家里的网络图示","uri":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/"},{"categories":null,"content":"win10下载机 \u0026\u0026 win7 游戏机 没啥好说的， 下载就是 百度云，迅雷等。 显卡直通之后就可以使用 虚拟机玩游戏了， 我目前用模拟器玩玩手游稍多一点。我使用 anydesk 远程， 但是感觉效果不是很理想。 ","date":"2020-08-29","objectID":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/:2:5","tags":null,"title":"家里的网络图示","uri":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/"},{"categories":null,"content":"DNS 的链路 使用DHCP 获取地址的设备，默认 DNS 服务器都是 debian-work debian-work里的服务是pi-hole 在提供， pi-hole的上游 DNS 服务器为openwrt openwrt则是有两个 dns 服务，一个是dnsmasq,另外一个是clash 。 dnsmasq 的请求被设置成转发给clash 。 clash的上游服务器有 N 个， 其中有一个是pfSense ，这样的话， 就可以提供本地域名的解析了。 ","date":"2020-08-29","objectID":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/:2:6","tags":null,"title":"家里的网络图示","uri":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/"},{"categories":null,"content":"参考阅读 软路由上的DNS使用记录 esxi显卡直通的操作 软路由的使用 ","date":"2020-08-29","objectID":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/:3:0","tags":null,"title":"家里的网络图示","uri":"/periphery/%E5%AE%B6%E9%87%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%A4%BA/"},{"categories":null,"content":"在使用unity的时候， 经常需要推送一些大的资源文件到项目里面， 使用http的方式，就会出现一些错误， 被拒绝。 我在谷歌转了几圈之后发现，大多人都推荐使用ssh的方式推送，这样也不需要用户名和密码。 我按照常规方式配置好ssh key之后，竟然无法推送。应该是提示了 “ssh: connect to host port 22: Connection refused”。 经过调试，我发现 我的gitlab 是装在docker里面的。 22端口是我的debian 虚拟机的sshd 服务在使用， 而不是gitlab 容器在使用。 所以我在git客户端上指定一下gitlab的端口 就好了。 参考下面的命令： git remote add origin ssh://user@host:1234/srv/git/example 1234 是端口号， 修改成你使用的即可。 user 是gitlab的用户名 host 是gitlab所在的主机 在gitlab的项目主界面， 把HTTP切换成SSH 就可以得到SSH的地址， 然后添加下端口应该就可以了。 ","date":"2020-08-17","objectID":"/periphery/%E5%85%B3%E4%BA%8E%E5%9C%A8docker%E4%B8%AD%E7%9A%84gitlab%E6%B7%BB%E5%8A%A0ssh-key%E5%90%8E%E6%97%A0%E6%B3%95%E6%8E%A8%E9%80%81%E7%9A%84%E9%97%AE%E9%A2%98/:0:0","tags":null,"title":"关于在docker中的gitlab,添加ssh key后无法推送的问题","uri":"/periphery/%E5%85%B3%E4%BA%8E%E5%9C%A8docker%E4%B8%AD%E7%9A%84gitlab%E6%B7%BB%E5%8A%A0ssh-key%E5%90%8E%E6%97%A0%E6%B3%95%E6%8E%A8%E9%80%81%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":null,"content":"目录 关于程序和编程相关的文章： Program 关于一些胡思乱想的文章： Caprice 关于软件使用/linux的文章： Periphery ","date":"2020-08-08","objectID":"/2020/%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D/:1:0","tags":null,"title":"目录介绍","uri":"/2020/%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"😂 😂 😂 ​ 记得微笑。 ","date":"2020-08-08","objectID":"/2020/%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D/:1:1","tags":null,"title":"目录介绍","uri":"/2020/%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D/"},{"categories":null,"content":"思想，既是支撑，亦是牢笼。 ","date":"2020-08-08","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"简略 有事请给我发邮件， 一般都会看得 \u003e aincvy@gmail.com ","date":"2020-08-08","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"计划 ","date":"2020-08-08","objectID":"/about/:2:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"系列 应该会写完 自制脚本语言 这个系列。 别得系列暂时还没有规划 ","date":"2020-08-08","objectID":"/about/:2:1","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"常规内容 一般随缘， 如果有碰到程序中得问题， 也会记录下来。 如果没有得话， 那么随想和周边内容则会较多。 我们明知道人都会死亡， 死亡是生命的终点🏁，但是在平常的生活中却都不会注意这点，只有临近时，才会严重注意到这个问题。 那么， 我们在做一件事情的时候， 为什么总是会特别注意终点，而不是过程呢？ ","date":"2020-08-08","objectID":"/about/:2:2","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"简述 就笔者来说，不算在家的一年，工作了将近5年了。曾经在3家创业公司，1家中型公司工作过， 算上现在在的公司，是4家创业公司。 因为自己也尝试过全职在家做东西，不过失败了。 所以感触有点深， 就写下了这篇内容。 ","date":"2020-07-31","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E5%9C%A8%E5%88%9B%E4%B8%9A%E5%85%AC%E5%8F%B8%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%BB%8F%E5%8E%86%E9%9A%8F%E6%83%B3/:1:0","tags":null,"title":"关于在创业公司工作的经历随想","uri":"/caprice/%E5%85%B3%E4%BA%8E%E5%9C%A8%E5%88%9B%E4%B8%9A%E5%85%AC%E5%8F%B8%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%BB%8F%E5%8E%86%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"内容 笔者现在的这家公司的老板是一个富二代， 主要靠他家里的钱养着， 笔者工作已经8个月了，我感觉公司有点像是老板的玩具。 不过，因为我是边缘人士，所以本文挺多部分都是猜测。 😂😂😂 老板经常和制作人，程序头头，美术头头，策划一起开会，我个人感觉就是老板在了解进度，以及指挥后续的制作内容。 老板的想法可能是： 我是老板， 你肯定要听我的啊！ 制作人的想法可能是： 你是老板， 发钱的， 我肯定会听你的啊！ 这样就会产生很多问题，而且问题的严重性很大。 为什么我会这样说呢？因为我认为老板在游戏设计上的专业度不够。 老板确实玩过很多游戏，充过很多钱， 但是我觉得这样并不能说明太多事情。 设计游戏应该是一个需要看书，练习，反复思考然后才能进步的技能。 仅靠着玩游戏成为游戏设计大师的可能性太低了， 而老板明显不可能看很多书， 了解很多技巧。 我这里并没有说 不应该听老板/投资人的意见，只是我认为更多的时候应该由制作人主导，坚守意见，老板只需要看阶段性成果，然后对成果发表点意见就可以了。是否采纳意见应该由制作人决定， 因为游戏设计的时候，一个人总揽全局，游戏的内容，风格，等等会更加的统一。 考虑一下。 一个设计，制作人想了几天，敲定了。 老板一句话，让你修改成别的样子，理由是老板在别的游戏里玩过，他觉得那样会比较好。这样下去，游戏内容是不是很混乱？ 我在公司里面参加过几个需求会议， 老板出席的时候， 会发表一些意见。在我没有参加的更多的会议，估计老板说的更多。 我们部分功能，做了一版，改了一版，然后又改回去， 部分后端功能做出来然后就消失了， 不用了。 这里我也并没有说修改不好，只是我觉得这样修改，是他们没有仔细考虑好。每次修改应该都需要原因，而且要把原因记录下来，后面再修改的时候要查阅的。 笔者认为应该有的放矢，修改的时候要测试的点是哪个， 需要明确知道。 准备不够， 就很可能会失败。然而他们的准备很不充分。 笔者这家公司的项目，似乎做了5年了，今年差不多是第6年了把， 还是一个很小型的内容，约等于原型， 各种系统功能做了砍， 砍了做， 也没有上过线， 完成度很低。 可能因为是老板自己掏钱，而且掏的是家里的钱， 不是投资人的钱，也不是自己赚的钱，所以没什么紧张感。 不过在笔者现在这家公司不加班，国内比较少见的。只是，项目上线，奖金，加薪之类的事情可能就没有什么着落了。 ","date":"2020-07-31","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E5%9C%A8%E5%88%9B%E4%B8%9A%E5%85%AC%E5%8F%B8%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%BB%8F%E5%8E%86%E9%9A%8F%E6%83%B3/:2:0","tags":null,"title":"关于在创业公司工作的经历随想","uri":"/caprice/%E5%85%B3%E4%BA%8E%E5%9C%A8%E5%88%9B%E4%B8%9A%E5%85%AC%E5%8F%B8%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%BB%8F%E5%8E%86%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"后续 如果你是一个初入职场的新人，去创业公司有好处也有坏处， 就像去一个中型公司一样。 笔者建议： 如果你能去大型公司的话， 建议优先尝试大型公司。 如果非要在中型公司和创业公司中选择的话，就要综合评估了。 创业公司 创业公司，很多公司很辣鸡的。如果管理层，或者说创始人很辣鸡的话，那么这家公司基本上也可以说是挺辣鸡的。 如果一家创业公司的创始人靠谱的话， 他的团队就很可能靠谱， 项目就可能会比较靠谱。否则的话，建议不要去，或者进去了就混混技术和工作经验把。 在创业公司，你可能会碰到很多乱七八糟的需求， 会锻炼你的开发能力，但是可能会出现一种杂而不精的情况，比如前端你能写，后端你也能写，但是写都不咋样。如果出现了这种情况， 也是很尴尬的。 如果没一个资深带你的话， 个人是不建议去创业公司的。 原因1， 如果你的技术不够硬的话， 你可能会很迷茫。 原因2， 没有资深的技术，只招一个没什么经验的新手，老板有问题的可能性很大。 原因3， 没有学习目标， 可能成长会比较慢。 做很久一样的东西，并不能有太多提升。 中型公司 中型公司， 应该会很安定，没有大的情况，可以干很多年。 但是呆在这样的公司，对个人的技术提升可能不是很大。 因为中型公司有运行已久的框架，即使开发起来不方便， 你很可能也得忍受。 因为这个决策是别人做的。 中型公司可能会习惯性加班， 就是即使没什么事情， 你也需要在工位上加班。 外包公司 (web) 能不去就不去。 外包应该都是只关注短期利益， 对个人的长期发展没什么好处。 考虑一下， 你在外包公司做了3年， 还是只会 CURD，简直是在浪费生命。 关于薪资 除非去大型公司， 或者有认识你的朋友，否则你的薪资基本上是跟着经验走的 一年经验 差不多那么钱， 两年差不多那么钱 在 20K 之前， 每跳一次基本都能增加2/3K， 只要你不是太菜。 （每年跳一次的频率） 如果你的技术不错， 完成了很多工作内容， 能带给你的往往只是技术经验， 而非金钱。 ","date":"2020-07-31","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E5%9C%A8%E5%88%9B%E4%B8%9A%E5%85%AC%E5%8F%B8%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%BB%8F%E5%8E%86%E9%9A%8F%E6%83%B3/:3:0","tags":null,"title":"关于在创业公司工作的经历随想","uri":"/caprice/%E5%85%B3%E4%BA%8E%E5%9C%A8%E5%88%9B%E4%B8%9A%E5%85%AC%E5%8F%B8%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%BB%8F%E5%8E%86%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"这个是一个不是很难的操作， 但是执行起来可能需要踩一些坑。 ","date":"2020-07-31","objectID":"/periphery/esxi%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A%E7%9A%84%E6%93%8D%E4%BD%9C/:0:0","tags":null,"title":"Esxi显卡直通的操作","uri":"/periphery/esxi%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A%E7%9A%84%E6%93%8D%E4%BD%9C/"},{"categories":null,"content":"ESXi 的操作 登录后台，点击管理， 找到硬件， 把显卡和 显卡的HDMI 音频都切换直通， 之后重启(重新引导)ESXi 主机。 把显卡和显卡的HDMI 音频设备添加到虚拟机里面。（编辑 / 添加 PCI-E设备） 编辑虚拟机的配置， 添加或者设置 这个配置项： hypervisor.cpuid.v0 = FALSE ","date":"2020-07-31","objectID":"/periphery/esxi%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A%E7%9A%84%E6%93%8D%E4%BD%9C/:0:1","tags":null,"title":"Esxi显卡直通的操作","uri":"/periphery/esxi%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A%E7%9A%84%E6%93%8D%E4%BD%9C/"},{"categories":null,"content":"虚拟机的操作 打开虚拟机， 进入系统，关闭和禁用vm-tools （这个会阻碍显卡驱动） 安装显卡驱动， 重启。 如果是 Windows 系统， 可以考虑使用 远程桌面链接这个工具链接系统， 查看显卡驱动有无成功安装。 局域网设备也可以考虑AnyDesk 这个工具。 安装显卡驱动的时候可能没那么容易成功。。。 需要点耐心。 如果打不开虚拟机或者全部弄好了之后，可以考虑使用 vga.present = FALSE 禁用 ESXi提供的显卡。 加了之后我就打不开了。。。 不知道为啥😂😂😂 至此，应该 就可以正常使用了。 ","date":"2020-07-31","objectID":"/periphery/esxi%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A%E7%9A%84%E6%93%8D%E4%BD%9C/:0:2","tags":null,"title":"Esxi显卡直通的操作","uri":"/periphery/esxi%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A%E7%9A%84%E6%93%8D%E4%BD%9C/"},{"categories":null,"content":"游戏体验 笔者直通了一个AMD的 R9 270，实测的话， 尝试玩了下面几个游戏。 DNF 是可以玩的， 无论是单机版，还是官网版本都是可以玩的。 听说 DNF 不吃显卡， 不知道是不是真的。 洛奇英雄传单机版。 这个我是使用 anydesk 远程链接的， 鼠标操作有问题， 就稍微玩了一下。 steam 有一个家用流式传输的功能， 可以远程玩一些游戏。 并且这个功能可以串流非 steam 库的游戏，笔者当初好像使用了这个功能玩洛奇的单机版， 应该是可以玩的。 包含启动器之类的游戏好像是玩不了的， 比如 LOL。 ","date":"2020-07-31","objectID":"/periphery/esxi%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A%E7%9A%84%E6%93%8D%E4%BD%9C/:0:3","tags":null,"title":"Esxi显卡直通的操作","uri":"/periphery/esxi%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A%E7%9A%84%E6%93%8D%E4%BD%9C/"},{"categories":null,"content":"远程链接出现的分辨率问题 当初在完成显卡直通后，笔者还碰到了一个分辨率的问题，在使用anydesk远程连接的时候，分辨率最高好像只有 1600x900。 之后，笔者买了一个hdmi dummy plug，一个欺骗显卡，让显卡觉得它已经连接了一个显示器的工具。把这个工具插到显卡的hdmi接口之后，显示器的分辨率最高就到了4k。 ","date":"2020-07-31","objectID":"/periphery/esxi%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A%E7%9A%84%E6%93%8D%E4%BD%9C/:0:4","tags":null,"title":"Esxi显卡直通的操作","uri":"/periphery/esxi%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A%E7%9A%84%E6%93%8D%E4%BD%9C/"},{"categories":null,"content":"简介 之前给OpenMediaVault的硬盘空间不够大， 新增硬盘似乎不太方便， 就考虑扩大硬盘空间， 踩了坑之后终于弄好了。 有下面的要点， 先简单提一下。 MBR 分区表最大只能支持2TB 空间大小 GPT 分区表能支持 大于2TB 的空间 fdisk 这个工具似乎也只能支持2TB 空间大小 parted 这个工具支持大于2TB 空间的 ","date":"2020-07-19","objectID":"/periphery/%E5%85%B3%E4%BA%8Elinux%E6%89%A9%E5%85%85%E5%88%86%E5%8C%BA%E7%9A%84%E9%9A%8F%E7%AC%94/:1:0","tags":null,"title":"关于linux扩充分区的随笔","uri":"/periphery/%E5%85%B3%E4%BA%8Elinux%E6%89%A9%E5%85%85%E5%88%86%E5%8C%BA%E7%9A%84%E9%9A%8F%E7%AC%94/"},{"categories":null,"content":"流程 大概思路有两个，如下所说。 使用 fdisk 的操作流程。 谨慎操作， 这个流程有可能让你的数据全部丢失！ 查看原有分区的 扇区数， 并记录起始扇区位置。一个磁盘只有一个分区的话，起始位置一般是2048 。 确保要扩充的分区后面没有别的分区， 否则建议新建一个分区。 删除要扩充的分区。 新建一个同类型的分区 起始扇区位置 和前面查询到的 要保持一致。 一定要保持一致\u0010，否则数据会丢 结束扇区填写， 好像可以填写具体的大小(500G这种)。 给的默认结束扇区应该是整个磁盘的空间（前提是空间小于2TB） 保存 并写入分区表 resize2fs 命令 把分区同步到文件系统。 使用parted命令 （建议） 输入命令 parted [dev] dev 表示设备位置,一般是 /dev/sdx print 查看磁盘分区表 resizepart 1 Y 3848GB 命令扩大1号分区的空间大小 1 按需填写位置 Y 表示自动确认 3848GB 表示具体大小 quit 退出即可。 上一部应该会自动写入分区表 可查看空间大小有无更新， 没有的话可以尝试resize2fs 更新一下 ","date":"2020-07-19","objectID":"/periphery/%E5%85%B3%E4%BA%8Elinux%E6%89%A9%E5%85%85%E5%88%86%E5%8C%BA%E7%9A%84%E9%9A%8F%E7%AC%94/:2:0","tags":null,"title":"关于linux扩充分区的随笔","uri":"/periphery/%E5%85%B3%E4%BA%8Elinux%E6%89%A9%E5%85%85%E5%88%86%E5%8C%BA%E7%9A%84%E9%9A%8F%E7%AC%94/"},{"categories":null,"content":"之前听了一点关于抑郁症的有声书，有了自己的感想，所以想写一篇文章来试着帮助存在抑郁症的人群。 PS： 笔者本人也是一个中度抑郁症患者，虽然只检测了一次，可能不太准。 PS2： 本文可能并没有任何科学依据， 所以请当成扩展阅读来看。 ","date":"2020-07-19","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%8A%91%E9%83%81%E7%97%87%E7%9A%84%E9%9A%8F%E6%83%B3/:0:0","tags":null,"title":"关于抑郁症的随想","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%8A%91%E9%83%81%E7%97%87%E7%9A%84%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"我的观念 人体是一个巨大的信息聚合体。 我们每天接受和处理的信息相比于身体总的存储信息来说，是非常微小的。 打个比方来说的话， 人体像是一个巨大的蓄水池，但是只有一个很小的入水口和一个很小出水口。 这样的情况会产生哪些现象和效果呢。 人很难在很短的时间内产生巨大的变化。 长期做一件事，人就可以把这件事做的很好，或者习惯这样一件事。 健康的人熬夜通宵几天并没有太大的变化， 生病的病人🏃🏻🏃🏻🏃🏻跑步健身几天并没有什么用处。 抑郁的人碰到几件开心的事情也没有太多太大的感触。 蓄水池表示了我们当前的状态， 我们生活的基调， 是健康快乐？ 还是生病忧愁？ 入水口则是当前的行动，感受。 出水口则是我们在睡眠或者冥想之类行为的时候，消耗、丢掉或者遗忘的内容。 想象一下，你在一个巨大的清澈的蓄水池里面滴一滴墨水，会发生什么？ 这个蓄水池会会变成一个巨大的墨水池吗？ Of Cource Not. 这个水池可能会变黑那么一丢丢，可能肉眼都分辨不出来的一丢丢。 那么再次想象一下，在一个巨大的乌黑的蓄水池里面滴一滴清水，会发生什么？ 蓄水池会哗的一声变成全部清澈的水吗？ 当然不会！你只会发现水池并没有发生什么变化。 （声明一下，这里的清水就是无任何添加物的河水/自来水。 墨水也是同样的） ","date":"2020-07-19","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%8A%91%E9%83%81%E7%97%87%E7%9A%84%E9%9A%8F%E6%83%B3/:1:0","tags":null,"title":"关于抑郁症的随想","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%8A%91%E9%83%81%E7%97%87%E7%9A%84%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"行为指导 那么， 中轻度抑郁症患者该如何尝试自救呢？ 注意： 本文的方法只是一个指导，并不是科学疗法，如果你无药可用，则可以尝试下。 笔者现在假设， 快乐，开心的事情视为清水；抑郁，压抑，不开心的事情视为墨水。 那么，抑郁症患者的脑海里，人体里已经存在了大量的墨水，这并不是一天两天的成果，而是长久以来无法被释放的墨水堆积而来的。 所以，抑郁症患者和正常健康的人对开心快乐的事情反应是不一样的。区别可能在于，一件开心的小事可以让健康的人开心挺久， 但是抑郁症患者可能根本不会开心，或者只是小小的拨动了一下情绪。 一碗清水倒入巨大的墨水池里，它所发挥的清洁效果毕竟不大。 所以，这注定了是一场长久的拉锯战，需要耐心，意志来驱使患者发生变化。 如果你是一个中轻度的抑郁症患者，你可以掌握自己的生活的话，笔者不建议你进入精神病院。 并且不要失去对自己的耐心，也不要急于求成。 笔者认为，国内的医疗环境，医者的素质，态度，还是有很大的加强空间的。 并且，国内的很多父母，尤其是农村的，很多很多并不能负担的起作为父母的责任（在心理方面上）。 ","date":"2020-07-19","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%8A%91%E9%83%81%E7%97%87%E7%9A%84%E9%9A%8F%E6%83%B3/:2:0","tags":null,"title":"关于抑郁症的随想","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%8A%91%E9%83%81%E7%97%87%E7%9A%84%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"所以，说了那么多， 到底怎么去做呢？ 核心观念，有两个，一个是持续的改变，一个是把视线由向内转而到向外。 1、 持续的改变。 不停的向墨水池里面添加清水，并释放墨水，就可以到达使水清澈一些的目的。 那么， 实质上要做些什么内容呢？ 跑步 🏃🏻🏃🏻🏃🏻🏃🏻 或者 游泳 🏊🏻🏊🏻🏊🏻🏊🏻 之类的剧烈运动， 攀岩，滑雪应该也可以。 如果你能静下来的话，可以尝试看书，冥想之类的活动， 不过笔者感觉静下来不是一件容易的事情。 深呼吸。 如果你无法主动做到这件事，就尝试上面的剧烈运动。 去做想做的事情。 这是一个非常有趣的选项，因为抑郁症患者往往都是什么都不想做。 去做一件可以帮助其他人的事情。 施舍给乞丐金钱 （部分假乞丐是很可恨，但是就我们这边来说，我们确实是帮助到了一个乞丐，也许那个乞丐是假的， 但是那又如何呢？） 去孤儿院，养老院看看， 做做义工， 捐捐钱之类的。 （笔者并没有尝试过这个行为） 这样和可以别人交互， 在交互的时候我们也许能放松下来听别人讲话。 去旅行。 不想交谈， 可以不和任何人说话。 但是大自然会和你对话的。 玩电子游戏， 玩的下去的话， 完全可以尝试下。 接受自己。 抑郁症患者是心理上生病了， 就像身体上感冒了一样， 是一件普通平常的事情，也是可以治疗好的。 总得来说，意志是比身体更加强大的， 我们都可以为自己的行为做出选择。 是的，你具有选择权，要做什么的选择权。 做什么都比躺在床上思考自己更好，只要有新的清澈的水进来，墨水池就会发生变化，即使变化非常微小，完全感觉不出来。 但是持续下去，就可以摆脱墨水池的状态。 运动会让你不得不放空大脑， 因为你没有可以让大脑使用的能量了。 放空的时候， 你什么都不会想， 也会减少焦虑，抑郁等。 去认真的做一件事情， 会使你进入心流状态， 忘记自我，忘记抑郁焦虑等情感， 会得到放松。 2、 把视线由向内转而到向外 如果你经常在大脑里面思考一些关于自己的事情，比如： 那个时候，我如果这样做会不会好些？我今天和某某的对话是不是很蠢？ 某某今天的表现真好啊？ 我未来要这样这样。 那说明，你可能太过的关注自己了，你的思维只在大脑里面打转，你的眼睛对物体视而不见，你的耳朵和嘴巴不闻不问。 这些基本都是视线太过向内了的表现， 笔者并没有认为不应该关注自己，而是认为，太多的关注自己，对解决问题没有任何帮助。 这就需要把视线由向内转到向外， 让你的眼睛看清楚物体，让外界的事物占据你的大脑，让你的恐惧在不知不觉中慢慢消退。 这里有一个有意思的事情是：你的大脑在大多数情况下，在同一时间只能思考一件事。所以，当你考虑为什么花儿是那么红🌸🌸🌸🌸的时候，你就不会恐惧。 当然，当你停止了思考之后， 恐惧可能会卷土重来，这时只要再尝试其思考绿叶即可。 3、 药物 这个不是核心观念， 但是在某些情况下， 也许你可以依赖一下药物。 就笔者个人来说，只服用过一天的药物， 因为那几个药物会导致我失眠。。 不过，那一天，我感觉到十分平静。 注意： 尽量不要长期依赖药物。 ","date":"2020-07-19","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%8A%91%E9%83%81%E7%97%87%E7%9A%84%E9%9A%8F%E6%83%B3/:2:1","tags":null,"title":"关于抑郁症的随想","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%8A%91%E9%83%81%E7%97%87%E7%9A%84%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"扩展阅读 我的另外一篇博文： 梦境和现实的随想 ","date":"2020-07-19","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E6%8A%91%E9%83%81%E7%97%87%E7%9A%84%E9%9A%8F%E6%83%B3/:3:0","tags":null,"title":"关于抑郁症的随想","uri":"/caprice/%E5%85%B3%E4%BA%8E%E6%8A%91%E9%83%81%E7%97%87%E7%9A%84%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"简述 本文主要吐槽得是店铺行为和店小二得处理内容。 源头： 最近在搞博客， 偶尔需要放点图才好， 但是没有找到很好得图床，所以想利用自己家里得服务器搭建一个。 然后正好我搬家，就考虑正好换一个上行带宽高一些得宽带。 我原来得宽带： 电信， 上行20M， 下行200M 1200/年 办理完之后得宽带： 电信， 上行100M， 下行200M 2189/年 ","date":"2020-07-09","objectID":"/caprice/%E5%9C%A8%E6%B7%98%E5%AE%9D%E4%B8%8A%E5%8A%9E%E7%90%86%E4%B8%8A%E6%B5%B7%E7%94%B5%E4%BF%A1%E7%9A%84%E4%B8%80%E6%AC%A1%E8%AE%B0%E5%BD%95/:1:0","tags":null,"title":"在淘宝上办理上海电信的一次记录[吐槽文，牢骚文]","uri":"/caprice/%E5%9C%A8%E6%B7%98%E5%AE%9D%E4%B8%8A%E5%8A%9E%E7%90%86%E4%B8%8A%E6%B5%B7%E7%94%B5%E4%BF%A1%E7%9A%84%E4%B8%80%E6%AC%A1%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"详细过程 那会正好618， 天猫店铺上海电信旗舰店有个促销， 1799/年可以办理，本着省钱得态度就买了下。 买完之后，客服就紧跟着发了我3个宝贝， 让我全部拍了。 设备押金200元 安装费100元 首月费用200元 OK， 好吧， 我拍了，谁叫我想贪便宜呢。 全部购买完之后， 客服小姐姐告诉我需要2~7个工作日才能安装，在我得强烈要求下，即时帮我提交了单子， 第二天师傅就来安装了。 👍👍👍 安装过程 这个小区， 一户只给安装一个电信宽带， 我新租得地方，房东装过一个了， 我想装得话，就必需先把房东得宽带拆掉。。 🐦🐦🐦🐦🐦 电信得光纤是从墙里直接通到屋里得， 我问了师傅没有别得办法了吗，他告诉我『是的，没其他办法了』 我很想知道， 如果墙里得光纤坏了， 这一户是不是就无法安装电信宽带了。。 Interesting 和房东沟通之后，房东同意我把他安装得宽带拆掉了，但是需要提供网络给其他租客使用。 店铺充值极其慢 从上海电信得微信网厅绑定了宽带之后，我一看欠费200多，就去询问了下淘宝客服。 客服说1~7个工作日 才充值那500块钱。 我惊呆了，都2020年了，还有这么慢的。 现在充值手机话费什么得，基本都是秒到， 最多也就10分钟内到账，这家店居然需要1-7个工作日。。 所以我只好自己用微信充值，秒到账， 然后手机流量就可以使用了。 笔者目前使用得是联通8块钱一个月得套餐，所以需要使用电信宽带得4G手机卡上网。 但是欠费了，手机卡就用不了了，无法上网。。 你以为这就结束了？ 说实话，我本来是这么以为得。 不过呢， 我到了7月1号，早上到了公司之后，我就收到了电信得短信， 欠费1800+元。。 ？？？？？？？？ 嗯？ 什么鬼？ 淘宝订单都自动确认收货好久了，店家却没给我充值吗？ 我打开微信网厅一看， 妈的 fuck, 还真是。 我只好再和淘宝客服沟通。 客服说 『月初单子比较多，稍后就会到账得』 我心想， 那就等等看把。 次日， 充值了1500+。。？ 还欠费290左右。。 🐦🐦🐦🐦🐦 这是什么奇葩操作， 完全看不懂。。 没办法， 我只能再去找客服。 我： 我现在还是负数余额，能帮我查查到账了吗？ 客服： 话费这边是中旬给您充值得哦， 不影响宽带使用 我： ？？？ 我手机卡已经不能用了啊 客服： 中旬就会充值话费 我： 我是上个月中旬卖得， 你告诉我要1个月才能到账？ 客服： 是需要提交系统得 我： 。。。。 和店家无法沟通， 没办法，只能尝试售后，维权， 然后更蛋疼得事情来了。 点击订单页面上得 申请售后按钮， 淘宝提示： 抱歉，由于您不满足条件，无法申请退款。 我： ？？？ 那我真就白给了？ 我不服，所以我想找别得方式试试看，我点击了客服小蜜，发给他『订单投诉』 让我选择订单之后，提示我： 已经超过淘宝网维权受理时限，暂时无法发起维权申请。 我试了两次，都是返回同样的内容。 心中一万个草泥马奔腾而过。 🐦🐦🐦🐦🐦 我明明都没有收到货。。 阿西吧。 再后来，我突发奇想， 发送了『12315』 给客服小蜜， 然后马上就人工客服来了。 店小二第一句话： 『您消消气』 接着说： 『亲亲， 遇到了什么问题』 我： 巴拉巴拉得描述问题。 店小二： 『您消消气， 您得诉求呢？』 我： 巴拉巴拉得生气吐槽。 店小二： 『亲亲给您添麻烦了， 您得诉求呢？』 我： 我得诉求是到账啊，店家承诺一年得费用，但是却没有做到， 我认为店家在忽悠人啊 店小二： 『预编辑好得内容 （大概意思就是我会联系店家得）』 过了一段时间。 店小二私信我： 『有消息通知您呢，已经提交充值，在七月中旬完成充值，不影响宽带使用』 我： 我手机卡用不了啊， 大兄弟。 店小二： 『我还在联系商家』 次日早上。 店小二： 『商家表示已经提交充值，在七月中旬完成充值，不影响宽带使用』 我现在就极其无语，这店小二问我诉求，我多说一个字都浪费他时间，给我结果得却完全忽略了我得诉求。。 所以我只好发问： 那请问你完成了我得诉求吗？ 请求商家履行了他得职责吗？ 请问商家是不是虚假宣传？ 店小二给得回复是： 『亲亲，给您添麻烦了，您消消气』 之后我就懒得再回复他了，我之前一般使用两个平台， 狗东和淘宝，其实我挺偏向于淘宝得，但是这次得事情之后，我已经决定放弃淘宝了，能使用京东就使用京东，除非完全不行才使用淘宝。 我并没有建议你放弃淘宝，也没有建议你使用京东，我只是告诉你了关于淘宝售后得这个事实。 虽然京东可能也有这样得情况，但是我还没遇到，等我遇到了我可能就会转向其他平台。 顺带吐槽下联通8块钱得套餐办理。 如果想升级套餐， 打电话给10010应该就可以了， 但是如果想降到8块钱得，就得去营业厅，而且要去真的联通营业厅，合作的营业厅是不行的。 而且还需要先退掉很多相关得业务才行。 电信宽带注销也很麻烦，现在上海大部分营业厅都不支持异地拆机，都是要从哪个区办理得就要去哪个区拆机。 极其麻烦。 这里猜测： 这些电信运营商这么做得原因是想增加用户办理业务得难度和门槛， 让很多嫌麻烦得用户将就下，这样他们就可以赚取更多得金钱。 国内得企业似乎很多都这样， 拼命得想赚钱，各种套路搞你。 游戏则是各种坑钱。 注： 笔者没在国外生活过，所以不知道， 不对比评论，只是说下感觉上得国内状况。 经过本次处理，我对淘宝得售后深感害怕，所以已经转投其他平台。 ","date":"2020-07-09","objectID":"/caprice/%E5%9C%A8%E6%B7%98%E5%AE%9D%E4%B8%8A%E5%8A%9E%E7%90%86%E4%B8%8A%E6%B5%B7%E7%94%B5%E4%BF%A1%E7%9A%84%E4%B8%80%E6%AC%A1%E8%AE%B0%E5%BD%95/:2:0","tags":null,"title":"在淘宝上办理上海电信的一次记录[吐槽文，牢骚文]","uri":"/caprice/%E5%9C%A8%E6%B7%98%E5%AE%9D%E4%B8%8A%E5%8A%9E%E7%90%86%E4%B8%8A%E6%B5%B7%E7%94%B5%E4%BF%A1%E7%9A%84%E4%B8%80%E6%AC%A1%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"简述 软路由系统： pfSense 使用的 DNS 服务： DNS Resolver 可以考虑的 DNS 服务： BIND DNS 笔者曾经成功的设置好了 BIND DNS ,但是最近这次的安装，怎么都无法成功设置， 所以就尝试了下自带的DNS Resolver ，非常简单，一次搞定。 ","date":"2020-07-09","objectID":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%8A%E7%9A%84dns%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/:1:0","tags":null,"title":"软路由上的DNS使用记录","uri":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%8A%E7%9A%84dns%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"详细内容 ","date":"2020-07-09","objectID":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%8A%E7%9A%84dns%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/:2:0","tags":null,"title":"软路由上的DNS使用记录","uri":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%8A%E7%9A%84dns%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"DNS Resolver pfSense 自带这个包，而且这个是默认启用的服务，不需要安装新的 package。 点击导航栏的Services / DNS Resolver / General Settings 即可打开常规设置的面板。 向下拉取， 找到 Host Overrides 的字样， 点击下面的 + Add 按钮。 比如我现在想添加 owncloud.home.link 192.168.200.33 这样的一条记录。 Host: owncloud Domain: home.link IP Address: 192.168.200.33 Description: owncloud 如果你有另外一个域名也指向 192.168.200.33 比如 blog.home.link 那么可以在 Additional Names for this Host 里面直接追加 Host name: blog Domain: home.link Description: blog 然后点击 Save 按钮即可保存。 返回到 General Settings 窗口之后可能会提示你需要 应用变化， 此时点击 Apply 应用下即可。 现在在客户机里面尝试命令 ping owncloud.home.link 可以看到有没有成功解析。 使用nslookup owncloud.home.link 也是可以的。 ✅ 如果成功了， 那么你把想要解析的记录都添加进去即可。 ❌ 如果没有成功。。 则需要调试下。 使用命令 nslookup owncloud.home.link 192.168.200.1 查看是否能成功解析。 此处的 192.168.200.1 是 pfSense 的LAN 地址。也是 DNS 服务所在的地址。 ❌ 不能成功解析的话， 就查看上一步的操作，看看有没有问题，有没有写错。 ✅ 能成功解析的话， 说明客户机的 DNS 服务器没有使用 192.168.200.1 。 在客户机里面使用下面的命令查看当前使用的 DNS 服务器。 Windows : ipconfig /all 在结果里面查看 DNS 服务器对应的 IP 地址即可。 Mac/Linux: cat /etc/resolv.conf nameserver 字样后面跟着的是当前使用的 DNS 服务器 此时，结果值应该没有192.168.200.1 或者除了 192.168.200.1 之外还存在其他的 DNS 服务器。 注： 如果存在多个 DNS 服务器，则是随机使用其中一个，而不是按序使用 客户机如果是手动指定的 DNS 服务器， 则设定为 192.168.200.1即可。 如果是依赖软路由的 DHCP服务，则设置下即可。 打开菜单栏 Services / DHCP Server / LAN 下拉找到 Servers 标题， 里面有部分是 DNS Servers。 留空或者设置第一条为192.168.200.1，其他都留空 应该可以解决问题了。 注意： 客户机需要重新请求 DHCP 才能生效， 简单来说就是把网线拔掉5秒再插上去应该就可以了。 ","date":"2020-07-09","objectID":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%8A%E7%9A%84dns%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/:2:1","tags":null,"title":"软路由上的DNS使用记录","uri":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%8A%E7%9A%84dns%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"BIND DNS 这个工具，我使用过好几次， 因为我重装了 pfSense 好几次。。 前几次折腾了挺久之后可以用了，本次无论如何折腾都不行， 所以就放弃了。 （本次的包是通过配置还原安装的， 不知道有没有关联。。 ） 所以本部分内容可能是无价值的， 你可以选择跳过不读。 我个人对这个工具的感觉是： 极其难用 好了， 吐槽结束， 让我们开始设置把。 简单来说， 大概需要做下面的步骤。 添加一个 View 添加一个或者几个 Zone 关闭其他的 DNS 服务（DNS Resolver/DNS Forwarder 等) 启用 BIND DNS 点击 Services / BIND DNS Server 可以打开 BIND 的设置面板。 添加 View 点击 Views Tab, 点击 Add 按钮 View Name: LanView Description: Default View Of LAN Recursion: Yes match-clients: any allow-recursion: any 或者 localnets Custom Options: 点击 Save 保存即可。 添加 Zone 一个 Zone 差不多对应一个 Domain ,就是一个域名。 比如我的域名是 owncloud.home.link \u0026\u0026 blog.home.link ，我建立的 ZONE 就是home.link owncloud \u0026\u0026 blog 则是在 zone 里面填写的。 Domain Zone Configuration Disable This Zone: unchecked ( 不勾选 ) Zone Name: home.link Description: zone of homelink Zone Type: Master View: LanView Master Zone Configuration: TTL: 128 Name Server: 192.168.200.1 (也许不对，但是我感觉是这样配置的。。) Base Domain IP: 192.168.200.1 allow-query: any Zone Domain records: Record: owncloud Type: A Priority: Alias or IP address: 192.168.200.33 点击 Save 保存即可。 关闭其他 DNS 服务 在 Services 菜单栏里面找找， 带 DNS 字样的可能都是， 点击进去之后， 第一个选项 Enable 确认是未勾选状态即可。 启动 BIND DNS Daemon Settings Enable BIND: checked (勾选) IP Version: IPv4 Listen on: LAN \u0026\u0026 loopback ( 按住 CTRL 可以选俩） 点击 Save 即可。 过一会 服务应该就启动了，使用 nslookup www.baidu.com 192.168.200.1 可以先试试 BIND DNS 有没有成功启动， 然后使用nslookup 命令测试自己填写的域名即可。 ","date":"2020-07-09","objectID":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%8A%E7%9A%84dns%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/:2:2","tags":null,"title":"软路由上的DNS使用记录","uri":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%8A%E7%9A%84dns%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"扩展阅读 nslookup 命令 OK， 但是 ping 不通是怎么回事？https://plantegg.github.io/2019/01/09/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82ping–nslookup-OK-but-ping-fail/ ","date":"2020-07-09","objectID":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%8A%E7%9A%84dns%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/:3:0","tags":null,"title":"软路由上的DNS使用记录","uri":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%8A%E7%9A%84dns%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"简述 家里使用的服务器，主要硬盘消耗是 openmediavault。 就是一个文件存储服务， 可以用来放电影，音乐，漫画等， 还可以支持TimeMachine。 因为存储的电影越来越多， 所以准备扩大下磁盘， 踩了点坑之后，成功更换了硬盘。 （个人来说 会每周六晚上看一部电影，看完的也没删，所以比较费空间 😂） 本文使用的步骤是冷迁移，笔者是个菜鸡，暂时没有用到 vCenter ","date":"2020-07-09","objectID":"/periphery/esxi%E6%9B%B4%E6%8D%A2%E7%A1%AC%E7%9B%98%E7%9A%84%E8%AE%B0%E5%BD%95/:1:0","tags":null,"title":"ESXi更换硬盘的记录","uri":"/periphery/esxi%E6%9B%B4%E6%8D%A2%E7%A1%AC%E7%9B%98%E7%9A%84%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"详细步骤 （冷迁移） 简述就是，关闭并移动虚拟机， 然后卸掉旧硬盘， 使用 U 盘重新安装 ESXi，并恢复配置。 注：迁移系统的话，才需要重装。 我现在有3块硬盘 2T 得硬盘， 里面放了系统和部分虚拟机 4T 得硬盘， 里面全是虚拟机 12T 得硬盘， 新买的，目标硬盘。 步骤大概分为下面几步应该就 OK 了。 链接新的硬盘到现在的 ESXi 主机上。SATA 或者 NVME 应该都可以，只要 能识别就 OK。记得关机操作。。 开机后，登录 web 控制面板， 基于新的硬盘创建一个数据存储 左侧导航器其次选择存储 / 数据存储 / 新建数据存储 创建新的 VMFS 存储 给一个名称， 比如 _12T_ 选择该硬盘， 版本上似乎 5和6都可以。 关闭位于想更换硬盘上的所有虚拟机。 如果分区是基于两块硬盘创建得， 则可以将全部的虚拟机移动过去 比如我的分区1 是基于一块2T 的硬盘， 一块4T 的硬盘， 我就是把全部的虚拟机关闭移动的。 打开数据浏览存储器， 进行移动 左侧导航栏依次选择 存储 / 数据存储 / 数据存储浏览器 此时会看到两个及以上的数据存储区域， 点开一个之后，里面的每一个文件夹基本都是一个虚拟机。 点击文件夹，点击移动， 目标选择新的硬盘对应的存储区域 (_12T_) 静静等待完成就可以了。 笔者移动了大概6TB 的文件， 花了差不多24~36个小时，笔者是普通的机械硬盘。 拆除不需要的硬盘。。 把想要拆掉的硬盘排除掉。 比如 一个数据区域里面两个硬盘的话，则考虑选择不需要的硬盘，或者是需要的硬盘，点击删除分区表， 之后该硬盘就会从数据分区中移出，但是笔者不知道这么做有没有什么副作用。。 如果该硬盘对应着一个数据区域，则先把该区域删除掉，再删除分区表。 如果你不需要迁移系统的话， 这时应该已经 OK 了， 重新注册下虚拟机应该就差不多要成功了。 一般情况下， 再 『我已复制』 和『我已移动』 中 你应该选择『我已复制』 否则的话，可能虚拟机就无法启动了。 但是点击我已复制，网卡的 MAC 地址会变化，初除此之外应该还有别的变化。 我第一个虚拟机 pfSense ，点击的『我已移动』 之后就没能成功启动 😹😹😹 ​ 点了之后， 虚拟机的基本配置也没办法修改， 不知道为啥。。 接下来是如果你需要迁移系统的操作。 为什么要迁移系统？ 原因当然很简单啦， 因为系统装在了一块小的硬盘上。 机箱里没更多放硬盘的位置了。 导出 当前的 ESXi 的主机配置。 官方文档： https://kb.vmware.com/s/article/2042141 中文译本： https://kb.vmware.com/s/article/2042141?lang=zh_CN 我是在 ESXi 的命令行上进行操作的。 下载或者使用你原来的 ESXi 的ISO 镜像， 然后安装新系统。 如果你是超微的主板， 则可以考虑使用 IPMI 来管理，很方便的。 如果没有的话， 只能使用电脑的显示器了， 或者购买一个15寸的小显示器 😂 原来是怎么安装的，现在就怎么安装就好了。 至于安装位置， 选择具有空闲空间的硬盘，据说 ESXi在安装的时候会自动识别硬盘上的内容， 不会操作 VMFS 分区的里面文件。 （但是我还不能确定这种说法的正确性） 我个人的话， 是使用的空闲硬盘，没有数据的硬盘。 成功进去到 web 管理界面之后， 进行配置的还原工作 如果你是使用的当初的安装镜像， 那么恭喜你，应该能正常操作。 如果你是使用了别的镜像（当初的安装镜像找不到了之类的原因） 那么操作就变得复杂起来了。 可见此文的2楼： https://communities.vmware.com/thread/554205 我的操作是这样的。 拷贝原有配置， 做一个备份。 我是在 Windows 的机器上进行操作的， 我一般使用360压缩 这是我一直在用的唯一一个360的软件 😂😂😂 但是 360压缩工具不支持tar.gz/tgz 文件的打包 我利用备份配置的方法在新系统上进行一次备份，导出。 然后把文件下载到本地。 将原来的配置文件解压， 并把全部文件上传到 ESXi 里面的 /tmp/abc 文件夹（文件夹需要自己创建， 使用sftp上传) 将现有配置文件的Manifest文件拷贝到第5步上传的文件夹里面， 覆盖掉原有的文件 使用 cd /tmp/abc \u0026\u0026 tar -czvf configBundle.tgz * 类似的命令完成打包 （abc 为你的文件夹名字） 使用 mv configBundle.tgz ../ 的命令把文件移动到 /tmp 目录 然后使用命令 vim-cmd -d info /hostsvc/firmware/restore_config 1 /tmp/configBundle.tgz 强制还原配置 之后应该会重启一下， 然后绝大部分配置都回来了。 使用步骤6进行注册虚拟机即可。 到目前为止， 冷迁移应该已经算完成了， 不过我发现了部分虚拟机还是无法启动的问题， 可能部分设置需要重新操作一下。。 ","date":"2020-07-09","objectID":"/periphery/esxi%E6%9B%B4%E6%8D%A2%E7%A1%AC%E7%9B%98%E7%9A%84%E8%AE%B0%E5%BD%95/:2:0","tags":null,"title":"ESXi更换硬盘的记录","uri":"/periphery/esxi%E6%9B%B4%E6%8D%A2%E7%A1%AC%E7%9B%98%E7%9A%84%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"笔者的瞎比操作 在这种极其小白的情况下， 操作步骤往往得靠摸索和瞎想。 我现在有3块硬盘 2T 得硬盘， 里面放了系统和部分虚拟机 4T 得硬盘， 里面全是虚拟机 12T 得硬盘， 新买的，目标硬盘。 我得想法是， 把2T硬盘里面得数据直接全部拷贝到12T 盘里， 然后启动应该就可以了。 并且，我真的这么操作了， 我使用 Windows 得软件DiskGenius 进行硬盘扇区拷贝，这是一种按照扇区拷贝得方式，速度极其慢， 使用了差不多4~5个小时才完成2T 文件得拷贝。 拷贝完成后， 我满心欢喜得用12T 硬盘代替了2T 得硬盘， 打开服务器。 🐦🐦🐦🐦🐦 🐦🐦 不行， 提示错误： bank5 not a vmware boot bank bank6 not a vmware boot bank no hypervisor found 我搜了下，搜了下，差不多都是说重装就好了， ESXi 不会覆盖之前得 VMFS ，然后重装了。 然后现在约等于好了。 ","date":"2020-07-09","objectID":"/periphery/esxi%E6%9B%B4%E6%8D%A2%E7%A1%AC%E7%9B%98%E7%9A%84%E8%AE%B0%E5%BD%95/:3:0","tags":null,"title":"ESXi更换硬盘的记录","uri":"/periphery/esxi%E6%9B%B4%E6%8D%A2%E7%A1%AC%E7%9B%98%E7%9A%84%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"FAQ ","date":"2020-07-09","objectID":"/periphery/esxi%E6%9B%B4%E6%8D%A2%E7%A1%AC%E7%9B%98%E7%9A%84%E8%AE%B0%E5%BD%95/:4:0","tags":null,"title":"ESXi更换硬盘的记录","uri":"/periphery/esxi%E6%9B%B4%E6%8D%A2%E7%A1%AC%E7%9B%98%E7%9A%84%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"Q： 更换了硬盘之后无法启动虚拟机 A： 先检查一下你的虚拟机有无快照， 经过我的经验来看，有快照的虚拟机都无法成功启动，而没快照的则都可以。 当你的虚拟机存在快照的时候。 （如果不存在，我也不知道是什么情况） 你可以尝试下『整合磁盘』 功能。 不行的话， 则检查下你的虚拟机配置， 对比硬盘空间大小 和你原来的大小是否一致？ 不一致的话，则删除现在的那个小的硬盘， 然后添加现有磁盘， 选择虚拟机目录里面的磁盘 操作结束之后保存， 然后启动虚拟机。 也许这个时候就能启动了🎉 还不行的话， 就考虑这样操作下， 我也不知道原理是啥 😂 😂 参考链接： https://getsysadminblog.com/2017/04/21/how-to-fix-a-general-system-error-occurred-vim-fault-genericvmconfigfault-when-creating-or-removing-snapshots-in-vmware/ 新建一个虚拟机，设置成和原来虚拟机差不多的配置 移出默认创建的磁盘， 保存，下一步。 如果你看到了 『在创建成功后启动虚拟机的电源』 这个选项的话， 不要勾选它。 成功创建虚拟机之后， 选择添加现有硬盘， 选择原来虚拟机的那个目录里面的磁盘，应该是一个快照磁盘。 保存配置，然后 在现在那个虚拟机上进行『整合磁盘』 的功能 完成后， 试着启动原来的 虚拟机（就是不能启动的那个） 此时应该就可以成功启动了 🎉🎉🎉🎉 ","date":"2020-07-09","objectID":"/periphery/esxi%E6%9B%B4%E6%8D%A2%E7%A1%AC%E7%9B%98%E7%9A%84%E8%AE%B0%E5%BD%95/:4:1","tags":null,"title":"ESXi更换硬盘的记录","uri":"/periphery/esxi%E6%9B%B4%E6%8D%A2%E7%A1%AC%E7%9B%98%E7%9A%84%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"简述 软路由系统: pfSense， 基于FreeBSD 软路由是放在 esxi上的一个虚拟机 使用电信拨号上网 LAN 口1 192.168.200.0/24 自用 LAN 口2 192.168.100.0/24 因某些原因分享网络给其他一起合租的租客使用。 ","date":"2020-06-27","objectID":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/:0:1","tags":null,"title":"pfSense 软路由的使用","uri":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":null,"content":"开始 我现在是电信1000M/100M 的宽带， 之前使用的不到300块钱的 TPLink 路由器在 speedtest.cn 上只能跑700M 左右的下行。 更换了之后能跑到1000M 左右， 感觉还是 OK 的。 ","date":"2020-06-27","objectID":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/:1:0","tags":null,"title":"pfSense 软路由的使用","uri":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":null,"content":"ESXI 没有使用虚拟机的读者可以跳过这一部分。 我目前的情况是这样的 pfSense 作为主路由 其他虚拟机 我的无线路由器 我的 PC 台式机 我的无线设备， 笔记本电脑，平板，手机等 千兆交换机1 其他租客1的路由 其他租客2的路由 因为不知道博客的主题是否支持流程图就先用这种表达方式了。 新建 VMkernel 网卡 我本来是使用的别的路由， 现在的 esxi 的管理地址是192.168.0.23 ， 我更换为pfSense 之后，就没这个网段了， 所以需要处理下 esxi 的 web 管理地址的问题。 新建虚拟交换机 名字起个有含义的就可以， 比如MyRoute 上行链路， 选择一个要连接路由器的网口即可（我的自用服务器上有4个网口） 新建端口组 名字示例： esxiPort VLAN 填0 即可 虚拟交换机 选择我们上一步创建好的。 新建 VMkernel 网卡 端口组选择上一部创建的 IP上选择 仅 IPv4 应该就可以了 IPv4设置 选择静态 我给自用网络设计的网段是 192.168.200.1-192.168.200.254 所以我给 VMkernel 的地址是192.168.200.10 同一个网段应该就 OK 了 子网掩码填写255.255.255.0 即可 服务选择 管理 现在差不多就可以从新地址上访问了。 不使用其他路由的情况下， 把网线从电脑上直连服务器上选择的那个网口。 本机 PC 的地址也设置在 192.168.200.x 网段里面 打开浏览器 访问 192.168.200.10 应该就可以访问了。 其他口的网络设置 WAN 口 添加一个虚拟交换机 比如起名叫 WAN_PPPOE 上行链路选择链接电信光猫使用的网口 新建一个端口组 比如起名叫pppoe1 选择 WAN_PPPOE 虚拟交换机 VLAN ID 选择0 LAN 口 因为要使用我们自己的 LAN 管理 esxi 所以会使用之前建立好的MyRoute虚拟交换机 新建一个端口组 比如起名叫 pfSenseMyRouteLan 虚拟交换机选择 MyRoute 其他人使用的 网口 新建一个虚拟交换机 OTHERS_ROUTE ，网口选择别的，用于链接千兆交换机1 新建一个端口组 OthersRoute 使用 OTHERS_ROUTE 作为虚拟交换机 ","date":"2020-06-27","objectID":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/:1:1","tags":null,"title":"pfSense 软路由的使用","uri":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":null,"content":"pfSense 从 https://www.pfsense.org/download/ 官网地址上下载最新的镜像即可。 如果需要安装在全新的物理机上， 下载一个镜像写入的工具， 比如 软碟通，啥的把镜像写入 U盘，然后从 U盘中启动。 如果是安装在虚拟机里面， 则新建一个虚拟机， 分配配置，选择镜像文件。 我使用的虚拟机配置如下 2 x 2 = 4核 的 CPU (E5-2650v2) 4GB 内存 600GB 硬盘（本来想用squid做透明代理的，所以给的多） 3个网络适配器 WAN 口1个 端口组 pppoe1 LAN 口1个 端口组 pfSenseMyRouteLan 其他人的网络口 1个 端口组 OthersRoute 安装过程一般是下一步下一步就好了， 中间可能需要指定 WAN 口，LAN 口。使用 esxi 的读者查看网络适配器的 mac 地址即可辨认， 物理机的读者 我这里的办法只有尝试了。。 这里需要说明一下， 设置好的之后口 是可以变化的。 LAN 口的地址， 我是设置为的 192.168.200.1 ，然后设置 DHCP 服务为启用， 地址池可以填写192.168.200.100-192.168.200.254 WAN 口，其实可以先忽略， 或者设置成 从 DHCP 获取地址。 非常需要安装记录的读者 请百度/谷歌搜索一下，这类资料还是很多的。 链接 web 管理页面 此时，我的电脑使用网线链接 pfSense 上指定的 LAN 口，并且地址是 192.168.200.x。 我一般会先 使用命令ping 192.168.200.1 看看网络通不通。 可以 ping 的到的话，就说明 Luck， 可以使用 web 界面管理了。 👍 👍 👍 不能访问的读者， 很可能是连错 网口了。 如果你连接了正确的网口， 但是 ip 地址没有给你自动设置好。 你可能需要手动设置，信息填写如下 地址: 192.168.200.100 子网掩码: 255.255.255.0 网关: 192.168.200.1 如何查看当前的 ip 地址呢？ Windows: ipconfig /all Linux: ifconfig web 管理界面 成功访问到192.168.200.1 之后， 使用 admin/pfsense 进行登录，首次登录可能有点慢。 首次登录之后会要求设置一些事情。 地址按照上面说的填写即可。 时区选择自己所在的区域， 我一般选择 Asia/Shanghai 成功设置之后， 看到的界面是 Dashboard ，可以从导航栏中的Status/Dashboard按钮打开。 电信拨号 使用网线链接电信光猫和 WAN_PPPOE 对应的网口。 在 web 管理界面选择 Interfaces/WAN 进入 WAN接口的管理界面 IPv4 Configuration Type 选择 PPPoE ,IPv6 的配置可以不用管 MTU 填写1480 向下滑动， 会看到 PPPoE Configuration 填写宽带的用户名密码即可。 注意，电信师傅给的用户名密码， 可能需要添加ad开头才能使用 原因我暂时不知道。 Dial on demand 勾选。 这个选项可以使宽带断线重连。 Idle timeout: 172800 Reserved Networks: 两个都勾选 填写完成之后点击 save 保存， 之后会提示 是否apply changes ，选择Yes 之后可能会卡一会， 因为会进行宽带拨号。 这里需要注意下， 如果你刚从别的路由把网线拔下来， 可能需要换个光猫上的网口。 点击导航栏Status/Interfaces 可以查看几个网络适配器的状态。 此时的 WAN 口有一个Status 值为 up 表示链接成功， 并且会有 ip 和 dns 服务器的信息 值为 down 表示链接失败 大概信息如下，就是说明链接成功了。 (*.*.*.* 是隐藏信息) Status up PPPoE up Uptime 1d 20:23:57 IPv4 Address ... Subnet mask IPv4 255.255.255.255 Gateway IPv4 ... IPv6 Link Local fe80::20c:29ff:fef8:3670%em0 Gateway IPv6 fe80::ce1a:faff:feed:920 DNS servers 116.228.111.118 180.168.255.18 MTU 1480 In/out packets 52170750/29521762 (63.12 GiB/3.75 GiB) In/out packets (pass) 52170750/29521762 (63.12 GiB/3.75 GiB) In/out packets (block) 23698174/3 (406.33 MiB/189 B) In/out errors 0/0 Collisions 0 上网 能成功拨号的话， 就差不多快能上网了。 此时你可以尝试一下， 如果你能上网，那么 OK， 就没太多事情了。 如果你不能，就检查下Firewall/Rules/Lan 的内容，此时一般都是防火墙规则的问题。 查看你是否有 类似这样的标记 ✔️(绿色的) IPv4* LAN net * * * * none deault allow xxx 如果没有的话，自己新加一个。 Action: Pass Interface: Lan Protocol: Any Source: any Destination: any Description: allow lan access internet 保存后应用 应该就可以上网了。 （如果前面没有 block/reject 的规则的话。。） 我设置OtherRoute的规则在后面指出。 端口转发 内网访问映射出去的端口 先启用内网可以访问映射的端口，不然只有外网能访问的话就很不方便。 点击System/Advanced/Firewall \u0026 NAT 向下滑动， 找到Network Address Translation 标题。 勾选 Enable NAT Reflection for 1:1 NAT 和Enable automatic outbound NAT for Reflection 然后 保存就可以了。 添加要映射的端口 点击Firewall/NAT/Port Forward 点击add 添加一条新的规则。 Destination port range 填写端口范围， 单端口就写相同值 Redirect target IP 填写内网的 ip,比如 192.168.200.33 Redirect target port 填写端口 Description 写一个有意义的描述 点击保存， 然后应用。 应该就可以访问了。 ","date":"2020-06-27","objectID":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/:1:2","tags":null,"title":"pfSense 软路由的使用","uri":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":null,"content":"本次操作我碰到的其他问题 ","date":"2020-06-27","objectID":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/:2:0","tags":null,"title":"pfSense 软路由的使用","uri":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":null,"content":"TPLink 路由器怎么做AP 模式 设置路由地址为手动， 然后设置为192.168.200.99 （没被使用的任意地址即可） 把pfSense 的 Lan 口 链接到路由器的随意 Lan 口（比如 Lan 口1） 我的电脑链接 路由器的其他 Lan 口 路由器的 Wan口空着。 此时电脑和链接的无线设备应该都可以上网了 ","date":"2020-06-27","objectID":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/:2:1","tags":null,"title":"pfSense 软路由的使用","uri":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":null,"content":"其他租客的防火墙规则我是怎么设置的？ 默认情况下， 192.168.100.x 是可以访问到192.168.200.x 的， 就是说其他租客有可能会访问到我自己的虚拟机，自己的设备， 这是我不希望看到的。 所以我的防火墙规则是这样的。 点击Firewall/Rules/OthersRoute 点击 add 添加第一条规则 Action: Pass Protocol: Any Source: OthersRoute net Destination: Network, 192.168.100.1 / 24 Description: allow others access their other devices 点击 Save 保存 点击 add 添加第二条规则 Action: Block Protocol: Any Source: OthersRoute net Destination: Network, 192.168.0.0 / 16 Description: deny others access mylab 点击保存 点击 add 添加第三条规则 Action: Pass Protocol: Any Source: OthersRoute net Destination: any Description: allow others access internet 点击保存 这三条规则让他们不能访问除了192.168.100.x 的其他局域网内容。 从而避免他们访问到我的虚拟机。 第三条规则是允许他们访问互联网 规则是按照顺序来判断的，符合哪个规则就使用哪个 Action 。 ","date":"2020-06-27","objectID":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/:2:2","tags":null,"title":"pfSense 软路由的使用","uri":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":null,"content":"我是如何给其他人限速的呢？ 先添加限速器， 然后使用就可以了。 点击 Firewall/Traffic Shaper/Limiters 点击 add 新建下载速度的限速器 Enable: 勾选 Name: DownloadLimiter Bandwidth: 300 Mbit/s 点击 Save 保存 点击 add 新建上传速度的限速器 Enable: 勾选 Name: UploadLimiter Bandwidth: 30 Mbit/s 点击 Save 保存 如果需要应用， 则应用一下。 点击Firewall/Rules/OthersRoute 找到防火墙规则 找到第三条规则（其他人可以访问互联网的那条） 点击 笔形状的按钮 进行编辑操作。 滑动到最下面， 点击 Display Advanced 按钮 滑动到下面，找到 In / Out pipe 第一个下拉框选择UploadLimiter ,第二个下拉框选择DownloadLimiter 。 保存然后应用就可以了。 PS: 速度根据自己的需求调整即可。 谢谢阅读 😃😃😃😃 ","date":"2020-06-27","objectID":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/:2:3","tags":null,"title":"pfSense 软路由的使用","uri":"/periphery/%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":null,"content":"简述 自学是什么？ 自学 。 对于任何一个想要进步的人来说， 都应该必备的技能。 下面引用百度百科的一句话 - 百度百科 自学，有多种含义，可以是指人吸收接纳事物的能力。也指一种状态，即在没有接受指导和教育的情况下掌握某种技能。 自学往往意味着， 你可以不借助别人的实时指导来学习某一个技能。 自学是一种很重要的能力！ 自学有什么用？ 一般情况下， 自学可以帮助你实现你所想要的大部分目标， 异想天开和简直不可能的目标也有相当的可能性去实现。 比如你想学会下面的某种技能 谈吉他 学编程 学手工 做手办 组装电脑 等等 …… 基本都是可以自学的， 但是某一类技能也许自学效果不好。 唱歌 - 自己听到的声音和别人听到的其实是不一样的。 跳舞 - 没法实时的矫正自己的姿势 游泳 - 自己一个人不敢下水 等等…… 上述的内容 虽然自学起来都有一定的困难， 但是在耗费功夫的前提下， 也是可以自学的。 ","date":"2020-06-01","objectID":"/caprice/%E8%87%AA%E5%AD%A6-%E6%94%B9%E5%96%84%E7%94%9F%E6%B4%BB%E7%9A%84%E5%BF%85%E9%9C%80%E6%8A%80%E8%83%BD/:0:1","tags":null,"title":"自学 - 改善生活的必需技能","uri":"/caprice/%E8%87%AA%E5%AD%A6-%E6%94%B9%E5%96%84%E7%94%9F%E6%B4%BB%E7%9A%84%E5%BF%85%E9%9C%80%E6%8A%80%E8%83%BD/"},{"categories":null,"content":"具体的方法 如何操作呢 自学是相当有难度的，因为很难开始，而且很容易就放弃了。 所以最好循序渐进的进行学习，不要一开始就挑战相当有难度的内容，这样可以保持兴趣，持续学习下去，然后持续的提高。 学习可以使用的资源 这里首推书籍 因为好的书籍往往都比较系统，全面的讲解某一类内容，而且看完了这本书之后，它还有拓展阅读的内容，可以获取到更多的学习资源和方向。 那么，如何找书呢？ 一般情况下，我都是百度搜索一下，我一般会尝试从经典书籍入手，因为看一本经典书籍之后基本上就简单入门了某个领域。 Kindle 这里给Kindle打个广告，因为真的很好用， 可以把大量的书籍内容放到一个小小的电子设备里面，方便携带，方便在坐车的时候看。 Kindle可能不适合看带有大量图示的专业书籍 当当网，淘宝，京东 这些电商也是会售卖书籍的，可以买买实体书，实体书最大的缺点可能就是搬家不方便，看的时候比较大吧。。但是和里面的知识相比，这些缺点简直都不算缺点。 书籍的缺点 枯燥 无聊 互动少 看不懂的时候没法直接问 次要推荐视频 某类操作性的内容，和唱歌跳舞等是比较推荐视频的。 那么如何找视频呢 可以试试B站，Youtube找找，当然这是比较通常的网站。针对一些特别的领域，应该有专门的网站做这样事（这类网站的视频应该都是收费的。） 视频的缺点 慢，啰嗦。 看文字往往是比听声音快的。 视频结尾往往是推荐自己的公众号，而书籍往往可能是推荐同类的书。 ","date":"2020-06-01","objectID":"/caprice/%E8%87%AA%E5%AD%A6-%E6%94%B9%E5%96%84%E7%94%9F%E6%B4%BB%E7%9A%84%E5%BF%85%E9%9C%80%E6%8A%80%E8%83%BD/:0:2","tags":null,"title":"自学 - 改善生活的必需技能","uri":"/caprice/%E8%87%AA%E5%AD%A6-%E6%94%B9%E5%96%84%E7%94%9F%E6%B4%BB%E7%9A%84%E5%BF%85%E9%9C%80%E6%8A%80%E8%83%BD/"},{"categories":null,"content":"自学 VS 报班 自学可以尝试寻找一些免费资源先学习起来，很多课程为了吸引付费的人群，前几课可能都是免费的，可以试着看看。 先找免费的资源学习，可以知道自己到底是不是真的喜欢某一个东西，可能你只是觉得你喜欢某个东西。 如果报班的话，往往需要先交钱，再学习，中途放弃的话，一般是会亏损了金钱。 那么，报班的好处是什么呢。 很多人和你一起学习，你可能会更容易坚持下去。 教导的老师是一个活人，有问题的话可以问问他。但是，很多培训班的老师都很水的，你问他，他可能也不知道答案。 学习资源不用自己找，培训机构等会自己准备。 这其实也有一个坏处，就是培训机构的教材可能是很老的技术，你学习了之后，上班的话还需要重新学习新的技术。 ","date":"2020-06-01","objectID":"/caprice/%E8%87%AA%E5%AD%A6-%E6%94%B9%E5%96%84%E7%94%9F%E6%B4%BB%E7%9A%84%E5%BF%85%E9%9C%80%E6%8A%80%E8%83%BD/:0:3","tags":null,"title":"自学 - 改善生活的必需技能","uri":"/caprice/%E8%87%AA%E5%AD%A6-%E6%94%B9%E5%96%84%E7%94%9F%E6%B4%BB%E7%9A%84%E5%BF%85%E9%9C%80%E6%8A%80%E8%83%BD/"},{"categories":null,"content":"结尾 无论书籍也好，视频也好，都可以帮助你学习到新的知识。 我们从小学可能就被教导了，知识改变命运。就我个人的例子来看，我现在也是这么认为的。 如果你对你现在的生活很不满意，想要改变的话，自学是一个必不可少的能力。 如果你安于现状的话，那也很好，无需改变。 知识改变命运。 ​ ","date":"2020-06-01","objectID":"/caprice/%E8%87%AA%E5%AD%A6-%E6%94%B9%E5%96%84%E7%94%9F%E6%B4%BB%E7%9A%84%E5%BF%85%E9%9C%80%E6%8A%80%E8%83%BD/:0:4","tags":null,"title":"自学 - 改善生活的必需技能","uri":"/caprice/%E8%87%AA%E5%AD%A6-%E6%94%B9%E5%96%84%E7%94%9F%E6%B4%BB%E7%9A%84%E5%BF%85%E9%9C%80%E6%8A%80%E8%83%BD/"},{"categories":null,"content":"简介 理财有风险，入市需谨慎。 银行利息往往是低于通货膨胀率的。 因为想理财，所以就考虑了股票。 炒美股需要使用到的工具如下： 华美银行 velo 雪盈证券 招商银行 或者其他国内银行 本文使用 刀 代替 美元单位， 比如 25刀就是指25美元 本文中没有写单位的 表示人民币。 ","date":"2020-05-11","objectID":"/caprice/%E7%82%92%E7%BE%8E%E8%82%A1%E8%B5%B7%E6%AD%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/:0:1","tags":null,"title":"炒美股起步的一些记录","uri":"/caprice/%E7%82%92%E7%BE%8E%E8%82%A1%E8%B5%B7%E6%AD%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"流程 购置外汇 因为要转美元到华美银行里面， 所以先购买美元 😂 招行手机APP ，搜索 外汇购汇 首次入金 建议3100 刀以上， 大概人民币22000+ （2020年汇率） 理由一般写旅游， 听朋友说 5000刀以下是系统自动判断的， 一般都能过。 等待一段时间即可收到成功的通知。 其他银行的App 应该也可以。 转账 先申请Velo的账户，然后转入即可 Velo 是一个手机App, 可以试着在国内的手机助手里面搜索以下， 苹果就直接AppStore上搜索即可。 申请账户只需要身份证就可以了。 缺点有几个。 首次入金需要大于 2500 刀 每个月要收25刀 的 账户管理费 （2020年6月25号起） 优点是可以其申请一张Visa的借记卡， 然后可以在国内进行消费。 （美元直接消费） 申请成功之后会给一些转账信息。 在招行App 里面填写转账信息之后 等待即可。 记得确认信息没填写错误😹 转账会收取手续费+电报费， 电报费一次100，我那次转账300+ 国内手续费 中间银行也会收取过路费。 转账需要几天的时间完成，Velo 到账之后会有一个美国工作日的确认时间。 之后才可以用。 申请雪盈证券的账户 这一步也需要身份证。 雪盈证券是盈透证券的全披露经纪商。 简而言之，雪盈证券使用的是盈透证券的内容，钱和股票都是放在盈透证券里面的。 盈透证券好像只提供英文的界面， 雪盈证券则是中文界面。 申请成功之后， 雪盈证券会给 盈透证券的登录用户名密码， 之后就可以去盈透证券的官方网站登录了。 入金 入金之后就可以购买股票了 下载盈透证券的应用 IBKR可以在 360手机助手，百度助手里面搜索下载 成功绑定之后， 登录盈透证券的官网。 选择入金 ， 选择绑定银行卡的方式， 此处绑定 Velo 的银行卡 认证方式选择传统认证， 因为Velo 现在不支持新的验证方式 好像是这样 😂😂😂 之后盈透证券会转 两笔小于1刀的转账到你的Velo 账户里面， 然后再收回。 填写正确的两笔转账的数值就可以绑定了。 绑定成功之后可以选择 ACH(自动清算系统) 入金的方式 利用 ACH 入金不需要手续费， 但是入金后4个工作日不能使用那笔钱。 直接转账的方式有手续费， 但是入金后 可以马上使用。 购买股票 等待钱可以用的时候 就可以购买股票了。 链接 Velo https://www.velobank.com/ 已墙 华美银行 https://www.eastwestbank.com/ 已墙 雪盈证券 https://www.snowballsecurities.com/ 盈透证券 https://www.ibkr.com.cn/ 最后 我还没有把钱提出来过， 因为我还没有赚到钱 😹😹😹 美股按照美国时间 开市闭市 感谢阅读​ 🎉 ","date":"2020-05-11","objectID":"/caprice/%E7%82%92%E7%BE%8E%E8%82%A1%E8%B5%B7%E6%AD%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/:0:2","tags":null,"title":"炒美股起步的一些记录","uri":"/caprice/%E7%82%92%E7%BE%8E%E8%82%A1%E8%B5%B7%E6%AD%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"理财的几种手段 基金 股票 房地产 （这个需要重新考虑 目前还算吗） 投资开店 （这个我没有啥头绪） 没钱咋办？ 存钱投资。 ","date":"2020-05-11","objectID":"/caprice/%E7%82%92%E7%BE%8E%E8%82%A1%E8%B5%B7%E6%AD%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/:0:3","tags":null,"title":"炒美股起步的一些记录","uri":"/caprice/%E7%82%92%E7%BE%8E%E8%82%A1%E8%B5%B7%E6%AD%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"Velo 如果可以的话， 不要注销 长时间没钱，它会关闭你的账户， 但是你可以交钱之后再次开启， 如果注销了就没办法再次开启了。 尝试找了一下转回国内或者消费的途径， 但是没有找到一个可用得。 据说， 券商里面的钱只能转给同名账户， 但是申请不到同名账户。 （最后更新于 2020年09月10日） 我试了以下工具，但是都不行， 没有找到可用方案 Velo 再次申请， 被拒绝。 TransferWise ， 可以注册， 但是要先存入20刀，才能给你美元账户信息。 没有美元账户信息， 就无法从券商哪里转进去。 我利用 拍住赏 -\u003e transferwise -\u003e 我的支付宝 的方式完成了一笔订单， 但是我的美元账户仍然没有开启。 不知道那些用拍住赏的人是怎么开通的。 我想从国内 电汇给 transferwise ， 但是不行， 我试了 招行，中国银行， 都让我去柜台操作， 而柜台则表示很大概率被拒绝， 以及需要很多材料。 因为 transferwise 提供的转账信息是 公司账户的。 Payoneer 派安盈。 **盈透能转给派安盈， 但是会被 派安盈拒绝掉。 ** 国泰银行见证开户 很多人说苏州银行可以提供这个服务， 打电话问，说是最近修改了限制，需要美国签证， 以及3个月的美国居住史。 Monzo 英国银行卡 可能是我得信息填写得有问题， 被拒绝掉了。 有点技巧得谎报信息 也许可以通过 Passbook 似乎是美国新出得一家可以在线开户得银行厂商 不需要 SSN ， 但是需要提供美国地址证明 Paxum 美国得一家虚拟银行， 不需要 SSN 等 使用中国护照，可以认证 但是（永远有一个但是） 需要提供地址证明。 且必需为拉丁文得地址证明， 由邮件沟通得知， 如果你得地址证明是非拉丁文的， 需要由公证人或者律师进行翻译，然后盖章。 我不知道 国内账户 能不能直接接收汇款。 同事说小额得港币也许进的来。 ","date":"2020-05-11","objectID":"/caprice/%E7%82%92%E7%BE%8E%E8%82%A1%E8%B5%B7%E6%AD%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/:0:4","tags":null,"title":"炒美股起步的一些记录","uri":"/caprice/%E7%82%92%E7%BE%8E%E8%82%A1%E8%B5%B7%E6%AD%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"Java8LocalDateTime以及相关内容 在Java8中，jdk包含了新的 时间API:LocalTime,LocalDate,LocalDateTime 先看一段代码吧 // LocalTime, only time LocalTime localTime = LocalTime.now(); LocalTime localTime1 = LocalTime.of(10,30,50); // 参数列表: hour,minute,second LocalTime nTime = localTime.plusHours(1); LocalTime hour = localTime.get(ChronoField.HOUR_OF_DAY); localTime.getHour(); localTime.getMinute(); // LocalDate, only date LocalDate localDate = LocalDate.now(); LocalDate localDate1 = LocalDate.of(2020,10,15); // 参数列表: year, month, dayOfMonth LocalDate year = localDate.getYear(); var year1 = localDate.get(ChronoField.YEAR); var date = localDate.getDayOfYear(); LocalDate nDate = localDate.plusYears(1).plusDays(15); // LocalDateTime, date and time LocalDateTime localDateTime = LocalDateTime.now(); LocalDateTime dateTime1 = LocalDateTime.of(2020,10,15,10,30); // 参数列表: year, month, dayOfMonth, hour, minute LocalDateTime dateTime2 = LocalDateTime.now(ZoneId.of(\"Asia/Shanghai\")); // 时区 System.out.println(\"dateTime2: \" + dateTime2); // dateTime2: 2020-05-21T17:58:24.494799200 LocalDateTime dateTime3 = localDateTime.plusYears(1).plusMonths(1).plusHours(-1).plusSeconds(-1000); System.out.println(\"dateTime3: \" + dateTime3); // dateTime3: 2021-06-21T16:41:44.494799200 var localDateX = localDateTime.toLocalDate(); var localTimeX = localDateTime.toLocalTime(); var zoneOffset = OffsetDateTime.now().getOffset(); var instant = localDateTime.toInstant(zoneOffset); System.out.println(\"instant: \" + instant); // instant: 2020-05-21T09:58:24.494799200Z long timestamp = localDateTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli(); var date1 = new Date(timestamp); System.out.println(\"date1: \" + date1); // date1: Thu May 21 17:58:24 CST 2020 简单来说， 有下面的几个要点 LocalDate 只表示日期， LocalTime 只表示时间， LocalDateTime 则表示日期+时间 三个类的API都是类似的， 或者说一样的 3个类的对象应该都是不可变的， 即 当调用plusXXX() 方法的时候， 旧对象并没有改动，返回的新对象是改动过的。 类似String.subString() 方法。 ZoneId 表示时区， 用of()方法获取一个时区的实例。 now() 方法获取到当前的时间内容。 这套API 比Calendar,Date 方便的很多。 可以用localDateTime.toInstant(zoneOffset) 语句转换成Instant 对象 可以用instant.toEpochMilli() 语句获取到 Unix时间戳， 然后转换成Date 对象 plusXXX() 系列方法用于增加或者减少相应的时间单位 withXXX() 系列方法用于设置单个属性（年，月，小时，分钟等） ","date":"2020-05-11","objectID":"/program/java8localdatetime%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/:1:0","tags":null,"title":"Java8LocalDateTime以及相关内容","uri":"/program/java8localdatetime%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"joda-time 第三方时间库 让我们先看一段代码 DateTime dateTime = DateTime.now(); dateTime.getWeekOfWeekyear(); dateTime.getDayOfMonth(); dateTime.getDayOfYear(); DateTime dateTime2 = dateTime.withWeekOfWeekyear(25).withDayOfMonth(1); DateTime dateTime3 = dateTime.plusWeeks(1).plusDays(1); Date date = dateTime.withTimeAtStartOfDay().toDate(); System.out.println(date); // Thu May 21 00:00:00 CST 2020 var zone = DateTimeZone.forID(\"Asia/Shanghai\"); DateTime dateTime4 = dateTime.withZone(zone).plusYears(1); System.out.println(dateTime4); // 2021-05-21T18:37:03.806+08:00 System.out.println(dateTime.toString(\"E MM/dd/yyyy HH:mm:ss.SSS\")); // 周四 05/21/2020 18:37:03.806 joda-time 和 LocalDate 系列类的方法差不多。 下面是joda-time 的一些特点 方法命名上， 没有采用getHour() 这类形式 ，而是使用了getHourOfDay() 这类形式，可读性更高了 更多的API 。除了常规的时间属性之外， 还有withTimeAtStartOfDay() 获取一天开始的时间，获取今天是今年的第几周 等等。 👍👍👍 toDate() 直接转换成 java.util.Date类型 👍👍👍 org.joda.time.DateTimeZone 用于表示时区。 toString() 方法可以直接格式化日期字符串 joda-time 的时间也是具有不可变性， 各种方法返回的都是一个新的对象。 ","date":"2020-05-11","objectID":"/program/java8localdatetime%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/:2:0","tags":null,"title":"Java8LocalDateTime以及相关内容","uri":"/program/java8localdatetime%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"总结 常规情况下， 使用 LocalDate 相关的时间函数就可以满足需求了，但是如果需要更多好用的API的话，使用joda-time 也是一个不错的选择。 😂😹 拓展阅读： https://www.ibm.com/developerworks/cn/java/j-jodatime.html https://docs.oracle.com/javase/8/docs/api/java/time/LocalTime.html https://docs.oracle.com/javase/8/docs/api/java/time/MonthDay.html ","date":"2020-05-11","objectID":"/program/java8localdatetime%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/:3:0","tags":null,"title":"Java8LocalDateTime以及相关内容","uri":"/program/java8localdatetime%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"简介 本文主要会介绍下面几种格式化的方式。 String.format() System.out.printf() 严格来说， 这并不是一种字符串格式化的方法。 MessageFormatter.format() ","date":"2020-05-11","objectID":"/program/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/:1:0","tags":null,"title":"java字符串格式化","uri":"/program/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/"},{"categories":null,"content":"String.format() 这是一个 较为常用的 格式化方法， 类似 C语言的 sprintf() 函数。 先给出几个示例 。 // in jdk10+ ，低于jdk10的时候， var 换成 String 即可 int a = 1, b = 2 ; var str1 = String.format(\"%d + %d = %d\", a , b , (a + b) ); // 1 + 2 = 3 float f = 1.5678f; var str2 = String.format(\"f = %f\", f); // f = 1.5678 var str3 = String.format(\"f = %.2f\" , f); // f = 1.56 var tmp1 = \"jack\" ; var str4 = String.format(\"hello,%s\", tmp1); // hello,jack var p = new PlayerInfo(); var str5 = String.format(\"a player: %s\" , p) ; // a player: xxxxx // 此处 p 的内容取决于 以下几个情况 // 当 p = null 的时候， 输出 null // 当 p != null 的时候， PlayerInfo 实现了 toString() 方法， 则输出 toString() 方法的返回值 // 否则输出 PlayerInfo@xxxx 这种字符串 。 var str6 = String.format(\"a: %d\\tb: %d\\t%%.2f= %.2f%n\"); // a: 1 b: 2 %.2f= 1.56 // \\t 表示制表符， 一般是 4个或者8个空格。 %% 表示 一个% %n 表示换行(\\n 或者\\r\\n 取决于系统) 看了上面的代码， 应该对这个方法有了一定的了解了， 下面来详细说明以下。 %开头的 叫占位符 , \\开头的叫做转义字符 。 本文出现的 转移字符如下 。 转移字符 含义 \\t 制表，一般表示4个或者8个空格 \\n 换行 LF (Line Feed) \\r 回车 CR (Carriage Return) \\r\\n windows 换行 CRLF 本文出现的 占位符如下 占位符 含义 %% % %s 字符串占位 %d 数字占位 (int,long,short) %f 浮点数 占位 (float, double) %n 换行， 自动适应系统 %b 布尔值 其他说明 %.2f 是一种略微高级的用法， 用于保留两位小数 。 看看下面的这段代码。 public class Format { public static void main(String[] args) { System.out.format(\"%f, %1$+020.10f %n\", Math.PI); } } // output // 3.141593, +00000003.1415926536 %1$+020.10f 这一长段的含义是 。 % 格式开始的符号 ，也可以理解为占位符开始的地方。 1$ 参数索引，也可以用 \u003c 符号来指定 前一个变量 +0 flags 20 宽度，低于这个宽度自动补0 .10 浮点数长度 f 转换字符， 代表 浮点数 日期 格式化日期 ， 先看几个示例。 Date date = new Date(); System.out.printf(\"%tT%n\", date); // 13:51:15 System.out.printf(\"hours %tH: minutes %tM: seconds %tS%n\", date, date, date); // hours 13: minutes 51: seconds 15 System.out.printf(\"%1$tH:%1$tM:%1$tS %1$tp %1$tL %1$tN %1$tz %n\", date); // 13:51:15 pm 061 061000000 +0400 详细说明下 %t 后面跟的内容 字符 含义 H,M,S 小时,分钟,秒 L,N 时间的毫秒和纳秒部分 p am/pm 上午，下午的字符串内容 z 时区 偏移的小时数 A,B,Y 星期几(英文), 月份的名字(英文) , 年份(数字) d 两位数字显示的 今天是当月的第几天 m 两位数字显示的月份 y 两位数字显示的年份 ","date":"2020-05-11","objectID":"/program/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/:1:1","tags":null,"title":"java字符串格式化","uri":"/program/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/"},{"categories":null,"content":"System.out.printf() 本方法是格式化字符串，然后输出到控制台。 使用方法约等于 String.format() 。 ","date":"2020-05-11","objectID":"/program/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/:1:2","tags":null,"title":"java字符串格式化","uri":"/program/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/"},{"categories":null,"content":"MessageFormatter() 我时候的时候非常简单， 像下面这种方式使用 MessageFormat.format(\"hello,{0}\", \"jack\"); // hello,jack MessageFormat.format()方法里面的第一个参数和String.format()的第一个参数的格式并不一样。 似乎在简单使用的话， 只需要使用 {Index} 这个占位符就好了。 这里有一篇详细介绍此内容的文章 https://vence.github.io/2016/04/29/javamethod-messageformat/ ","date":"2020-05-11","objectID":"/program/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/:1:3","tags":null,"title":"java字符串格式化","uri":"/program/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/"},{"categories":null,"content":"参考链接 https://vence.github.io/2016/04/29/javamethod-messageformat/ https://docs.oracle.com/javase/tutorial/essential/io/formatting.html https://www.runoob.com/w3cnote/java-printf-formate-demo.html 菜鸟教程，中文内容 https://www.baeldung.com/java-printstream-printf ","date":"2020-05-11","objectID":"/program/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/:2:0","tags":null,"title":"java字符串格式化","uri":"/program/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/"},{"categories":null,"content":"方法一 使用显卡超频工具降频显卡 笔者是微星 GTX1070 ，所以去微星的官网下载超频工具，然后对频率进行下降限制。 之后就不会掉线了。 方法二 打开机箱侧板 因为这游戏优化不是很好， 所以散热可能很大， 对于散热机箱不好的机箱可能需要打开侧板，否则CPU/显卡就过热了。 方法三 Steam 检测游戏完整性 右键游戏， 再选项卡中找到 本地文件 \u003e 检测游戏完整性 方法四 检测你的显卡插槽 如果你的显卡之前没什么问题， 升级了机器配置之后就不行了， 则考虑你的显卡是不是插错槽位了。 建议用娱乐大师跑跑分看看， 如果跑分过低，则说明哪里出了问题。 参考阅读： 小白装机记录贴(首次尝试AMD) ","date":"2020-05-11","objectID":"/caprice/pubg%E5%B4%A9%E6%BA%83%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/:0:0","tags":null,"title":"PUBG崩溃的解决办法","uri":"/caprice/pubg%E5%B4%A9%E6%BA%83%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"},{"categories":null,"content":"单线程 \u0026 单人做饭 ","date":"2020-05-11","objectID":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/:1:0","tags":null,"title":"利用做饭的流程来解释多线程的应用","uri":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/"},{"categories":null,"content":"单人做饭的流程 （我的流程） 选择吃什么 买菜，买肉 做米饭 洗肉（解冻肉），洗菜，择菜。 切肉 切菜， 切辣椒，葱花，姜片。 炸肉，下花椒八角， 老抽，醋 把肉盛出来 （或者不盛） 下葱姜， 炒香后下辣椒 下蔬菜 放调味料 关火， 盛出来 盛米饭，吃饭 ","date":"2020-05-11","objectID":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/:1:1","tags":null,"title":"利用做饭的流程来解释多线程的应用","uri":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/"},{"categories":null,"content":"单线程 这里假定任务是处理一个玩家购买金币的 socket 请求 获取网络数据 解析成我们需要的数据格式 从数据库/缓存取出玩家信息 对玩家数据进行上锁 获取配置表数据 （花多少钻石可以购买多少金币） 检测玩家的钻石是否足够 修改钻石和金币的数量 保存玩家的数据到数据库/缓存， 并解锁玩家数据 产生响应结果 发送数据给客户端 ","date":"2020-05-11","objectID":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/:1:2","tags":null,"title":"利用做饭的流程来解释多线程的应用","uri":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/"},{"categories":null,"content":"多线程 \u0026 餐馆做饭 ","date":"2020-05-11","objectID":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/:2:0","tags":null,"title":"利用做饭的流程来解释多线程的应用","uri":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/"},{"categories":null,"content":"餐馆做饭 根据职责进行人员的分配，配合整个做菜流程 按职责分成下面几个角色。 采购员 案板 打杂 厨师 服务员 客人 每个角色的职责大致如下。 采购员 （买菜，买肉） 案板 （切菜， 切肉） 打杂 （做米饭，配菜，送菜给服务员，拿盘子等） 厨师 （炒菜） 服务员 （把菜从厨房间端到客人面前，给客人盛米饭） 客人 （吃饭） 需要的人员大大增加了， 每个人员负责的任务大大减少了。 ","date":"2020-05-11","objectID":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/:2:1","tags":null,"title":"利用做饭的流程来解释多线程的应用","uri":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/"},{"categories":null,"content":"多线程 根据职责分成下面几类线程 (每类线程的数量可能大于1) 网络线程 业务线程 数据库操作线程 每种线程的职责大致如下。 网络线程 从网络中获取数据 解析数据成我们需要的格式， 碰到无效数据则丢弃 业务线程 从数据库中取出玩家数据 处理业务 发送响应给客户端 (此处应该没有真的发送， 而是放入了网络数据的缓存里面) 数据库操作线程 定时保存数据到数据库 处理好数据加锁以及缓存 (笔者假设的内容，并没有真的实现过) 需要的线程增加了， 每类线程负责的内容变少了。 ","date":"2020-05-11","objectID":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/:2:2","tags":null,"title":"利用做饭的流程来解释多线程的应用","uri":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/"},{"categories":null,"content":"总结 ","date":"2020-05-11","objectID":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/:3:0","tags":null,"title":"利用做饭的流程来解释多线程的应用","uri":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/"},{"categories":null,"content":"做饭复杂化有什么好处和代价呢？ 代价 这里先说一下代价 需要的人变得很多了 原本需要一个人，现在至少需要6个人 会增加沟通的成本，管理费等。 整个团队（客人除外） 很可能会受到木桶原理的限制 当客人数量少的时候， 这套结构是复杂且浪费的。 好处 好处就是可以更快的制作出饭菜，服务客人。 当客人是2-3个的时候，一个人做饭还好 当客人是4-8个的时候，一个人做饭就会很吃力 当客人是30个的时候，一个人完全忙不过来， 很多客人会处于等待接应，极其愤怒的状态。 但是切换成这套机制下， 30个人也还好，完全忙的过来。 并且，大多数情况下，客人会得到来自服务员的响应，少部分情况下才会出现无人搭理的情况。 而且还可以根据情况进行人员数量的调整。 如果做饭比较慢，则增加厨师的数量 如果配菜比较慢，则增加打杂的数量 等等。。。 ","date":"2020-05-11","objectID":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/:3:1","tags":null,"title":"利用做饭的流程来解释多线程的应用","uri":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/"},{"categories":null,"content":"多线程比起单线程有什么好处和代价呢？ 代价 同样， 还是先说一下代价 编写起来比较复杂 需要处理多线程数据同步， 以及锁的问题。 可能会碰到更多的 更复杂的 bug 。 好处 充分利用计算机多核优势 可以同时处理更多的请求 单线程情况下， 同时只能处理一个请求，多线程则同时能处理多个请求 单线程情况下，在处理任务中的时候，后续请求会卡在网络层里等待。 多线程模型下，数据会从网络层拿出来， 封装成我们需要的数据格式， 并丢弃无效请求。 理论上来说， 大部分应用程序的处理请求的并发，多线程的极限比单线程大的多得多。 解耦 单线程程序在编写的时候也可以解耦， 但是图方便可能很少些单线程的会那样做😂 在 GUI 程序下， 单线程情况下， 如果碰到一个比较重的任务时（需要执行3-10s) ，UI 会卡住，在表现上是整个程序卡住了， 会给人非常不好的感觉。 把这个重的任务放到别的线程执行，则不会卡住 UI 线程， 用户会获取较好的体验✔️ 请求多， 增加网络线程的数量。 业务处理耗时比较久，增加业务处理的线程。 （注意： 线程调度切换也是需要代价的， 并不是越多的线程越好，但是适当的数量增加肯定是好的） ","date":"2020-05-11","objectID":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/:3:2","tags":null,"title":"利用做饭的流程来解释多线程的应用","uri":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/"},{"categories":null,"content":"那么，什么时候用呢？ 笔者给出的建议是根据需求来决定。 比如， 做一个很小的程序的时候， 单线程开发比较快， 当然选择单线程了。 开发大型程序（网游服务端，对并发有要求） 肯定要使用多线程模型的。 ","date":"2020-05-11","objectID":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/:3:3","tags":null,"title":"利用做饭的流程来解释多线程的应用","uri":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/"},{"categories":null,"content":"拓展阅读 https://github.com/RedSpider1/concurrent ","date":"2020-05-11","objectID":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/:3:4","tags":null,"title":"利用做饭的流程来解释多线程的应用","uri":"/program/%E5%88%A9%E7%94%A8%E5%81%9A%E9%A5%AD%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E8%A7%A3%E9%87%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8/"},{"categories":null,"content":"Akka Grpc 的简单入门 ","date":"2020-05-11","objectID":"/program/akka-grpc%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/:1:0","tags":null,"title":"Akka Grpc的简单入门","uri":"/program/akka-grpc%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"简介 Akka Grpc 是一个 rpc 框架。 基于akka-http,google protobuf 构建而成。 一些快速的链接。 官方文档： https://doc.akka.io/docs/akka-grpc/current/index.html Github地址： https://github.com/akka/akka-grpc ","date":"2020-05-11","objectID":"/program/akka-grpc%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/:1:1","tags":null,"title":"Akka Grpc的简单入门","uri":"/program/akka-grpc%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"详细内容 本篇是一个中文的使用流程把。 使用Java 语言编写代码。 scala 语言和其他类型的编译工具的代码可以在官方文档中找到。 协议文件 option java_multiple_files = true; option java_package = \"example.myapp.helloworld.grpc\"; option java_outer_classname = \"HelloWorldProto\"; package helloworld; // The request message containing the user's name. message HelloRequest { string name = 1; } // The response message containing the greetings message HelloReply { string message = 1; } ////////////////////////////////////// The greeting service definition. service GreeterService { ////////////////////// // Sends a greeting // ////////*****///////// // HELLO // ////////*****///////// rpc SayHello (HelloRequest) returns (HelloReply) {} // Comment spanning // on several lines rpc ItKeepsTalking (stream HelloRequest) returns (HelloReply) {} /* * C style comments */ rpc ItKeepsReplying (HelloRequest) returns (stream HelloReply) {} /* C style comments * on several lines * with non-empty heading/trailing line */ rpc StreamHellos (stream HelloRequest) returns (stream HelloReply) {} } 简单的说明 message 定义数据交互格式 。 service 生成rpc 调用 使用的 api 格式为： rpc 方法名 (参数) returns (返回类型) {} 参数和返回类型可以添加 stream 关键字， 表示这是一个数据流 。(持续输入， 或者持续输出) 生成java代码 我使用 Maven 工具作为依赖管理工具。 项目的 pom.xml 大致内容如下。 \u003cproject\u003e \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e \u003cname\u003eProject name\u003c/name\u003e \u003cgroupId\u003ecom.example\u003c/groupId\u003e \u003cartifactId\u003emy-grpc-app\u003c/artifactId\u003e \u003cversion\u003e0.1-SNAPSHOT\u003c/version\u003e \u003cproperties\u003e \u003cmaven.compiler.source\u003e1.8\u003c/maven.compiler.source\u003e \u003cmaven.compiler.target\u003e1.8\u003c/maven.compiler.target\u003e \u003cakka.grpc.version\u003e1.0.0-M1\u003c/akka.grpc.version\u003e \u003cgrpc.version\u003e1.29.0\u003c/grpc.version\u003e \u003cproject.encoding\u003eUTF-8\u003c/project.encoding\u003e \u003c/properties\u003e \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003ecom.lightbend.akka.grpc\u003c/groupId\u003e \u003cartifactId\u003eakka-grpc-runtime_2.12\u003c/artifactId\u003e \u003cversion\u003e${akka.grpc.version}\u003c/version\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003cbuild\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cgroupId\u003ecom.lightbend.akka.grpc\u003c/groupId\u003e \u003cartifactId\u003eakka-grpc-maven-plugin\u003c/artifactId\u003e \u003cversion\u003e${akka.grpc.version}\u003c/version\u003e \u003cconfiguration\u003e \u003cgeneratorSettings\u003e \u003cserverPowerApis\u003etrue\u003c/serverPowerApis\u003e \u003c/generatorSettings\u003e \u003c/configuration\u003e \u003cexecutions\u003e \u003cexecution\u003e \u003cgoals\u003e \u003cgoal\u003egenerate\u003c/goal\u003e \u003c/goals\u003e \u003c/execution\u003e \u003c/executions\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e \u003c/project\u003e 这里添加一个叫akka-grpc-maven-plugin 的 Maven插件。 这个插件的generate 行为可以生成出java 代码。 单独执行生成的话， 可以试试运行下面的命令生成代码。 mvn akka-grpc:generate 编写 server 端代码 在server端 需要实现 GreeterService 接口。 package example.myapp.helloworld; import java.util.List; import java.util.concurrent.CompletableFuture; import java.util.concurrent.CompletionStage; import java.util.stream.Collectors; import akka.NotUsed; import akka.stream.Materializer; import akka.stream.javadsl.Sink; import akka.stream.javadsl.Source; import example.myapp.helloworld.grpc.*; public class GreeterServiceImpl implements GreeterService { private final Materializer mat; public GreeterServiceImpl(Materializer mat) { this.mat = mat; } @Override public CompletionStage\u003cHelloReply\u003e sayHello(HelloRequest in) { System.out.println(\"sayHello to \" + in.getName()); HelloReply reply = HelloReply.newBuilder().setMessage(\"Hello, \" + in.getName()).build(); return CompletableFuture.completedFuture(reply); } @Override public CompletionStage\u003cHelloReply\u003e itKeepsTalking(Source\u003cHelloRequest, NotUsed\u003e in) { System.out.println(\"sayHello to in stream...\"); return in.runWith(Sink.seq(), mat) .thenApply(elements -\u003e { String elementsStr = elements.stream().map(elem -\u003e elem.getName()) .collect(Collectors.toList()).toString(); return HelloReply.newBuilder().setMessage(\"Hello, \" + elementsStr).build(); }); } @Override public Source\u003cHelloReply, NotUsed\u003e itKeepsReplying(HelloRequest in) { System.out.println(\"sayHello to \" + in.getName() + \" with stream of chars\"); List\u003cCharacter\u003e characters = (\"Hello, \" + in.getName()) .chars().mapToObj(c -\u003e (char) c).collect(Collectors.toList()); return Source.from(characters) .map(character -\u003e { return HelloReply.newBuilder().setMessage(String.valueOf(character)).build(); }); } @Override public Source\u003cHelloRepl","date":"2020-05-11","objectID":"/program/akka-grpc%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/:1:2","tags":null,"title":"Akka Grpc的简单入门","uri":"/program/akka-grpc%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"生产者/消费者模式 我的经验告诉我， 这个rpc库不能像常规的socket那样互发消息， 比如服务端要推送消息给客户端的时候就不太好用。 如果服务端不能推送消息给客户端的话， 那么就只能让客户端不停的轮询服务器，这里是比较浪费流量和性能的。 🐤🐤 我考虑的解决方法是 生产者/消费者模式 😺 Source 类可以通过一个叫fromPublisher 的方法把一个Publisher 转成Source 。 Usage 给一段代码 应该就可以明白怎么使用了。 Publisher publisher = new SubmissionPublisher\u003cHelloReply\u003e(); // publisher.offer(xx) 即可发送消息 return JavaFlowSupport.Source.fromPublisher(publisher); Source.fromPublisher() 方法需要使用akka-stream 库，有兴趣的朋友可以试着研究下。 ","date":"2020-05-11","objectID":"/program/akka-grpc%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/:1:3","tags":null,"title":"Akka Grpc的简单入门","uri":"/program/akka-grpc%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"FAQ akka 2.6.0 生成代码后报错。 使用更高的版本， 比如 akka 2.6.4 即可以解决问题。 如果非要使用 2.6.0 的话， 需要自己手动修改生成出来的代码， 不推荐这种方式。 如果我完全不懂akka 我可以使用akka-grpc 吗 可以是可以。。 但是难度不小， 这个库是基于 akka,akka-stream,akka-http 的。 其中异步响应式流框架akka-stream 有很多API， 在akka-grpc 里面应该都是可用的。 所以想好好使用这个框架的话， 可能也需要花时间去学习另外一个框架。 ","date":"2020-05-11","objectID":"/program/akka-grpc%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/:1:4","tags":null,"title":"Akka Grpc的简单入门","uri":"/program/akka-grpc%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"简述 在尽可能的情况下， 都应该使用 java的私有类型， 而装箱类型应该少用。 因为 装箱的类型 会占用更多的内存。 ","date":"2020-04-30","objectID":"/program/java%E7%A7%81%E6%9C%89%E7%B1%BB%E5%9E%8B%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1/:0:1","tags":null,"title":"Java私有类型装箱拆箱","uri":"/program/java%E7%A7%81%E6%9C%89%E7%B1%BB%E5%9E%8B%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1/"},{"categories":null,"content":"内存占用相关的内容 私有类型 装箱类型 内存占用(私有类型/ 装箱类型) boolean Boolean 1 byte / 16 bytes byte Byte 1 byte / 16 bytes short Short 2 bytes / 16 bytes char Char 2 bytes / 16 bytes int Integer 4 bytes / 16 bytes long Long 8 bytes / 16 bytes float Float 4 bytes / 16 bytes double Double 8 bytes / 16 bytes 1 byte 是一个字节 1 byte = 8 bit 1 KB = 1024 byte 由表中的数据可知， 装箱类型的内存占用比私有类型大很多， 因为 装箱类型都是 java class 。每个对象都需要存储类信息。 因此 从内存占用的角度来看，我们也应该避免使用装箱类型。 一个数组 float[5] 只会占用 32个字节 一个数组Float[5] (全部都是非null对象) 则会占用112个字节。 如果是64位非压缩指针，则需要152 个字节。 由此可见 使用装箱类型则会使用很多不必要的内存占用。 使用较多的装箱类型 将会引发更频繁的 GC 。 更频繁的 GC 将会产生性能问题。 附： 使用对象池也是为了尽可能的减少GC次数 ","date":"2020-04-30","objectID":"/program/java%E7%A7%81%E6%9C%89%E7%B1%BB%E5%9E%8B%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1/:0:2","tags":null,"title":"Java私有类型装箱拆箱","uri":"/program/java%E7%A7%81%E6%9C%89%E7%B1%BB%E5%9E%8B%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1/"},{"categories":null,"content":"如果非要使用的话 在使用泛型的时候， 我们不可避免的需要使用装箱类型，这个我暂时不知道如何更好的处理。 使用 valueOf() 方法， 避免使用 new 关键字。 因为装箱类型在JVM 里面会有缓存，所以这样做会有效的减少内存的占用。 var num1 = new Integer(10); // in jdk13, 你会看到 'Integer(int)' is deprecated 这样的说明， 并且会建议你 使用 valueOf(x) 方法 var num2 = new Integer(10); var num3 = new Integer(10); // 此时会有 3个 Integer 的对象。 占用 差不多 3 x 8 = 24 个字节。 var num11 = Integer.valueOf(10); var num12 = Integer.valueOf(10); var num13 = Integer.valueOf(10); // 此时 num11,num12,num13 都是使用的同一个缓存的对象。 占用 1 x 8 = 8 个字节 默认情况下， JVM 会缓存 -128 ~ +127 这个数字范围的 Integer 对象。 ","date":"2020-04-30","objectID":"/program/java%E7%A7%81%E6%9C%89%E7%B1%BB%E5%9E%8B%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1/:0:3","tags":null,"title":"Java私有类型装箱拆箱","uri":"/program/java%E7%A7%81%E6%9C%89%E7%B1%BB%E5%9E%8B%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1/"},{"categories":null,"content":"其他内容 关于浮点数 精度的问题 var num1 = 1f; var num2 = 0.99f; var num3 = num1 - num2; System.out.println(\"num3: \" + num3); // num3: 0.00999999 在上面的代码里面 , num3应该等于0.001 才对， 但是实际上输出的结果并不是。 这和java的浮点数实现机制有关系， 虽然大部分情况下， 数据都是正常的，但是如果用的多， 那肯定会有误差。 这时该怎么办呢？ 方法一： 提升高度， 使用int或者long。 比如 你在写一个交易系统的时候， 假如你使用float类型来存放用户的余额， 并且使用元 作为基本单位。 比如， 1.5 就是1块钱5角钱 此时你想修改的话， 就把基本单位 修改成分, 数据类型修改成long 就好了。 比如， 1.5元就 记录成 150。 这样就会避免计算错误的情况 因为int/long 类型不是浮点数， 没有这样的计算问题，所以就可以避免了。 方法二： 使用BigDecimal 类型 这个方法在使用的时候需要很多 BigDecimal实例， 除非用于计算很大的数字，否则我建议你使用方法一。 关于反射 int.class 和 Integer.class 是不同的，其他类型应该也是一样。 随意吐槽 学习编程相当长一段时间后，我才知道原来java和javascript根本没有半毛钱关系，那你们干嘛起类似的名字呀😂😂😂 ","date":"2020-04-30","objectID":"/program/java%E7%A7%81%E6%9C%89%E7%B1%BB%E5%9E%8B%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1/:0:4","tags":null,"title":"Java私有类型装箱拆箱","uri":"/program/java%E7%A7%81%E6%9C%89%E7%B1%BB%E5%9E%8B%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1/"},{"categories":null,"content":"简述 我曾经深受失眠的折磨，最近已经差不多摆脱了， 所以写一篇文章来帮助和我差不多经历的读者。 我曾经失眠的原因是因为恐惧 。 更详细的说明是因为前列腺炎而导致的恐惧。 故事差不多是这个样子的。 那是我第一次前列腺炎产生很大的状况， 坐久了难受，夜间老是起床，完全睡不好。 请了些假， 但是前列腺炎的症状并没有减弱。 久而久之，我一旦夜里醒来之后就开始胡思乱想，完全睡不着。 好多时候在夜里会熬个几个小时睡不着。 夜里起来之后会看表，会计算睡了多久，还能睡多久。 我当时恐惧的内容应该是 如果我睡不好，明天就要请假，请假会导致老板对我的印象越来越差。 还有一个是 前列腺炎怎么一直都不好，我已经吃了很久的药了！！ 目前来说，我并没有完全摆脱掉前列腺炎， 但是我已经差不多摆脱了前列腺炎让我产生的恐惧。 再添加一些信息来说明我这些方法的有效性，我目前还存在下列精神疾病。 我去医院诊断的，开了药， 但是吃了一次失眠后， 就没再继续吃了。 重症强迫症 中度抑郁症 ","date":"2020-04-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/:0:0","tags":null,"title":"关于失眠治疗的一些建议","uri":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"指导理论 依赖 呼吸和冥想 入睡，偶尔可能也需要试试感受 。 呼吸 可以使人平静， 只有平静下来之后才能更好的入睡。浅显的呼吸并没有用处，需要深呼吸。 冥想 一般应该不是用来睡觉的， 但是我感觉我用来睡觉的时候 效果还不错。 就目前来说，我一般依靠呼吸就可以睡着了，但是刚开始的时候，我冥想用的很多。 冥想的内容。 我一般会冥想我在画一个方块。 流程是这样的， 我先想象一个全黑或者全白的画布。 想象一个白色或者黑色的笔 在画布上移动，留下痕迹。 画出一个正方形， 紧接着重复之前的操作，画出一个层叠在之前正方形上的 新的正方形。 这个时候没有身体， 没有手， 没有大脑， 只有移动的笔和画出的正方形。 可能会被自己的杂念打断很多次，但是不要紧，被打断重来即可，被打断并不会产生任何副作用， 不要害怕被打断。 冥想需要再 多次深呼吸平静下来之后再使用。 🤥🤥🤥 感受 很简单。 就是感受身体，告诉自己下面的内容 我现在可以休息了，每件事我都已经完成了，不需要再害怕什么了。 让身体里面的疲劳涌现出来吧。 感受涌现出来的疲劳。 感受手触碰的物体， 感受小腿触碰的物体， 感受脚趾触碰的物体。 具体方法 ","date":"2020-04-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/:0:1","tags":null,"title":"关于失眠治疗的一些建议","uri":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"4-7-8 呼吸 以下内容 引用 搜狐的文章 哈佛大学毕业的医生安德鲁（AndrewWeil）分享了4-7-8呼吸法帮助睡眠方法，不需要药物或设备，只要照着这个方法做，就能在60秒内入睡！ 方法很简单，只要利用鼻子吸气4秒，憋气7秒，最后再呼气8秒，做3次循环后你就能感受到睡意。一开始做可能不熟没睡意，但只要坚持一天做2次，持续6-8周习惯之后，就能迅速的在60秒内安稳入睡啦！ https://www.sohu.com/a/145898455_377305 此方法， 我试过， 亲测有效。 ","date":"2020-04-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/:0:2","tags":null,"title":"关于失眠治疗的一些建议","uri":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"深呼吸方法 这是我目前正在用的方法， 可能和我并不是那么想快速入睡有关系吧。😂😂 呼吸可以使人平静下来 入睡需要身体平静， 当你在以下情况的时候很可能睡不着。 胡思乱想的时候， 大脑停不下来的时候。 左动一下， 右动一下， 不停的翻身的时候。 不停得下床 喝水，吃东西，尿尿的时候 刚玩完刺激性网游的时候 | PUBG,LOL 等 在深呼吸的时候 ，可能会碰到下面的困难 念头不受控制的出现 碰到这种情况， 我一般都是让意识跟随呼气 准确的来说 就是用鼻子 吸一大口空气 然后呼气的时候 在心理默念 呼~~ 😬😬 吸气~ 吸气~ 呼~~~~ 吸气~ 吸气~ 呼~~~~ 然后就感觉精神有点重了一点的感觉， 然后再坚持一会就睡着了。 深呼吸 也睡不着啊 这种情况， 就需要借助上面的冥想 进行入睡了。 冥想也无法入睡， 就试试 4-7-8 睡眠法。 其他 ","date":"2020-04-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/:0:3","tags":null,"title":"关于失眠治疗的一些建议","uri":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"夜里如果起来了 不要看时间 我发现 一旦看了时间， 可能就无法再次入睡了。 但是如果我不管现在是几点了的话， 我就可以很好的再次入睡。 你可能会产生想要去看时间的想法， 这没事的，只要没有真的去看了时间就没事。 ","date":"2020-04-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/:0:4","tags":null,"title":"关于失眠治疗的一些建议","uri":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"夜起后回到床上又睡不着了。 此时放空大脑即可。 你的脑袋里面可能会产生乱七八糟的，各种各样的念头，抛弃他们即可。 我的具体操作是 方法一， 强制驱除念头， 进行深呼吸， 让念头放在呼吸上， 一会就继续入睡了。 方法二， 自己和自己对话。 念头一旦出现，就告诉自己 ”我知道了，不要再吵了， 就这样。“ 如果你没有控制住自己， 此时又失眠了， 该怎么办呢。 深呼吸。 此时的深呼吸会比入睡的时候 更难一些， 至于原因，我暂时不知道。 在相当长的一段时间之后， 会入睡。 此时 可能会担心 睡得时间会越来越少了。 应对方法为： 告诉自己 无所谓，睡得少就少点好咯。 这会相当困难， 但是是一个可行的方案。 ","date":"2020-04-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/:0:5","tags":null,"title":"关于失眠治疗的一些建议","uri":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"睡前的准备 不要喝很多水，吃大量的水果， 以防夜尿多。 不要吃很多东西， 听说会导致肠胃负担重。 可以喝点酸奶， 会帮助入睡。 ","date":"2020-04-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/:0:6","tags":null,"title":"关于失眠治疗的一些建议","uri":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"器质性病变 需要去看医生 如果你有什么疾病， 请去看医生， 先处理好疾病。 医生虽然有不少时间是不靠谱的， 但是目前也没有别的更靠谱的途径可以治疗疾病。 ","date":"2020-04-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/:0:7","tags":null,"title":"关于失眠治疗的一些建议","uri":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"其他未试过的方法 香薰灯 OR 加湿器 买一瓶薰衣草植物精油，在睡前滴几滴放加湿器里面， 然后打开加湿器，依靠薰衣草的效果入睡。 尝试 无论 你相不相信最终效果， 只要你想试着解决失眠的问题，我认为你都应该尝试下。 ","date":"2020-04-30","objectID":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/:0:8","tags":null,"title":"关于失眠治疗的一些建议","uri":"/caprice/%E5%85%B3%E4%BA%8E%E5%A4%B1%E7%9C%A0%E6%B2%BB%E7%96%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/"},{"categories":null,"content":"起点 前些天做了个梦，然后结合最近看的书，和以前的想法，产生了一个假想。 以下内容大部分没有科学依据，纯属猜测🤣🤣 ","date":"2020-04-20","objectID":"/caprice/%E6%A2%A6%E5%A2%83%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%9A%84%E9%9A%8F%E6%83%B3/:0:0","tags":null,"title":"梦境和现实的随想","uri":"/caprice/%E6%A2%A6%E5%A2%83%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%9A%84%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"梦境描述 🤥 在梦里，我以为我在玩游戏，然后我的角色就成了我，我就进入到了我以为是游戏内容的那个场景里。 我在一个洞穴门口， 稍远点有一个人，我知道他是我的敌人，是我这次要战斗的目标。 我面前有一个陷阱， 翻滚即可无伤过去。 我翻滚之后，突然觉得我在此时此处应该应该有一把斧头在手里， 但是我现在手里什么都没有。 我觉得哪里出BUG了，我得重新进入这个关卡，以消除BUG。 这时，对面的人 注意到我了，我耳边好像想起了一些BGM， 我很慌😰😰 我匆忙的调出游戏菜单， 然后点了重新开始。 我重新出现在了门口， 此时我的手里有了一把斧头。 我翻滚过去，准备和那个人战斗， 然后我就醒了。 🙈🙈🙈 主要观点： 我很肯定重来后我手里应该有一把斧头， 然后我手里就出现了斧头 记得我之前有次做梦， 我意识到了我在做梦，我认为在自己的梦里我应该是无所不能的， 然后我就真的无所不能。 ","date":"2020-04-20","objectID":"/caprice/%E6%A2%A6%E5%A2%83%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%9A%84%E9%9A%8F%E6%83%B3/:0:1","tags":null,"title":"梦境和现实的随想","uri":"/caprice/%E6%A2%A6%E5%A2%83%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%9A%84%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"书籍内容 软技能：代码之外的生存指南 本书的作者是 John Sonmez , 豆瓣读书的 主页 。 我个人认为这本书里面的干货很多， 值得一看。本作的作者自称在35岁就退休了，靠着投资房产每月的被动收入到达了8000美元。 书中第七篇 精神， 讲述了如何改变信念， 改变思维模式的内容。 如果想改变自己的态度， 你就必须改变自己的想法。如果想改变自己的想法， 你就必须转变自己的思维模式。你的思维模式是由你的习惯决定的，因此我们可以追溯到改变你生活中处理任何关键事情所采用的主要方式——养成一个习惯。 你要真正要做的是战胜平庸——从大脑开始。你是如何看待自己的，这一点拥有惊人的力量，可以限制你的发展，也可以让你加速前进。 上面两段是书中原文。(并不是相连的两段文字) 你所相信的东西，能帮助你， 也能限制你。 你的信念很重要，请记住，你拥有选择权，你可以选择自己要做什么。 Youtube 激励视频 激励视频， 内容可能都是杜撰的，真实性我并不确定。 一些成功人士在早上醒来之后第一件事情就是听肯定句。 如果这是真的， 我认为他们在改变自己的信念， 改变自己所相信的内容。 自卑与超越 本书的作者是[奥地利] 阿尔弗雷德·阿德勒 ，是一本心理学的书籍。 在本书的前篇讲了一些关于童年的内容。 （本书肯定是有关于童年的内容的，是不是前篇我到记不太清楚了。 😬😬） 本书认为 一个人的童年生活会对其一生产生影响。 我的解读的是：童年是人生的第一个阶段，是我们培养对世界的基本观念的阶段，是我们塑造信念的阶段。 在长大了之后，我们的信念会保留下来， 我们会相信我们所相信的，并难以改变。 对周围环境的感知决定了信念，信念是行为的指导方针。 过去的行为决定了我们的现在，现在的行为决定了我们的未来。 ","date":"2020-04-20","objectID":"/caprice/%E6%A2%A6%E5%A2%83%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%9A%84%E9%9A%8F%E6%83%B3/:0:2","tags":null,"title":"梦境和现实的随想","uri":"/caprice/%E6%A2%A6%E5%A2%83%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%9A%84%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"潜意识 我认为我们的主观是潜意识的一部分。 潜意识会记录你的主观感受不到的内容，会记录大量的内容。 如果一个人每天都读一些肯定句，改变信念的内容， 那么这部分内容在他的记忆里，潜意识里所占的比例就会越来越大。 如果主观思想是从潜意识里面获取的，那么当潜意识里正面内容越来越多的时候，我们抽取的内容就越可能是正面的。 😐😐 附： 大脑无法理解过于复杂的内容，当你想激励自己的时候，请说肯定句，不要说否定句。 打个比方， 我现在让你不要去海边，那么你现在内心的想法 99.99% 是去海边游玩。 —— 以上内容来自读《认同自己：如何超越与生俱来的弱点》的感想。 ","date":"2020-04-20","objectID":"/caprice/%E6%A2%A6%E5%A2%83%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%9A%84%E9%9A%8F%E6%83%B3/:0:3","tags":null,"title":"梦境和现实的随想","uri":"/caprice/%E6%A2%A6%E5%A2%83%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%9A%84%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"梦境是现实的缩影 以下内容皆为猜测， 各位读者可以当做看个乐呵🌝🌝 概念上的变化在梦里非常容易体现出来，而现实生活中这样的改变则显得十分困难，以下是我的推测。 可以很快的改变成一种观念的话， 就可以很快的变化成另外一种观念。 那样的话， 人会反复无常。 经过长达数年的信念改变， 人真的会改变的， 这说明改变是可能的，只是很难。 记忆截断论🌚🌚 我有时候会想， 我们的记忆是不是真的， 宇宙大爆炸是不是真的。 然后我想到了一种可能， 如果整个现实是截断和填充的， 我们是不是也无法意识到。 比如， 我们当前的世界是从1900年开始计算的， 之前的所有内容都是被填充的。换句话说就是 我们使用的资料， 那时人们的记忆都是被填充的。我们在此基础上继续繁衍生活的。 这时，可能会有读者认为我是小说看多了。 但本文本来就是随想，我就是随便发表发表意见😂😂 其实还有个问题， 假如我们醒来之后记忆被重新赋予和修正了， 我们能发现吗？ ","date":"2020-04-20","objectID":"/caprice/%E6%A2%A6%E5%A2%83%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%9A%84%E9%9A%8F%E6%83%B3/:0:4","tags":null,"title":"梦境和现实的随想","uri":"/caprice/%E6%A2%A6%E5%A2%83%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%9A%84%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"关于现实的规则 现实生活中的规则太多了，我会有种这个世界是不是被创造的呢， 那样一种感觉。 人们发现了一个又一个的物理原则，数学原则， 这些原则会不会是被设计好的呢？ 人类社会的游戏规则应该是被人类设计和创造的，但是创造的基础应该还是大自然的规则 。 大自然的规则就一定不是被设计的吗？ 是的，我们的生活是很有实感。 尤其是当有另一半， 有很强的感情的时候， 但是感觉毕竟只是感觉而已。 时间是目前为止我觉得最具有规则性的东西。 ","date":"2020-04-20","objectID":"/caprice/%E6%A2%A6%E5%A2%83%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%9A%84%E9%9A%8F%E6%83%B3/:0:5","tags":null,"title":"梦境和现实的随想","uri":"/caprice/%E6%A2%A6%E5%A2%83%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%9A%84%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"灵魂假想 如果我们的现实是被创造的， 那我们是不是也在游戏中呢？ 这个世界到底有没有灵魂，估计只有死掉的人才知道。 哦，不对，他们可能也不知道。 ","date":"2020-04-20","objectID":"/caprice/%E6%A2%A6%E5%A2%83%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%9A%84%E9%9A%8F%E6%83%B3/:0:6","tags":null,"title":"梦境和现实的随想","uri":"/caprice/%E6%A2%A6%E5%A2%83%E5%92%8C%E7%8E%B0%E5%AE%9E%E7%9A%84%E9%9A%8F%E6%83%B3/"},{"categories":null,"content":"Let’s write something.. aa 是的. OK， 现在看看页面吧。。 编码应该有设置的吧。。 // code java public static class A { public void test (String a){ System.out.println(a); } } single line hereo 中文字体 😋 表情测试 😏 这是一个秃头表情。 😁 🤣 🙄 也不用赋值啥， 搜过输入法就可以直接输入了 😹 🙈 如果不知道 内容， 可能也搜不出来。。 🤥 👶 👆 👍 👁 🤝 🙏 🐮 🌚 🌚 🌚 🌚 ","date":"2020-04-17","objectID":"/caprice/newpost/:1:0","tags":null,"title":"write something .. ","uri":"/caprice/newpost/"},{"categories":null,"content":"🌚 这个好搞笑啊。。 😁哈哈哈 🎉🎉🎉🎉 http://emojihomepage.com/ 有个列表， 点击复制表情 Emmmm… ","date":"2020-04-17","objectID":"/caprice/newpost/:2:0","tags":null,"title":"write something .. ","uri":"/caprice/newpost/"},{"categories":null,"content":"声明： 本人在操作的时候 并不算完美的恢复了，只是现在是可用了，使用的平台是虚拟机（esxi 6.5) 里面恢复的 先推荐一个 工具 mondo rescue: http://www.mondorescue.org/ 这个工具可以用来备份磁盘和在本地进行恢复。 不过似乎有点bug , 并且你磁盘过大的时候似乎也不太友好。 至于这个工具怎么用， 网上资料一堆， 直接在阿里云上进行运行即可， 不过需要你有足够的空余磁盘。 我之前是全盘备份， 26G左右的文件， 打包后 大约15G多。我碰到的情况是 生成4个iso 文件， 然后全部下载到本地 ，进行恢复就好了。 但是这里有个不是很友好的地方，如果你要把系统恢复到物理机的话， 你可能要多备几个U盘。 恢复流程大概就是先把 第一个iso镜像文件（文件名结尾为 01的iso文件） 写入 U盘/光盘 然后让物理机从 该设备启动。 会看到一个界面， 想要全盘恢复就输入nuke 之后会提示你插入第二个光盘 并按enter键。 想要节省时间的话， 就提前把第二个镜像写入 U盘或者光盘， 看到提示就 切换一下，然后按enter。 如果你是使用虚拟机就比较简单， 直接把镜像文件切换 按enter键就可以了。 对了用虚拟机的话， 只给虚拟机一个cd-rom设备就可以了， 看到提示就更换挂载的镜像文件， 然后按enter。 我这里是换硬盘恢复的， 会提示 挂载点变更， 类似 mountlist has changed之类的提示， 问我是否要更新这个， 按确定进行更新， 然后操作一下。 其实这里应该只是修改引导， 让你恢复之后的系统可以启动。 我这里碰到了一个问题，无法解决。 就是恢复之后 会有一个文件把我的磁盘占满， 我本来用50G的空间， 不行， 改成80G之后还不行， 我感觉是工具出bug了。 引导的问题， 弄了半天都没有搞好。 然后我就把当前虚拟机的硬盘 挂到了另外一个虚拟机里面， 然后用 mount 命令挂载一下硬盘， 把文件复制一下。 就好了。 ","date":"2018-08-11","objectID":"/periphery/%E4%BB%8E%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8A%E6%8A%8A%E7%B3%BB%E7%BB%9F%E5%BC%84%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/:0:0","tags":null,"title":"从阿里云上把系统弄到本地的一些记录","uri":"/periphery/%E4%BB%8E%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8A%E6%8A%8A%E7%B3%BB%E7%BB%9F%E5%BC%84%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"基本信息: java 服务端 网络框架用的 netty Unity的客户端，用的 tcpClient. 通信协议选择的 protobuf. java端采用的是谷歌提供的解析器， 而客户端则采用的protobuf-net 我在设计中 使用了一个叫 GameMsg 的协议来封装所有协议的内容。 在本来中设计中 使用了一个 string paramStr = 1; 的字段来存放协议的具体内容。 然后发现 在 unity 端中 如果协议的属性带有负数， 则报出一个 number overflow 的异常。 把 string 改成 bytes 就好了。 如果是 java 和java 这样通信， string 是允许的。 但是 unity 不行。 ","date":"2017-05-10","objectID":"/periphery/protobuf-net-parse-from-string-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/:0:0","tags":null,"title":"Protobuf number overflow 的解决方法","uri":"/periphery/protobuf-net-parse-from-string-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"categories":null,"content":"写这篇文章的时候，笔者还是一个很菜的菜鸟， 本文可能有误。 我在弄我们公司的项目的时候。 地图 上面的每一个实体，我是当作一个单位来看的。每隔若干毫秒对地图所有的实体进行一个update ，更新他们的状态。 在更新他们的状态的时候，往往需要根据他们的当前状态来决定怎么更新他们。这可以用状态机来实现。 也可以考虑用行为树来实现。但是我不会。。 所以我采用了一种简单版本的状态机来做。 所有的状态如下列表 等待 眩晕 移动 站立 追击 使用技能 被嘲讽 我本来是记录一个实体就一个状态。根据不同的状态做事情。但是有个问题是，如果这个实体进行等待中了， 在他等待结束的时候就需要调整他的状态。 我本来是根据一些别的参数（当前是否有移动路径，当前是否有追击对象） 来做调整的。 但是这样做容易出bug.. 而且很不好。 所以我做了一些调整。 我现在让每个单位身上不是具有一个状态。而是具有一个状态栈。 这样就能比较良好的处理各个状态之间的转换。尤其是处理等待，眩晕的时候。 默认的栈顶是一个 站立 状态。 当有新的状态进来的时候 直接入栈。 当该状态结束的时候 则把该状态出栈。 比如 站立的时候 因为某种需求变成移动状态了。 然后就一直移动，直到 到达目的地。然后 退回成站立状态。 比如在移动追击某个敌人的时候 转换成了施放技能的状态。 等技能释放 结束之后 还是在 追击状态。 个人觉得，这种情况实现起来比行为树简单一些。 然后出问题的情况比 单一状态的那种 要小一些。 ","date":"2016-12-27","objectID":"/program/%E7%8A%B6%E6%80%81%E6%9C%BA%E5%8F%98%E7%A7%8D%E6%9C%89%E5%85%B3%E7%8A%B6%E6%80%81%E6%A0%88%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/:0:0","tags":null,"title":"[状态机变种]有关状态栈的一些记录","uri":"/program/%E7%8A%B6%E6%80%81%E6%9C%BA%E5%8F%98%E7%A7%8D%E6%9C%89%E5%85%B3%E7%8A%B6%E6%80%81%E6%A0%88%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"},{"categories":null,"content":"如果一个动态库 a.so 依赖了另外一个动态库 b.so . 那么， 当 b.so 的内容变更的时候， 可能就需要重新编译 a.so ，否则的话会产生一些无法预知，而且莫名奇妙的问题。 比如 明明代码写的是调用 b.so 内的函数 add ，在执行的时候却调用了 sub函数。 当碰到这种情况的时候， 重新编译一下a.so 库就好了。 ","date":"2016-12-06","objectID":"/program/so-%E5%8A%A8%E6%80%81%E5%BA%93%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/:0:0","tags":null,"title":"So 动态库引用问题","uri":"/program/so-%E5%8A%A8%E6%80%81%E5%BA%93%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/"},{"categories":null,"content":"记录一下 我是怎么计算抛物线的近似长度 。。 想当初我找了抛物线长度的计算公式， 找了好久都没找到简单方便的。。。 首先普及一下相关公式 ： 抛物线的一般方程: y=ax²+bx+c ，抛物线的顶点式： y=a(x-h)²+k (a≠0，k为常数） 根本炮弹的出发点和目标位置， 以及策划的配置表， 我可以获得到 抛物线线段的起始点， 和终点， 以及抛物线的顶点 （1/2距离，策划配置） 利用抛物线的顶点式可以计算出抛物线的方程式。 计算出方程式之后， 就可以根据 相应的x 计算出y的坐标。 然后把起始点和终点之间的距离分段。 比如x的步长是0.15， 那么计算出 (0,0) 到 (0.15,y[根据方程式计算出值]) 的三角形斜边距离。 继续推进 x, 计算出 (0.15,y1) 到 (0.30,y2) 的距离。 一直从起始点(0,0) 到 终点(x,0) 这样就可以求出 这个抛物线线段的近似距离。 然后 炮弹的飞行时间， 就是距离除以速度就Ok 了。 大致就是下图这样的。 ","date":"2016-11-20","objectID":"/program/java-%E8%AE%A1%E7%AE%97-%E6%8A%9B%E7%89%A9%E7%BA%BF%E7%9A%84%E8%BF%91%E4%BC%BC%E9%95%BF%E5%BA%A6-%E7%82%AE%E5%BC%B9%E7%9A%84%E8%BF%91%E4%BC%BC%E9%A3%9E%E8%A1%8C%E6%97%B6%E9%97%B4/:0:0","tags":null,"title":"Java 计算 抛物线的近似长度 炮弹的近似飞行时间","uri":"/program/java-%E8%AE%A1%E7%AE%97-%E6%8A%9B%E7%89%A9%E7%BA%BF%E7%9A%84%E8%BF%91%E4%BC%BC%E9%95%BF%E5%BA%A6-%E7%82%AE%E5%BC%B9%E7%9A%84%E8%BF%91%E4%BC%BC%E9%A3%9E%E8%A1%8C%E6%97%B6%E9%97%B4/"},{"categories":null,"content":"具体情况我也不知道， 不清楚他是怎么黑进去的。。 上周三晚上好像。 我在网吧玩剑灵， 截了一些图， 在下机之前的时候准备上传到网盘里面。 结果， 网盘的速度超慢，超慢的。 我就用手机连接服务器的ssh ，看看什么情况。 一看不要紧。 我发现一个叫做 minerd 的程序 吃满了CPU 。。 我当时就心里一咯噔， 不会被黑了吧。。 但是当时已经很晚了。 我也急着回去睡觉了。 卡就卡呗， 先把图传了。 一会儿，终于把图给传上去了。 然后我登录阿里云的后台管理页面， 把VPS 给停掉了。 第二天到了公司。 我就打了一个小差，看看这个到底是什么鬼。 一百度 minerd ，果然有一些记录。 据说 这个是被黑了。 用来挖比特币和 进行DDOS 攻击。 kill 了进程， 删除了文件， 一会 这个文件又出现了， 然后进程复活。。 百度出的资料也不多。 一般就是说 清理掉定时任务。 删除没用的用户。我都试了。 然而还是不行。。 蛋碎一地啊 有没有。。 弄到后来， 我让文件继续存在在上面了。 然后把我文件的权限给干掉了 使用命令chmod 000 minerd 设置了权限。 然后 kill 掉他的进程。。 好像就是好了。 等以后有机会 我再仔细看看 这个东西到底怎么解决掉。。 这是一个暂时的方法，我最近事情也比较多，没什么时间弄它。 ","date":"2016-08-07","objectID":"/periphery/%E5%89%8D%E5%87%A0%E5%A4%A9%E6%88%91%E7%9A%84vps-%E8%A2%AB%E9%BB%91%E4%BA%86/:0:0","tags":null,"title":"前几天，我的vps 被黑了","uri":"/periphery/%E5%89%8D%E5%87%A0%E5%A4%A9%E6%88%91%E7%9A%84vps-%E8%A2%AB%E9%BB%91%E4%BA%86/"},{"categories":null,"content":"简述一下环境：　java netty 的服务端， cocos2dx 的客户端 昨天测试的时候 发生了一个奇怪的现象。 服务端在本地跑的时候， 都是正常的。 放到阿里云的服务器上面去的时候。 在客户端与服务端进行第一次连接的时候一切OK，然后第二次连接的时候 就出现了问题。。。 问题具体发生的原因我现在也还没弄明白。。。 然后，我就查阅了一下 有关 windows select IO 异步模型的资料。 虽然这病没有帮助我解决问题， 但总归是有了些启发。 然后我想，我加一下发送的数据包的长度进去吧。 于是乎，我在 netty 上面加了一个 解码器， 标注了发来的数据包会标准它的长度。 然后客户端在发送的时候会先发一个 表示长度的数据。 一般是采用 4个字节长度的大小。 因为大小端的问题， 在弄长度的时候 也发生了乱七八糟的问题。长度不能正确被解析，因为我也没有什么经验，所以好多元素对于我来说都是未知的。 我也不能确定问题到底在哪， 所以也比较蛋疼。 这种时候， 没办法，只能使用排除法了。 我先写了一个 java 的类 来测试大小端的问题。 我使用 java.nio.bytebuffer 类来生成byte数组。 我先 使用 putInt 方法， 将要发送的字节数量 put 进去， 然后在放入具体的数据。 Socket socket = new Socket(\"127.0.0.1\", 7000); ByteBuffer buffer = ByteBuffer.allocate(1024); buffer.putInt(8); buffer.putInt(1); buffer.putInt(2); socket.getOutputStream().write(buffer.array(), 0, 12); socket.getOutputStream().flush(); 这样测试之后， 发现长度解码器是可以正确使用的。 所以得出结论。 既然长度解码器是可以使用的， 那么只能说明客户端部分的代码是有问题的。 所以调试客户端部分的代码。 因为在客户端进行了多次的send ，所以无法判断问题到底出现在什么地方。 所以只保留一个 send, 进行测试。 我本来的做法是先把长度send 过去， 再进行send 数据。 后来发现这种方式是不对，会产生数据。正确的做法应该是： 将数据包的长度和数据一起发送给服务端。相关代码如下： /* 这是c#代码， 改改就可以在c++中使用了。 这段代码也是我借鉴其他同事的 */ int nOffset = 0; m_sendBuffer[nOffset + 3] = (byte)(nSize \u003e\u003e 0); // nSize 是数据包的长度 m_sendBuffer[nOffset + 2] = (byte)(nSize \u003e\u003e 8); m_sendBuffer[nOffset + 1] = (byte)(nSize \u003e\u003e 16); m_sendBuffer[nOffset + 0] = (byte)(nSize \u003e\u003e 24); /* 上述代码可以把数据包的长度 用大端的方式 放在发送缓冲的前面位置。因为java才用的是大端模式， c++ 采用的小端模式。 据说 大小端是因为CPU 来决定的。 x86平台都是小端。 但是呢，我也不是很懂，所以考虑那么多的处理也没有什么意义只能先当 java是大端， c++ 是小端了。 出现了响应的情况，再进行处理把。 */ memcpy((m_sendBuffer+4),data,nSize); // 将要发送的数据 copy 到发送缓冲中 send(fd,m_sendBuffer,nSize+4,0); // 连同标记长度的4个字节也要发送出去。 这样处理之后， netty 就能正确的收到 长度标识。然后读取到标记的字节到ByteBuf中。 但是呢， ByteBuf 收到的字节是按照大端方式排序的。 所以需要对其进行处理。 ByteBuf buf = (ByteBuf)msg; buf = buf.order(ByteOrder.LITTLE_ENDIAN); 这样之后， 就可以正确的处理发送过来的内容了。 嗯。。。 是不是很麻烦呢。。 确实呢， 如果直接都用c++进行编写，这样的情况应该就没有了把。 但是呢， 那样的话就要去踩 C++ 的坑， so 其实还好啦。 就大小端的问题比较头疼， 处理好了，别的应该就没有什么难的了。 以前总是喜欢快速的解决问题。 即，搜到代码， 不去理解而是直接选择使用。 出了错误直接换一个地方的代码。 好多情况都会出现代码可以使用，所以有些养成这样的习惯了。其实这是一个不好的习惯。 因为这样只是表面的解决问题了， 具体原理无法理解， 一旦出现 错误了，整个人都会直接懵逼了。会想， 这特么到底是因为什么呀。 艹， 你麻痹的， 真是头疼。 所以那种方式的直接使用是不正确的。 不要急着去解决问题。 可以先看看别人写的文章，到底是因为什么， 这么做的作用是什么， 原理是什么。 了解了之后就相当于提高了自己的内功，而不只是一个纸老虎 了。 要相信 磨刀不误砍柴工。 工欲善其事必先利其器。 netty 长度解码器相关资料： http://www.cnblogs.com/zhuawang/p/4047993.html ","date":"2016-04-17","objectID":"/program/netty%E5%92%8Ccocos2dx%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/:0:0","tags":null,"title":"Netty和cocos2dx一起使用碰到的问题","uri":"/program/netty%E5%92%8Ccocos2dx%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"},{"categories":null,"content":"这里不能再使用clone 方法了。 打开 git bash(windows 下) 利用 cd 命令 切换到 要克隆到的目录的位置 比如： mkdir projectA \u0026\u0026 cd projectA 输入命令： git init 在当前目录下初始化一个仓库 输入命令： git pull [url] 从目标仓库中拉取文件到本地 输入命令： git remote add origin [url] 添加一个远程分支 输入命令： git add . 把当前目录的文件添加到提交列表 输入命令： git commit 填写提交消息， 然后输入 :wq 结束 输入命令： git push –set-upstream origin master 推送代码， 会要求你输入用户名和密码 以后再推送的时候 直接输入 git push 就好了。 如果你使用什么IDE的话， 如果IDE 有GIT 的插件的话，那么现在应该就可以看到GIT 的信息了 ","date":"2016-04-12","objectID":"/periphery/git-%E5%A6%82%E4%BD%95%E5%85%8B%E9%9A%86%E4%BB%A3%E7%A0%81%E5%88%B0%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E5%86%85/:0:0","tags":null,"title":"Git 如何克隆代码到已经存在的文件夹内","uri":"/periphery/git-%E5%A6%82%E4%BD%95%E5%85%8B%E9%9A%86%E4%BB%A3%E7%A0%81%E5%88%B0%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E5%86%85/"},{"categories":null,"content":" 创建分支： git branch [name] 切换分支: git checkout \u003cbranch\u003e 列出所有分支： git branch -a 删除某个本地分支： git branch -d [name] 提交分支到远端 git push –set-upstream origin \u003cbranch\u003e 删除远程分支： git push origin –delete \u003cbranch\u003e 合并分支： git checkout master; git merge fix1; # 将 fix1 分支合并到 master 分支上 ","date":"2016-04-12","objectID":"/periphery/git-%E5%88%86%E6%94%AF%E6%8F%8F%E8%BF%B0/:0:0","tags":null,"title":"Git 分支描述","uri":"/periphery/git-%E5%88%86%E6%94%AF%E6%8F%8F%E8%BF%B0/"}]